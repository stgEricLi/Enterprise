USE [qds11447465_db]
GO
/****** Object:  StoredProcedure [dbo].[aspnet_AnyDataInTables]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_AnyDataInTables]
    @TablesToCheck int
AS
BEGIN
    -- Check Membership table if (@TablesToCheck & 1) is set
    IF ((@TablesToCheck & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Membership))
        BEGIN
            SELECT N'aspnet_Membership'
            RETURN
        END
    END

    -- Check aspnet_Roles table if (@TablesToCheck & 2) is set
    IF ((@TablesToCheck & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Roles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 RoleId FROM dbo.aspnet_Roles))
        BEGIN
            SELECT N'aspnet_Roles'
            RETURN
        END
    END

    -- Check aspnet_Profile table if (@TablesToCheck & 4) is set
    IF ((@TablesToCheck & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Profile))
        BEGIN
            SELECT N'aspnet_Profile'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 8) is set
    IF ((@TablesToCheck & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_PersonalizationPerUser))
        BEGIN
            SELECT N'aspnet_PersonalizationPerUser'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 16) is set
    IF ((@TablesToCheck & 16) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'aspnet_WebEvent_LogEvent') AND (type = 'P'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 * FROM dbo.aspnet_WebEvent_Events))
        BEGIN
            SELECT N'aspnet_WebEvent_Events'
            RETURN
        END
    END

    -- Check aspnet_Users table if (@TablesToCheck & 1,2,4 & 8) are all set
    IF ((@TablesToCheck & 1) <> 0 AND
        (@TablesToCheck & 2) <> 0 AND
        (@TablesToCheck & 4) <> 0 AND
        (@TablesToCheck & 8) <> 0 AND
        (@TablesToCheck & 32) <> 0 AND
        (@TablesToCheck & 128) <> 0 AND
        (@TablesToCheck & 256) <> 0 AND
        (@TablesToCheck & 512) <> 0 AND
        (@TablesToCheck & 1024) <> 0)
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Users))
        BEGIN
            SELECT N'aspnet_Users'
            RETURN
        END
        IF (EXISTS(SELECT TOP 1 ApplicationId FROM dbo.aspnet_Applications))
        BEGIN
            SELECT N'aspnet_Applications'
            RETURN
        END
    END
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Applications_CreateApplication]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Applications_CreateApplication]
    @ApplicationName      nvarchar(256),
    @ApplicationId        uniqueidentifier OUTPUT
AS
BEGIN
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName

    IF(@ApplicationId IS NULL)
    BEGIN
        DECLARE @TranStarted   bit
        SET @TranStarted = 0

        IF( @@TRANCOUNT = 0 )
        BEGIN
	        BEGIN TRANSACTION
	        SET @TranStarted = 1
        END
        ELSE
    	    SET @TranStarted = 0

        SELECT  @ApplicationId = ApplicationId
        FROM dbo.aspnet_Applications WITH (UPDLOCK, HOLDLOCK)
        WHERE LOWER(@ApplicationName) = LoweredApplicationName

        IF(@ApplicationId IS NULL)
        BEGIN
            SELECT  @ApplicationId = NEWID()
            INSERT  dbo.aspnet_Applications (ApplicationId, ApplicationName, LoweredApplicationName)
            VALUES  (@ApplicationId, @ApplicationName, LOWER(@ApplicationName))
        END


        IF( @TranStarted = 1 )
        BEGIN
            IF(@@ERROR = 0)
            BEGIN
	        SET @TranStarted = 0
	        COMMIT TRANSACTION
            END
            ELSE
            BEGIN
                SET @TranStarted = 0
                ROLLBACK TRANSACTION
            END
        END
    END
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_CheckSchemaVersion]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_CheckSchemaVersion]
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    IF (EXISTS( SELECT  *
                FROM    dbo.aspnet_SchemaVersions
                WHERE   Feature = LOWER( @Feature ) AND
                        CompatibleSchemaVersion = @CompatibleSchemaVersion ))
        RETURN 0

    RETURN 1
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer]
    @ApplicationName       nvarchar(256),
    @UserName              nvarchar(256),
    @NewPasswordQuestion   nvarchar(256),
    @NewPasswordAnswer     nvarchar(128)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Membership m, dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId
    IF (@UserId IS NULL)
    BEGIN
        RETURN(1)
    END

    UPDATE dbo.aspnet_Membership
    SET    PasswordQuestion = @NewPasswordQuestion, PasswordAnswer = @NewPasswordAnswer
    WHERE  UserId=@UserId
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_CreateUser]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_CreateUser]
    @ApplicationName                        nvarchar(256),
    @UserName                               nvarchar(256),
    @Password                               nvarchar(128),
    @PasswordSalt                           nvarchar(128),
    @Email                                  nvarchar(256),
    @PasswordQuestion                       nvarchar(256),
    @PasswordAnswer                         nvarchar(128),
    @IsApproved                             bit,
    @CurrentTimeUtc                         datetime,
    @CreateDate                             datetime = NULL,
    @UniqueEmail                            int      = 0,
    @PasswordFormat                         int      = 0,
    @UserId                                 uniqueidentifier OUTPUT
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @NewUserId uniqueidentifier
    SELECT @NewUserId = NULL

    DECLARE @IsLockedOut bit
    SET @IsLockedOut = 0

    DECLARE @LastLockoutDate  datetime
    SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAttemptCount int
    SET @FailedPasswordAttemptCount = 0

    DECLARE @FailedPasswordAttemptWindowStart  datetime
    SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAnswerAttemptCount int
    SET @FailedPasswordAnswerAttemptCount = 0

    DECLARE @FailedPasswordAnswerAttemptWindowStart  datetime
    SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @NewUserCreated bit
    DECLARE @ReturnValue   int
    SET @ReturnValue = 0

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    SET @CreateDate = @CurrentTimeUtc

    SELECT  @NewUserId = UserId FROM dbo.aspnet_Users WHERE LOWER(@UserName) = LoweredUserName AND @ApplicationId = ApplicationId
    IF ( @NewUserId IS NULL )
    BEGIN
        SET @NewUserId = @UserId
        EXEC @ReturnValue = dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CreateDate, @NewUserId OUTPUT
        SET @NewUserCreated = 1
    END
    ELSE
    BEGIN
        SET @NewUserCreated = 0
        IF( @NewUserId <> @UserId AND @UserId IS NOT NULL )
        BEGIN
            SET @ErrorCode = 6
            GOTO Cleanup
        END
    END

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @ReturnValue = -1 )
    BEGIN
        SET @ErrorCode = 10
        GOTO Cleanup
    END

    IF ( EXISTS ( SELECT UserId
                  FROM   dbo.aspnet_Membership
                  WHERE  @NewUserId = UserId ) )
    BEGIN
        SET @ErrorCode = 6
        GOTO Cleanup
    END

    SET @UserId = @NewUserId

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership m WITH ( UPDLOCK, HOLDLOCK )
                    WHERE ApplicationId = @ApplicationId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            SET @ErrorCode = 7
            GOTO Cleanup
        END
    END

    IF (@NewUserCreated = 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate = @CreateDate
        WHERE  @UserId = UserId
        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    INSERT INTO dbo.aspnet_Membership
                ( ApplicationId,
                  UserId,
                  Password,
                  PasswordSalt,
                  Email,
                  LoweredEmail,
                  PasswordQuestion,
                  PasswordAnswer,
                  PasswordFormat,
                  IsApproved,
                  IsLockedOut,
                  CreateDate,
                  LastLoginDate,
                  LastPasswordChangedDate,
                  LastLockoutDate,
                  FailedPasswordAttemptCount,
                  FailedPasswordAttemptWindowStart,
                  FailedPasswordAnswerAttemptCount,
                  FailedPasswordAnswerAttemptWindowStart )
         VALUES ( @ApplicationId,
                  @UserId,
                  @Password,
                  @PasswordSalt,
                  @Email,
                  LOWER(@Email),
                  @PasswordQuestion,
                  @PasswordAnswer,
                  @PasswordFormat,
                  @IsApproved,
                  @IsLockedOut,
                  @CreateDate,
                  @CreateDate,
                  @CreateDate,
                  @LastLockoutDate,
                  @FailedPasswordAttemptCount,
                  @FailedPasswordAttemptWindowStart,
                  @FailedPasswordAnswerAttemptCount,
                  @FailedPasswordAnswerAttemptWindowStart )

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_FindUsersByEmail]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_FindUsersByEmail]
    @ApplicationName       nvarchar(256),
    @EmailToMatch          nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    IF( @EmailToMatch IS NULL )
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.Email IS NULL
            ORDER BY m.LoweredEmail
    ELSE
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.LoweredEmail LIKE LOWER(@EmailToMatch)
            ORDER BY m.LoweredEmail

    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY m.LoweredEmail

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_FindUsersByName]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_FindUsersByName]
    @ApplicationName       nvarchar(256),
    @UserNameToMatch       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT u.UserId
        FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND u.LoweredUserName LIKE LOWER(@UserNameToMatch)
        ORDER BY u.UserName


    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetAllUsers]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetAllUsers]
    @ApplicationName       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0


    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
    SELECT u.UserId
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u
    WHERE  u.ApplicationId = @ApplicationId AND u.UserId = m.UserId
    ORDER BY u.UserName

    SELECT @TotalRecords = @@ROWCOUNT

    SELECT u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName
    RETURN @TotalRecords
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetNumberOfUsersOnline]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetNumberOfUsersOnline]
    @ApplicationName            nvarchar(256),
    @MinutesSinceLastInActive   int,
    @CurrentTimeUtc             datetime
AS
BEGIN
    DECLARE @DateActive datetime
    SELECT  @DateActive = DATEADD(minute,  -(@MinutesSinceLastInActive), @CurrentTimeUtc)

    DECLARE @NumOnline int
    SELECT  @NumOnline = COUNT(*)
    FROM    dbo.aspnet_Users u(NOLOCK),
            dbo.aspnet_Applications a(NOLOCK),
            dbo.aspnet_Membership m(NOLOCK)
    WHERE   u.ApplicationId = a.ApplicationId                  AND
            LastActivityDate > @DateActive                     AND
            a.LoweredApplicationName = LOWER(@ApplicationName) AND
            u.UserId = m.UserId
    RETURN(@NumOnline)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetPassword]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetPassword]
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @PasswordAnswer                 nvarchar(128) = NULL
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @PasswordFormat                         int
    DECLARE @Password                               nvarchar(128)
    DECLARE @passAns                                nvarchar(128)
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @Password = m.Password,
            @passAns = m.PasswordAnswer,
            @PasswordFormat = m.PasswordFormat,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    IF ( NOT( @PasswordAnswer IS NULL ) )
    BEGIN
        IF( ( @passAns IS NULL ) OR ( LOWER( @passAns ) <> LOWER( @PasswordAnswer ) ) )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
        ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    IF( @ErrorCode = 0 )
        SELECT @Password, @PasswordFormat

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetPasswordWithFormat]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetPasswordWithFormat]
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @UpdateLastLoginActivityDate    bit,
    @CurrentTimeUtc                 datetime
AS
BEGIN
    DECLARE @IsLockedOut                        bit
    DECLARE @UserId                             uniqueidentifier
    DECLARE @Password                           nvarchar(128)
    DECLARE @PasswordSalt                       nvarchar(128)
    DECLARE @PasswordFormat                     int
    DECLARE @FailedPasswordAttemptCount         int
    DECLARE @FailedPasswordAnswerAttemptCount   int
    DECLARE @IsApproved                         bit
    DECLARE @LastActivityDate                   datetime
    DECLARE @LastLoginDate                      datetime

    SELECT  @UserId          = NULL

    SELECT  @UserId = u.UserId, @IsLockedOut = m.IsLockedOut, @Password=Password, @PasswordFormat=PasswordFormat,
            @PasswordSalt=PasswordSalt, @FailedPasswordAttemptCount=FailedPasswordAttemptCount,
		    @FailedPasswordAnswerAttemptCount=FailedPasswordAnswerAttemptCount, @IsApproved=IsApproved,
            @LastActivityDate = LastActivityDate, @LastLoginDate = LastLoginDate
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF (@UserId IS NULL)
        RETURN 1

    IF (@IsLockedOut = 1)
        RETURN 99

    SELECT   @Password, @PasswordFormat, @PasswordSalt, @FailedPasswordAttemptCount,
             @FailedPasswordAnswerAttemptCount, @IsApproved, @LastLoginDate, @LastActivityDate

    IF (@UpdateLastLoginActivityDate = 1 AND @IsApproved = 1)
    BEGIN
        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @CurrentTimeUtc
        WHERE   UserId = @UserId

        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @CurrentTimeUtc
        WHERE   @UserId = UserId
    END


    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetUserByEmail]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetUserByEmail]
    @ApplicationName  nvarchar(256),
    @Email            nvarchar(256)
AS
BEGIN
    IF( @Email IS NULL )
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                m.LoweredEmail IS NULL
    ELSE
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                LOWER(@Email) = m.LoweredEmail

    IF (@@rowcount = 0)
        RETURN(1)
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetUserByName]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetUserByName]
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier

    IF (@UpdateLastActivity = 1)
    BEGIN
        -- select user ID from aspnet_users table
        SELECT TOP 1 @UserId = u.UserId
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1

        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        WHERE    @UserId = UserId

        SELECT m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut, m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE  @UserId = u.UserId AND u.UserId = m.UserId 
    END
    ELSE
    BEGIN
        SELECT TOP 1 m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut,m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1
    END

    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_GetUserByUserId]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_GetUserByUserId]
    @UserId               uniqueidentifier,
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    IF ( @UpdateLastActivity = 1 )
    BEGIN
        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        FROM     dbo.aspnet_Users
        WHERE    @UserId = UserId

        IF ( @@ROWCOUNT = 0 ) -- User ID not found
            RETURN -1
    END

    SELECT  m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate, m.LastLoginDate, u.LastActivityDate,
            m.LastPasswordChangedDate, u.UserName, m.IsLockedOut,
            m.LastLockoutDate
    FROM    dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   @UserId = u.UserId AND u.UserId = m.UserId

    IF ( @@ROWCOUNT = 0 ) -- User ID not found
       RETURN -1

    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_ResetPassword]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_ResetPassword]
    @ApplicationName             nvarchar(256),
    @UserName                    nvarchar(256),
    @NewPassword                 nvarchar(128),
    @MaxInvalidPasswordAttempts  int,
    @PasswordAttemptWindow       int,
    @PasswordSalt                nvarchar(128),
    @CurrentTimeUtc              datetime,
    @PasswordFormat              int = 0,
    @PasswordAnswer              nvarchar(128) = NULL
AS
BEGIN
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @UserId                                 uniqueidentifier
    SET     @UserId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    SELECT @IsLockedOut = IsLockedOut,
           @LastLockoutDate = LastLockoutDate,
           @FailedPasswordAttemptCount = FailedPasswordAttemptCount,
           @FailedPasswordAttemptWindowStart = FailedPasswordAttemptWindowStart,
           @FailedPasswordAnswerAttemptCount = FailedPasswordAnswerAttemptCount,
           @FailedPasswordAnswerAttemptWindowStart = FailedPasswordAnswerAttemptWindowStart
    FROM dbo.aspnet_Membership WITH ( UPDLOCK )
    WHERE @UserId = UserId

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Membership
    SET    Password = @NewPassword,
           LastPasswordChangedDate = @CurrentTimeUtc,
           PasswordFormat = @PasswordFormat,
           PasswordSalt = @PasswordSalt
    WHERE  @UserId = UserId AND
           ( ( @PasswordAnswer IS NULL ) OR ( LOWER( PasswordAnswer ) = LOWER( @PasswordAnswer ) ) )

    IF ( @@ROWCOUNT = 0 )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
    ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

    IF( NOT ( @PasswordAnswer IS NULL ) )
    BEGIN
        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_SetPassword]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_SetPassword]
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @NewPassword      nvarchar(128),
    @PasswordSalt     nvarchar(128),
    @CurrentTimeUtc   datetime,
    @PasswordFormat   int = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    UPDATE dbo.aspnet_Membership
    SET Password = @NewPassword, PasswordFormat = @PasswordFormat, PasswordSalt = @PasswordSalt,
        LastPasswordChangedDate = @CurrentTimeUtc
    WHERE @UserId = UserId
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_UnlockUser]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_UnlockUser]
    @ApplicationName                         nvarchar(256),
    @UserName                                nvarchar(256)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
        RETURN 1

    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = 0,
        FailedPasswordAttemptCount = 0,
        FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        FailedPasswordAnswerAttemptCount = 0,
        FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        LastLockoutDate = CONVERT( datetime, '17540101', 112 )
    WHERE @UserId = UserId

    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_UpdateUser]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_UpdateUser]
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @Email                nvarchar(256),
    @Comment              ntext,
    @IsApproved           bit,
    @LastLoginDate        datetime,
    @LastActivityDate     datetime,
    @UniqueEmail          int,
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId, @ApplicationId = a.ApplicationId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership WITH (UPDLOCK, HOLDLOCK)
                    WHERE ApplicationId = @ApplicationId  AND @UserId <> UserId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            RETURN(7)
        END
    END

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    UPDATE dbo.aspnet_Users WITH (ROWLOCK)
    SET
         LastActivityDate = @LastActivityDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    UPDATE dbo.aspnet_Membership WITH (ROWLOCK)
    SET
         Email            = @Email,
         LoweredEmail     = LOWER(@Email),
         Comment          = @Comment,
         IsApproved       = @IsApproved,
         LastLoginDate    = @LastLoginDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN -1
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Membership_UpdateUserInfo]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Membership_UpdateUserInfo]
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @IsPasswordCorrect              bit,
    @UpdateLastLoginActivityDate    bit,
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @LastLoginDate                  datetime,
    @LastActivityDate               datetime
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @IsApproved                             bit
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @IsApproved = m.IsApproved,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        GOTO Cleanup
    END

    IF( @IsPasswordCorrect = 0 )
    BEGIN
        IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAttemptWindowStart ) )
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = 1
        END
        ELSE
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = @FailedPasswordAttemptCount + 1
        END

        BEGIN
            IF( @FailedPasswordAttemptCount >= @MaxInvalidPasswordAttempts )
            BEGIN
                SET @IsLockedOut = 1
                SET @LastLockoutDate = @CurrentTimeUtc
            END
        END
    END
    ELSE
    BEGIN
        IF( @FailedPasswordAttemptCount > 0 OR @FailedPasswordAnswerAttemptCount > 0 )
        BEGIN
            SET @FailedPasswordAttemptCount = 0
            SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @FailedPasswordAnswerAttemptCount = 0
            SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )
        END
    END

    IF( @UpdateLastLoginActivityDate = 1 )
    BEGIN
        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @LastActivityDate
        WHERE   @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END

        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @LastLoginDate
        WHERE   UserId = @UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END


    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
        FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
        FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
        FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
        FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
    WHERE @UserId = UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Paths_CreatePath]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Paths_CreatePath]
    @ApplicationId UNIQUEIDENTIFIER,
    @Path           NVARCHAR(256),
    @PathId         UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    BEGIN TRANSACTION
    IF (NOT EXISTS(SELECT * FROM dbo.aspnet_Paths WHERE LoweredPath = LOWER(@Path) AND ApplicationId = @ApplicationId))
    BEGIN
        INSERT dbo.aspnet_Paths (ApplicationId, Path, LoweredPath) VALUES (@ApplicationId, @Path, LOWER(@Path))
    END
    COMMIT TRANSACTION
    SELECT @PathId = PathId FROM dbo.aspnet_Paths WHERE LOWER(@Path) = LoweredPath AND ApplicationId = @ApplicationId
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Personalization_GetApplicationId]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Personalization_GetApplicationId] (
    @ApplicationName NVARCHAR(256),
    @ApplicationId UNIQUEIDENTIFIER OUT)
AS
BEGIN
    SELECT @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_DeleteAllState]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_DeleteAllState] (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Count int OUT)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        IF (@AllUsersScope = 1)
            DELETE FROM aspnet_PersonalizationAllUsers
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)
        ELSE
            DELETE FROM aspnet_PersonalizationPerUser
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)

        SELECT @Count = @@ROWCOUNT
    END
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_FindState]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_FindState] (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @PageIndex              INT,
    @PageSize               INT,
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound INT
    DECLARE @PageUpperBound INT
    DECLARE @TotalRecords   INT
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table to store the selected results
    CREATE TABLE #PageIndex (
        IndexId int IDENTITY (0, 1) NOT NULL,
        ItemId UNIQUEIDENTIFIER
    )

    IF (@AllUsersScope = 1)
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT Paths.PathId
        FROM dbo.aspnet_Paths Paths,
             ((SELECT Paths.PathId
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND AllUsers.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT DISTINCT Paths.PathId
               FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND PerUser.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path,
               SharedDataPerPath.LastUpdatedDate,
               SharedDataPerPath.SharedDataLength,
               UserDataPerPath.UserDataLength,
               UserDataPerPath.UserCount
        FROM dbo.aspnet_Paths Paths,
             ((SELECT PageIndex.ItemId AS PathId,
                      AllUsers.LastUpdatedDate AS LastUpdatedDate,
                      DATALENGTH(AllUsers.PageSettings) AS SharedDataLength
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, #PageIndex PageIndex
               WHERE AllUsers.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT PageIndex.ItemId AS PathId,
                      SUM(DATALENGTH(PerUser.PageSettings)) AS UserDataLength,
                      COUNT(*) AS UserCount
               FROM aspnet_PersonalizationPerUser PerUser, #PageIndex PageIndex
               WHERE PerUser.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
               GROUP BY PageIndex.ItemId
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC
    END
    ELSE
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT PerUser.Id
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
        WHERE Paths.ApplicationId = @ApplicationId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
              AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
        ORDER BY Paths.Path ASC, Users.UserName ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path, PerUser.LastUpdatedDate, DATALENGTH(PerUser.PageSettings), Users.UserName, Users.LastActivityDate
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths, #PageIndex PageIndex
        WHERE PerUser.Id = PageIndex.ItemId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
        ORDER BY Paths.Path ASC, Users.UserName ASC
    END

    RETURN @TotalRecords
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_GetCountOfState]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_GetCountOfState] (
    @Count int OUT,
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN

    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
        IF (@AllUsersScope = 1)
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND AllUsers.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
        ELSE
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND PerUser.UserId = Users.UserId
                  AND PerUser.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
                  AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
                  AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_ResetSharedState]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_ResetSharedState] (
    @Count int OUT,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationAllUsers
        WHERE PathId IN
            (SELECT AllUsers.PathId
             FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
             WHERE Paths.ApplicationId = @ApplicationId
                   AND AllUsers.PathId = Paths.PathId
                   AND Paths.LoweredPath = LOWER(@Path))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAdministration_ResetUserState]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAdministration_ResetUserState] (
    @Count                  int                 OUT,
    @ApplicationName        NVARCHAR(256),
    @InactiveSinceDate      DATETIME            = NULL,
    @UserName               NVARCHAR(256)       = NULL,
    @Path                   NVARCHAR(256)       = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser
        WHERE Id IN (SELECT PerUser.Id
                     FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
                     WHERE Paths.ApplicationId = @ApplicationId
                           AND PerUser.UserId = Users.UserId
                           AND PerUser.PathId = Paths.PathId
                           AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
                           AND (@UserName IS NULL OR Users.LoweredUserName = LOWER(@UserName))
                           AND (@Path IS NULL OR Paths.LoweredPath = LOWER(@Path)))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationAllUsers p WHERE p.PathId = @PathId
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    DELETE FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId
    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationAllUsers SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationAllUsers(PathId, PageSettings, LastUpdatedDate) VALUES (@PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationPerUser_GetPageSettings]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationPerUser_GetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationPerUser p WHERE p.PathId = @PathId AND p.UserId = @UserId
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE PathId = @PathId AND UserId = @UserId
    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_PersonalizationPerUser_SetPageSettings]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_PersonalizationPerUser_SetPageSettings] (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CurrentTimeUtc, @UserId OUTPUT
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationPerUser WHERE UserId = @UserId AND PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationPerUser SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE UserId = @UserId AND PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationPerUser(UserId, PathId, PageSettings, LastUpdatedDate) VALUES (@UserId, @PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_DeleteInactiveProfiles]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Profile_DeleteInactiveProfiles]
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT  0
        RETURN
    END

    DELETE
    FROM    dbo.aspnet_Profile
    WHERE   UserId IN
            (   SELECT  UserId
                FROM    dbo.aspnet_Users u
                WHERE   ApplicationId = @ApplicationId
                        AND (LastActivityDate <= @InactiveSinceDate)
                        AND (
                                (@ProfileAuthOptions = 2)
                             OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                             OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                            )
            )

    SELECT  @@ROWCOUNT
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_DeleteProfiles]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Profile_DeleteProfiles]
    @ApplicationName        nvarchar(256),
    @UserNames              nvarchar(4000)
AS
BEGIN
    DECLARE @UserName     nvarchar(256)
    DECLARE @CurrentPos   int
    DECLARE @NextPos      int
    DECLARE @NumDeleted   int
    DECLARE @DeletedUser  int
    DECLARE @TranStarted  bit
    DECLARE @ErrorCode    int

    SET @ErrorCode = 0
    SET @CurrentPos = 1
    SET @NumDeleted = 0
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    WHILE (@CurrentPos <= LEN(@UserNames))
    BEGIN
        SELECT @NextPos = CHARINDEX(N',', @UserNames,  @CurrentPos)
        IF (@NextPos = 0 OR @NextPos IS NULL)
            SELECT @NextPos = LEN(@UserNames) + 1

        SELECT @UserName = SUBSTRING(@UserNames, @CurrentPos, @NextPos - @CurrentPos)
        SELECT @CurrentPos = @NextPos+1

        IF (LEN(@UserName) > 0)
        BEGIN
            SELECT @DeletedUser = 0
            EXEC dbo.aspnet_Users_DeleteUser @ApplicationName, @UserName, 4, @DeletedUser OUTPUT
            IF( @@ERROR <> 0 )
            BEGIN
                SET @ErrorCode = -1
                GOTO Cleanup
            END
            IF (@DeletedUser <> 0)
                SELECT @NumDeleted = @NumDeleted + 1
        END
    END
    SELECT @NumDeleted
    IF (@TranStarted = 1)
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END
    SET @TranStarted = 0

    RETURN 0

Cleanup:
    IF (@TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END
    RETURN @ErrorCode
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT 0
        RETURN
    END

    SELECT  COUNT(*)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
    WHERE   ApplicationId = @ApplicationId
        AND u.UserId = p.UserId
        AND (LastActivityDate <= @InactiveSinceDate)
        AND (
                (@ProfileAuthOptions = 2)
                OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
            )
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_GetProfiles]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Profile_GetProfiles]
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @PageIndex              int,
    @PageSize               int,
    @UserNameToMatch        nvarchar(256) = NULL,
    @InactiveSinceDate      datetime      = NULL
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT  u.UserId
        FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
        WHERE   ApplicationId = @ApplicationId
            AND u.UserId = p.UserId
            AND (@InactiveSinceDate IS NULL OR LastActivityDate <= @InactiveSinceDate)
            AND (     (@ProfileAuthOptions = 2)
                   OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                   OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                 )
            AND (@UserNameToMatch IS NULL OR LoweredUserName LIKE LOWER(@UserNameToMatch))
        ORDER BY UserName

    SELECT  u.UserName, u.IsAnonymous, u.LastActivityDate, p.LastUpdatedDate,
            DATALENGTH(p.PropertyNames) + DATALENGTH(p.PropertyValuesString) + DATALENGTH(p.PropertyValuesBinary)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p, #PageIndexForUsers i
    WHERE   u.UserId = p.UserId AND p.UserId = i.UserId AND i.IndexId >= @PageLowerBound AND i.IndexId <= @PageUpperBound

    SELECT COUNT(*)
    FROM   #PageIndexForUsers

    DROP TABLE #PageIndexForUsers
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_GetProperties]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Profile_GetProperties]
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)

    IF (@UserId IS NULL)
        RETURN
    SELECT TOP 1 PropertyNames, PropertyValuesString, PropertyValuesBinary
    FROM         dbo.aspnet_Profile
    WHERE        UserId = @UserId

    IF (@@ROWCOUNT > 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    END
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Profile_SetProperties]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Profile_SetProperties]
    @ApplicationName        nvarchar(256),
    @PropertyNames          ntext,
    @PropertyValuesString   ntext,
    @PropertyValuesBinary   image,
    @UserName               nvarchar(256),
    @IsUserAnonymous        bit,
    @CurrentTimeUtc         datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
       BEGIN TRANSACTION
       SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DECLARE @UserId uniqueidentifier
    DECLARE @LastActivityDate datetime
    SELECT  @UserId = NULL
    SELECT  @LastActivityDate = @CurrentTimeUtc

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, @IsUserAnonymous, @LastActivityDate, @UserId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Users
    SET    LastActivityDate=@CurrentTimeUtc
    WHERE  UserId = @UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS( SELECT *
               FROM   dbo.aspnet_Profile
               WHERE  UserId = @UserId))
        UPDATE dbo.aspnet_Profile
        SET    PropertyNames=@PropertyNames, PropertyValuesString = @PropertyValuesString,
               PropertyValuesBinary = @PropertyValuesBinary, LastUpdatedDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    ELSE
        INSERT INTO dbo.aspnet_Profile(UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, LastUpdatedDate)
             VALUES (@UserId, @PropertyNames, @PropertyValuesString, @PropertyValuesBinary, @CurrentTimeUtc)

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_RegisterSchemaVersion]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_RegisterSchemaVersion]
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128),
    @IsCurrentVersion          bit,
    @RemoveIncompatibleSchema  bit
AS
BEGIN
    IF( @RemoveIncompatibleSchema = 1 )
    BEGIN
        DELETE FROM dbo.aspnet_SchemaVersions WHERE Feature = LOWER( @Feature )
    END
    ELSE
    BEGIN
        IF( @IsCurrentVersion = 1 )
        BEGIN
            UPDATE dbo.aspnet_SchemaVersions
            SET IsCurrentVersion = 0
            WHERE Feature = LOWER( @Feature )
        END
    END

    INSERT  dbo.aspnet_SchemaVersions( Feature, CompatibleSchemaVersion, IsCurrentVersion )
    VALUES( LOWER( @Feature ), @CompatibleSchemaVersion, @IsCurrentVersion )
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Roles_CreateRole]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Roles_CreateRole]
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS(SELECT RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId))
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    INSERT INTO dbo.aspnet_Roles
                (ApplicationId, RoleName, LoweredRoleName)
         VALUES (@ApplicationId, @RoleName, LOWER(@RoleName))

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Roles_DeleteRole]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Roles_DeleteRole]
    @ApplicationName            nvarchar(256),
    @RoleName                   nvarchar(256),
    @DeleteOnlyIfRoleIsEmpty    bit
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    DECLARE @RoleId   uniqueidentifier
    SELECT  @RoleId = NULL
    SELECT  @RoleId = RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
    BEGIN
        SELECT @ErrorCode = 1
        GOTO Cleanup
    END
    IF (@DeleteOnlyIfRoleIsEmpty <> 0)
    BEGIN
        IF (EXISTS (SELECT RoleId FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId))
        BEGIN
            SELECT @ErrorCode = 2
            GOTO Cleanup
        END
    END


    DELETE FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DELETE FROM dbo.aspnet_Roles WHERE @RoleId = RoleId  AND ApplicationId = @ApplicationId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Roles_GetAllRoles]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Roles_GetAllRoles] (
    @ApplicationName           nvarchar(256))
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN
    SELECT RoleName
    FROM   dbo.aspnet_Roles WHERE ApplicationId = @ApplicationId
    ORDER BY RoleName
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Roles_RoleExists]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Roles_RoleExists]
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(0)
    IF (EXISTS (SELECT RoleName FROM dbo.aspnet_Roles WHERE LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId ))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Setup_RemoveAllRoleMembers]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Setup_RemoveAllRoleMembers]
    @name   sysname
AS
BEGIN
    CREATE TABLE #aspnet_RoleMembers
    (
        Group_name      sysname,
        Group_id        smallint,
        Users_in_group  sysname,
        User_id         smallint
    )

    INSERT INTO #aspnet_RoleMembers
    EXEC sp_helpuser @name

    DECLARE @user_id smallint
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT User_id FROM #aspnet_RoleMembers

    OPEN c1

    FETCH c1 INTO @user_id
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = 'EXEC sp_droprolemember ' + '''' + @name + ''', ''' + USER_NAME(@user_id) + ''''
        EXEC (@cmd)
        FETCH c1 INTO @user_id
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Setup_RestorePermissions]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Setup_RestorePermissions]
    @name   sysname
AS
BEGIN
    DECLARE @object sysname
    DECLARE @protectType char(10)
    DECLARE @action varchar(60)
    DECLARE @grantee sysname
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT Object, ProtectType, [Action], Grantee FROM #aspnet_Permissions where Object = @name

    OPEN c1

    FETCH c1 INTO @object, @protectType, @action, @grantee
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = @protectType + ' ' + @action + ' on ' + @object + ' TO [' + @grantee + ']'
        EXEC (@cmd)
        FETCH c1 INTO @object, @protectType, @action, @grantee
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UnRegisterSchemaVersion]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_UnRegisterSchemaVersion]
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    DELETE FROM dbo.aspnet_SchemaVersions
        WHERE   Feature = LOWER(@Feature) AND @CompatibleSchemaVersion = CompatibleSchemaVersion
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Users_CreateUser]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Users_CreateUser]
    @ApplicationId    uniqueidentifier,
    @UserName         nvarchar(256),
    @IsUserAnonymous  bit,
    @LastActivityDate DATETIME,
    @UserId           uniqueidentifier OUTPUT
AS
BEGIN
    IF( @UserId IS NULL )
        SELECT @UserId = NEWID()
    ELSE
    BEGIN
        IF( EXISTS( SELECT UserId FROM dbo.aspnet_Users
                    WHERE @UserId = UserId ) )
            RETURN -1
    END

    INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
    VALUES (@ApplicationId, @UserId, @UserName, LOWER(@UserName), @IsUserAnonymous, @LastActivityDate)

    RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_Users_DeleteUser]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_Users_DeleteUser]
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @TablesToDeleteFrom int,
    @NumTablesDeletedFrom int OUTPUT
AS
BEGIN
    DECLARE @UserId               uniqueidentifier
    SELECT  @UserId               = NULL
    SELECT  @NumTablesDeletedFrom = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    DECLARE @ErrorCode   int
    DECLARE @RowCount    int

    SET @ErrorCode = 0
    SET @RowCount  = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   u.LoweredUserName       = LOWER(@UserName)
        AND u.ApplicationId         = a.ApplicationId
        AND LOWER(@ApplicationName) = a.LoweredApplicationName

    IF (@UserId IS NULL)
    BEGIN
        GOTO Cleanup
    END

    -- Delete from Membership table if (@TablesToDeleteFrom & 1) is set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        DELETE FROM dbo.aspnet_Membership WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
               @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_UsersInRoles table if (@TablesToDeleteFrom & 2) is set
    IF ((@TablesToDeleteFrom & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_UsersInRoles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_UsersInRoles WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Profile table if (@TablesToDeleteFrom & 4) is set
    IF ((@TablesToDeleteFrom & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_Profile WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_PersonalizationPerUser table if (@TablesToDeleteFrom & 8) is set
    IF ((@TablesToDeleteFrom & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Users table if (@TablesToDeleteFrom & 1,2,4 & 8) are all set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (@TablesToDeleteFrom & 2) <> 0 AND
        (@TablesToDeleteFrom & 4) <> 0 AND
        (@TablesToDeleteFrom & 8) <> 0 AND
        (EXISTS (SELECT UserId FROM dbo.aspnet_Users WHERE @UserId = UserId)))
    BEGIN
        DELETE FROM dbo.aspnet_Users WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:
    SET @NumTablesDeletedFrom = 0

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
	    ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_AddUsersToRoles]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_AddUsersToRoles]
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000),
	@CurrentTimeUtc   datetime
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)
	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames	table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles	table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers	table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num		int
	DECLARE @Pos		int
	DECLARE @NextPos	int
	DECLARE @Name		nvarchar(256)

	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		SELECT TOP 1 Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END

	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1

	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		DELETE FROM @tbNames
		WHERE LOWER(Name) IN (SELECT LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE au.UserId = u.UserId)

		INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
		  SELECT @AppId, NEWID(), Name, LOWER(Name), 0, @CurrentTimeUtc
		  FROM   @tbNames

		INSERT INTO @tbUsers
		  SELECT  UserId
		  FROM	dbo.aspnet_Users au, @tbNames t
		  WHERE   LOWER(t.Name) = au.LoweredUserName AND au.ApplicationId = @AppId
	END

	IF (EXISTS (SELECT * FROM dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr WHERE tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId))
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr, aspnet_Users u, aspnet_Roles r
		WHERE		u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	INSERT INTO dbo.aspnet_UsersInRoles (UserId, RoleId)
	SELECT UserId, RoleId
	FROM @tbUsers, @tbRoles

	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)

GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_FindUsersInRole]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_FindUsersInRole]
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256),
    @UserNameToMatch  nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId AND LoweredUserName LIKE LOWER(@UserNameToMatch)
    ORDER BY u.UserName
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_GetRolesForUser]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_GetRolesForUser]
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(1)

    SELECT r.RoleName
    FROM   dbo.aspnet_Roles r, dbo.aspnet_UsersInRoles ur
    WHERE  r.RoleId = ur.RoleId AND r.ApplicationId = @ApplicationId AND ur.UserId = @UserId
    ORDER BY r.RoleName
    RETURN (0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_GetUsersInRoles]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_GetUsersInRoles]
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId
    ORDER BY u.UserName
    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_IsUserInRole]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_IsUserInRole]
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(2)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    DECLARE @RoleId uniqueidentifier
    SELECT  @RoleId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(2)

    SELECT  @RoleId = RoleId
    FROM    dbo.aspnet_Roles
    WHERE   LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
        RETURN(3)

    IF (EXISTS( SELECT * FROM dbo.aspnet_UsersInRoles WHERE  UserId = @UserId AND RoleId = @RoleId))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000)
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)


	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames  table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles  table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers  table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num	  int
	DECLARE @Pos	  int
	DECLARE @NextPos  int
	DECLARE @Name	  nvarchar(256)
	DECLARE @CountAll int
	DECLARE @CountU	  int
	DECLARE @CountR	  int


	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId
	SELECT @CountR = @@ROWCOUNT

	IF (@CountR <> @Num)
	BEGIN
		SELECT TOP 1 N'', Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END


	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1


	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	SELECT @CountU = @@ROWCOUNT
	IF (@CountU <> @Num)
	BEGIN
		SELECT TOP 1 Name, N''
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT au.LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE u.UserId = au.UserId)

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(1)
	END

	SELECT  @CountAll = COUNT(*)
	FROM	dbo.aspnet_UsersInRoles ur, @tbUsers u, @tbRoles r
	WHERE   ur.UserId = u.UserId AND ur.RoleId = r.RoleId

	IF (@CountAll <> @CountU * @CountR)
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 @tbUsers tu, @tbRoles tr, dbo.aspnet_Users u, dbo.aspnet_Roles r
		WHERE		 u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND
					 tu.UserId NOT IN (SELECT ur.UserId FROM dbo.aspnet_UsersInRoles ur WHERE ur.RoleId = tr.RoleId) AND
					 tr.RoleId NOT IN (SELECT ur.RoleId FROM dbo.aspnet_UsersInRoles ur WHERE ur.UserId = tu.UserId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	DELETE FROM dbo.aspnet_UsersInRoles
	WHERE UserId IN (SELECT UserId FROM @tbUsers)
	  AND RoleId IN (SELECT RoleId FROM @tbRoles)
	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END

GO
/****** Object:  StoredProcedure [dbo].[aspnet_WebEvent_LogEvent]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[aspnet_WebEvent_LogEvent]
        @EventId         char(32),
        @EventTimeUtc    datetime,
        @EventTime       datetime,
        @EventType       nvarchar(256),
        @EventSequence   decimal(19,0),
        @EventOccurrence decimal(19,0),
        @EventCode       int,
        @EventDetailCode int,
        @Message         nvarchar(1024),
        @ApplicationPath nvarchar(256),
        @ApplicationVirtualPath nvarchar(256),
        @MachineName    nvarchar(256),
        @RequestUrl      nvarchar(1024),
        @ExceptionType   nvarchar(256),
        @Details         ntext
AS
BEGIN
    INSERT
        dbo.aspnet_WebEvent_Events
        (
            EventId,
            EventTimeUtc,
            EventTime,
            EventType,
            EventSequence,
            EventOccurrence,
            EventCode,
            EventDetailCode,
            Message,
            ApplicationPath,
            ApplicationVirtualPath,
            MachineName,
            RequestUrl,
            ExceptionType,
            Details
        )
    VALUES
    (
        @EventId,
        @EventTimeUtc,
        @EventTime,
        @EventType,
        @EventSequence,
        @EventOccurrence,
        @EventCode,
        @EventDetailCode,
        @Message,
        @ApplicationPath,
        @ApplicationVirtualPath,
        @MachineName,
        @RequestUrl,
        @ExceptionType,
        @Details
    )
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Act]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Act] 
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL

AS
BEGIN	
-- [ztest_act] -- [enterprise_Act]
SELECT [ActID],[Name],[StartDay],[RegExpDay],[Capacity],[Price],[Price2],[Company],[Enable],[FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2] FROM [enterprise_Act]
WHERE (@Filter IS NULL OR 
        CASE WHEN @FilterBy='ActID' THEN [ActID]
             WHEN @FilterBy='Name' THEN [Name]
        END 
        Like @Filter + '%'
       )
ORDER BY [StartDay]
END

GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Act_Add]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		ERIC LI
-- Create date: 1/27/2017
-- Description:	新增企業活動行程
-- =============================================
CREATE PROCEDURE [dbo].[enterprise_all_Act_Add] 
@preID nvarchar(10),
@Name nvarchar(50),
@StartDay smalldatetime,
@RegExpDay smalldatetime,
@Capacity int,
@Price int,
@Price2 int,
@Company nvarchar(50),
@Enable bit,
@FieldStr1 nvarchar(50),
@FieldStr2 nvarchar(50),
@FieldInt1 int,
@FieldInt2 int,
@result nvarchar(150) OUTPUT
AS
BEGIN	
	SET NOCOUNT ON;
	Declare @TrueID nvarchar(12)
    Declare @num int

	-- 交易開始
    BEGIN TRAN

	-- 取出現存資料庫中的 ActID --
    SELECT TOP 1 @TrueID = [ActID] FROM [enterprise_Act] WITH (UPDLOCK, HOLDLOCK)
    WHERE [ActID] LIKE @preID +'%' ORDER BY [ActID] DESC

	 -- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @preID  + '001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  	SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
      END

	IF (EXISTS (SELECT * FROM  [enterprise_Act] WHERE  [ActID] = @TrueID ))
	  BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '編號重複，程序終止！';
		  Return
      END

	INSERT INTO [enterprise_Act]
	([ActID],[Name],[StartDay],[RegExpDay],[Capacity],[Price],[Price2],[Company],[Enable],[FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2])
    VALUES
	(@TrueID,@Name,@StartDay,@RegExpDay,@Capacity,@Price,@Price2,@Company,@Enable,@FieldStr1,@FieldStr2,@FieldInt1,@FieldInt2);
	
	IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '嘗試寫入資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
	  Return
	 END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK' + @TrueID
	Return    
END

GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Act_Capacity]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Act_Capacity] 
@actid NVARCHAR(12) = NULL
AS
BEGIN	
SELECT [Capacity] FROM [enterprise_Act] WHERE [ActID] = @actid;
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Act_Delete]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		ERIC LI
-- Create date: 1/27/2017
-- Description:	刪除企業活動行程
-- =============================================
CREATE PROCEDURE [dbo].[enterprise_all_Act_Delete] 
@ActID nvarchar(15),
@result nvarchar(150) OUTPUT
AS
BEGIN	
	SET NOCOUNT ON;

	-- 交易開始
    BEGIN TRAN
		
	DELETE FROM [enterprise_Act] WHERE [ActID]=@ActID;
	
	IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '嘗試刪除資料時發生錯誤！程序終止！' + ERROR_MESSAGE();
	  Return
	 END		 

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK' 
	Return    
END

GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Act_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Act_Get] 
@Company nvarchar(50),
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL

AS
BEGIN	

SELECT [ActID],[Name],[StartDay],[RegExpDay],[Capacity],[Price],[Price2],[Company],[Enable] FROM [enterprise_Act]
WHERE (@Filter IS NULL OR 
        CASE WHEN @FilterBy='ActID' THEN [ActID]
             WHEN @FilterBy='Name' THEN [Name]
        END 
        Like @Filter + '%'
       )

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Act_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		ERIC LI
-- Create date: 1/27/2017
-- Description:	企業活動行程分頁
-- =============================================
CREATE PROCEDURE [dbo].[enterprise_all_Act_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@Company nvarchar(50)
AS
BEGIN	
	--SET NOCOUNT ON;
	DECLARE @totalRow AS INT;

	;WITH CTE AS
    (
      SELECT 
        ROW_NUMBER() OVER ( ORDER BY [ActID] DESC) AS RowNum ,
        [ActID],[Name],[StartDay],[RegExpDay],[Capacity],[Price],[Price2],[Company],[Enable],[FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]  
      FROM [enterprise_Act] WHERE [Company] = @Company
      --WHERE 
      --(MasterJob.Title LIKE '%' + @EnteredKeyword + '%')
      --AND( MasterJob.Location LIKE '%' + @EnteredLocation + '%' )
    )
    SELECT 
      [ActID],[Name],[StartDay],[RegExpDay],[Capacity],[Price],[Price2],[Company],[Enable],[FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
    FROM CTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum

	-- 以下是另一組 DataSet 用來取得資料總數 --
	;WITH TMP AS
    (
      SELECT [ActID] FROM [enterprise_Act]  WHERE [Company] = @Company
      --WHERE 
      --(MasterJob.Title LIKE '%' + @EnteredKeyword + '%')
      --AND( MasterJob.Location LIKE '%' + @EnteredLocation + '%' )
    )
    SELECT @totalRow = COUNT(*) OVER()  
    FROM TMP;
    
	RETURN @totalRow;
     
     --IF(@OrderBy IS NULL)
     --  SET @OrderBy = 'FirstName';

	

	/*
	WHERE 
                  b.NextRunDate >=  DATEADD(d, -30, Cast(current_timestamp As Date)) 
                  AND b.BusinessVolumeTotal > 0 
                  --AND d.AutoOrderStatusDescription = 'Active'
                  AND b.CancelledDate IS NULL
                  AND (@Filter IS NULL OR 
                        CASE WHEN @FilterBy='FirstName' THEN a.FirstName
                              WHEN @FilterBy='LastName' THEN a.LastName
                             WHEN @FilterBy='ItemDescription' THEN c.ItemDescription
                             WHEN @FilterBy='OrderStatusDescription' THEN f.OrderStatusDescription  
                        END 
                        Like '%' + @Filter + '%'
                        )
                  GROUP BY b.AutoOrderID, temp.EnrollerID, a.FirstName, a.LastName, a.CustomerID, c.ItemDescription, b.BusinessVolumeTotal, b.NextRunDate, d.AutoOrderStatusDescription, f.OrderStatusDescription
                  ORDER BY
                        CASE WHEN @OrderBy='FirstName' THEN a.FirstName
                              WHEN @OrderBy='LastName' THEN a.LastName
                              WHEN @OrderBy='CustomerID' THEN STR(a.CustomerID)
                              WHEN @OrderBy='AutoOrderID' THEN STR(b.AutoOrderID)
                              WHEN @OrderBy='ItemDescription' THEN c.ItemDescription
                              WHEN @OrderBy='BusinessVolumeTotal' THEN STR(b.BusinessVolumeTotal)
                              WHEN @OrderBy='NextRunDate' THEN CONVERT(VARCHAR(50), b.NextRunDate)
                              WHEN @OrderBy='OrderStatusDescription' THEN f.OrderStatusDescription
                    END

	*/
	
END

GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Act_RemainingRoom]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Act_RemainingRoom] 
@actid nvarchar(12)
AS
BEGIN	

SELECT 
[FieldInt1],
[FieldInt2],
[ActID],
[Name],
[StartDay],
[RegExpDay],
[Capacity],
[Price],
[Price2],
[Company],
[Enable] 
FROM [enterprise_Act] 
WHERE [ActID] = @actid;

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Act_Update]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		ERIC LI
-- Create date: 1/27/2017
-- Description:	更新企業活動行程
-- =============================================
CREATE PROCEDURE [dbo].[enterprise_all_Act_Update] 
@ActID nvarchar(15),
@Name nvarchar(50),
@StartDay smalldatetime,
@RegExpDay smalldatetime,
@Capacity int,
@Price int,
@Price2 int,
@Company nvarchar(50),
@Enable bit,
@FieldStr1 nvarchar(50),
@FieldStr2 nvarchar(50),
@FieldInt1 int,
@FieldInt2 int,
@result nvarchar(150) OUTPUT
AS
BEGIN	
	SET NOCOUNT ON;
	
	
	/*
	SELECT @result = @ActID+ ', ' + @Name + ', ' +@Company
	+ ', ' + @StartDay+ ', ' + @RegExpDay+ ', ' 
	+ @Capacity+ ', ' + @Price+ ', ' + @Price2+ ', ' +@Company + ', ' +@Enable;
	Return
	*/
	

	-- 交易開始
    BEGIN TRAN
		
	UPDATE [enterprise_Act] SET
	[Name]=@Name,
	[StartDay]=@StartDay,
	[RegExpDay]=@RegExpDay,
	[Capacity]=@Capacity,
	[Price]=@Price,
	[Price2]=@Price2,
	[Enable]=@Enable,
	[FieldStr1]=@FieldStr1,
	[FieldStr2]=@FieldStr2,
	[FieldInt1]=@FieldInt1,
	[FieldInt2] = @FieldInt2   
	WHERE [ActID]=@ActID AND [Company]=@Company;	
	
	IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '嘗試更新資料時發生錯誤！程序終止！' + ERROR_MESSAGE();
	  Return
	 END	

	 IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [ActID] = @ActID AND [ActName] = @Name ))
	  BEGIN
		    UPDATE [enterprise_Odt] SET [ActName]=@Name
			WHERE [ActID] = @ActID AND [ActName] = @Name;	
			IF @@ERROR <> 0 
			 BEGIN
			  ROLLBACK TRAN	  
			  SELECT @result = '嘗試更新資料時發生錯誤！程序終止！' + ERROR_MESSAGE();
			  Return
			 END
	  END

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK' 
	Return    
END

GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Album_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		ERIC LI
-- Create date: 1/27/2017
-- Description:	企業相簿
-- =============================================

CREATE PROCEDURE [dbo].[enterprise_all_Album_Modify] 
@Id int,
@Title nvarchar(50),
@AlbumDate smalldatetime,
@Company nvarchar(50),
@TargetLink nvarchar(Max),
@ImgUrl nvarchar(Max),
@Action nvarchar(12),
@result nvarchar(150) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	
    -- 交易開始
    BEGIN TRAN
    
	IF @Action = 'Add' 
	 BEGIN
	    INSERT INTO [enterprise_Album]	([Title],[AlbumDate],[TargetLink],[ImgUrl],[Company]) 
		VALUES (@Title,@AlbumDate,@TargetLink,@ImgUrl,@Company);    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試寫入資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	 END
    
	 IF @Action = 'Update' 
	  BEGIN
	    UPDATE [enterprise_Album] SET 
		[Title] =@Title,[AlbumDate] =@AlbumDate,[TargetLink] =@TargetLink,[ImgUrl] =@ImgUrl
		 WHERE [ID] = @Id;    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [enterprise_Album] WHERE [ID] = @Id;    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return    

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Album_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Album_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@Company nvarchar(50)
AS
BEGIN
  DECLARE @totalRow AS INT;

	;WITH CTE AS
    (
      SELECT 
        ROW_NUMBER() OVER ( ORDER BY [AlbumDate] DESC) AS RowNum ,
        [ID],[Title],[AlbumDate],[TargetLink],[ImgUrl],[Company]  
      FROM [enterprise_Album]  
    )
    SELECT 
      [ID],[Title],[AlbumDate],[TargetLink],[ImgUrl],[Company] 
    FROM CTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum;
    
    -- 以下是另一組 DataSet 用來取得資料總數 --
	SELECT @totalRow = COUNT(*) FROM [enterprise_Album]  
    
	RETURN @totalRow;
    
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_News_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_News_Get] 
@Company nvarchar(50),
@PageSize int
AS
BEGIN	

	Declare @QueryString AS NVarchar(4000)
    SET @QueryString = 'SELECT TOP ' + Convert(varchar(20), @PageSize) +
	                   ' [NewsID],[Desc],[NewsDate],[Link],[Company],[Enable] FROM [enterprise_News] 
				 WHERE [Company] = ''' + @Company + ''' AND [Enable] = 1 
				 ORDER BY [NewsDate] DESC'                 

	EXECUTE sp_executesql @QueryString    

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_News_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_News_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@Company nvarchar(50),
@StDay smalldatetime,
@EndDay smalldatetime
AS
BEGIN
  DECLARE @totalRow AS INT;

	;WITH CTE AS
    (
      SELECT 
        ROW_NUMBER() OVER ( ORDER BY [NewsDate] DESC) AS RowNum ,
        [NewsID],[Desc],[NewsDate],[Link],[Company],[Enable]  
      FROM [enterprise_News]  	      
      WHERE 
      [NewsDate] BETWEEN @StDay AND @EndDay
    )
    SELECT 
      [NewsID],[Desc],[NewsDate],[Link],[Company],[Enable] 
    FROM CTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum
    
    -- 以下是另一組 DataSet 用來取得資料總數 --
	SELECT @totalRow = COUNT(*) FROM [enterprise_News] WHERE [NewsDate] BETWEEN @StDay AND @EndDay    
    
	RETURN @totalRow;
    
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_News_Update]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_News_Update] 
@Id int,
@Desc nvarchar(256),
@NewsDate SmallDateTime,
@Company nvarchar(50),
@Enable bit,
@Link nvarchar(Max),
@Action nvarchar(12),
@result nvarchar(150) OUTPUT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- 交易開始
    BEGIN TRAN
    
	IF @Action = 'Add' 
	 BEGIN
	    INSERT INTO [enterprise_News]
		([Desc],[NewsDate],[Link],[Enable],[Company])
		VALUES
		(@Desc,@NewsDate,@Link,@Enable,@Company);
    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試寫入資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	 END
    
	 IF @Action = 'Update' 
	  BEGIN
	    UPDATE [enterprise_News]
		SET [Desc]=@Desc,[NewsDate]=@NewsDate,[Link]=@Link,[Enable]=@Enable
		WHERE [NewsID] = @Id AND [Company]=@Company
    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [enterprise_News] WHERE [NewsID] = @Id AND [Company]=@Company;    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return    

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Od_Add]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Od_Add] 
	-- Add the parameters for the stored procedure here
    @ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
    @DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
    @result nvarchar(150) OUTPUT
AS
BEGIN
    Declare @preID nvarchar(10)	
	Declare @room nvarchar(2) 
    Declare @actid nvarchar(15) 
	Declare @actname nvarchar(50)
    Declare @name nvarchar(50)
    Declare @sid nvarchar(20)
    Declare @empid nvarchar(20)
    Declare @dob nvarchar(20)
    Declare @sax nvarchar(1)
    Declare @cell nvarchar(20)
    Declare @email nvarchar(256)    
    Declare @cmt nvarchar(255)  
	Declare @price int
	Declare @veg bit

    Declare @TrueID nvarchar(12)
    Declare @num int
	Declare @roomnum int
	Declare @count int

	
	SET @num =0;
	SET @roomnum =0;
	SET @count=0;
	SET @price=0;
    
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
    -- 交易開始
    BEGIN TRAN
   
    SELECT @preID = a.[OrderID], @room = a.[Tel2] FROM @ORDERLIST AS a
    
    -- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [enterprise_Od] WITH (UPDLOCK, HOLDLOCK)
    WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC

     -- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @preID  + '001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  	SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
      END
      
     
    IF(NOT @TrueID is NULL)
      BEGIN
		IF (EXISTS (SELECT * FROM  [enterprise_Od] WHERE  [OrderID] = @TrueID ))
		BEGIN
		  ROLLBACK TRAN		   	       
		    SELECT @result = '單號重覆，程序終止！';
		  Return
      END
	END

	SET @num =0;
	 -- 檢查是否有重複報名
	 Declare CUR CURSOR FOR
     SELECT d.[ActID], d.[SID], d.[EmpID] FROM @DETAILLIST AS d
     OPEN CUR 
	 Fetch Next From CUR INTO @actid, @sid, @empid
	 While @@FETCH_STATUS = 0
	  BEGIN
	   SET @empid = LTRIM(RTRIM(@empid));

	   IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
		 BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行報名！';
		  Return
         END

	   IF(LEN(@empid)>0)
	   BEGIN
	     -- 每人限補助一次旅遊
	     IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE [EmpID] = @empid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在該活動中報名，請重新輸入！';
			  Return
		 END
		 ELSE
		 BEGIN
		 --  IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],1) ='E'))
		 --  BEGIN
			--ROLLBACK TRAN		   	       
			--SELECT @result = '此一工號' + @empid + ' 已補助一次，請重新輸入！'
			--Return
		 --  END
		  IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid))
		   BEGIN
			ROLLBACK TRAN		   	       
			SELECT @result = '此一工號' + @empid + ' 已補助一次，請重新輸入！'
			Return
		   END
		 END		 
	   END		 

	   IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
	   BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一身分證號' + @sid + ' 已報名，請重新輸入！';
			  Return
	   END
		
		 SET @count = @count + 1;
		Fetch Next From CUR INTO @actid, @sid, @empid
	  END
     CLOSE CUR 
	 DEALLOCATE CUR   
	
	-- 檢查數量是否足夠
	SELECT @num = [Capacity] FROM [enterprise_Act] WHERE [ActID] = @actid
	
	IF @count > @num
	BEGIN
	  ROLLBACK TRAN		   	       
	  SELECT @result = '此一活動名額不足無法進行報名！';
	  Return
	END

	-- 計算剩餘數量
	SET @num = @num - @count;
	IF @num <= 0
	BEGIN
	  SET @num = 0;
	END

	SET @count =0;
    INSERT INTO [enterprise_Od]
	(
	  [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],
      [TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],
      [CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
	)
    SELECT 
     @TrueID, b.[Name], b.[Tel1], b.[Tel2], b.[Cell1], b.[cell2], b.[Fax],     
     b.[Address], b.[Email], b.[TotalPrice],0,0,0, b.[Comment], b.[Source], b.[Company], GETDATE()
    FROM @ORDERLIST AS b
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result ='寫入主表單時發生錯誤，程序終止！'
	  Return
	 END
	 
    Declare POINTER CURSOR FOR
    SELECT 
     t.[ActID], t.[ActName], t.[Name], t.[SID], t.[EmpID], t.[DOB], t.[Sex], t.[Cell], t.[Email], t.[Comment], t.[Price], t.[IsVeg]
    FROM @DETAILLIST AS t
    OPEN POINTER 
	-- 取出第一筆資料  
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

	While @@FETCH_STATUS = 0
    BEGIN    
    BEGIN TRY
		SET @count = @count + 1;
    	INSERT INTO [enterprise_Odt]
		(
	 	  [OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Price],[Comment],[IsVeg]
		  --[Location],[TempField],[IsVeg],[IsOld],[IsEarly],[IsDiscount],[Size]
		)
		VALUES
		(
	  	  @TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @price, @cmt, @veg
    	)
    END TRY
	BEGIN CATCH  
	  ROLLBACK TRAN 
	  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時發生錯誤：' + ERROR_MESSAGE();      
      Return
	END CATCH
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時(' + @name + ')發生錯誤！程序終止！' + ERROR_MESSAGE();
	  Return
	 END	
	
    -- 存入成功後再取下一筆資料
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

  END
  CLOSE POINTER 
  DEALLOCATE POINTER 
  
  -- 更新數量
  UPDATE [enterprise_Act] SET [Capacity] = @num WHERE [ActID] = @actid;     

  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Od_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Od_Modify] 
@ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN	

    Declare @ID nvarchar(15)
    Declare @name nvarchar(50)
	Declare @tel nvarchar(20)
	Declare @cel nvarchar(20)
	Declare @tel2 nvarchar(20)
	Declare @cel2 nvarchar(20)
	Declare @fax nvarchar(20)
	Declare @address nvarchar(50)
	Declare @price int
	Declare @cmt nvarchar(256)
	Declare @source nvarchar(20)
	Declare @company nvarchar(50)
	Declare @email nvarchar(256)
	
	Declare @count int	
	Declare @actid nvarchar(20)
		
	SET @count = 0;

	SELECT 
	   @ID=[OrderID],
	   @name=[Name],
	   @tel=[Tel1],
	   @tel2=[Tel2],
	   @cel=[Cell1],
	   @cel2=[cell2],
	   @fax=[Fax],
	   @address=[Address],
	   @email=[Email],
       @price=[TotalPrice],
	   @cmt=[Comment],
	   @source=[Source],
	   @company=[Company] 	
    FROM @ORDERLIST AS b

	--SELECT @result = @ID + ',' + @name + ', ' + @cel; 
	--Return
/**/
	-- 交易開始
    BEGIN TRAN
    
	 IF @Action = 'Update' 
	  BEGIN
	    UPDATE [enterprise_Od] SET 
		[Name]=@name,[Tel1]=@tel,[Tel2]=@tel2,[Cell1]=@cel,[cell2]=@cel2,
	    [Fax]=@fax,[Address]=@address,[Email]=@email,[TotalPrice]=@price,
	    [Comment]=@cmt,[Source]=@source,[Company]=@company	   
		WHERE [OrderID] = @ID; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	   SELECT TOP 1 @actid = [ActID] FROM [enterprise_Odt] WHERE [OrderID] = @ID;
	   SELECT @count = COUNT(*) FROM [enterprise_Odt] WHERE [OrderID] = @ID;
	   
	   DELETE FROM [enterprise_Odt] WHERE [OrderID] = @ID;
	   IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

	    DELETE FROM [enterprise_Od] WHERE [OrderID] = @ID;     
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除主表資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END	

	  -- 更新數量  
      UPDATE [enterprise_Act] SET [Capacity] = [Capacity] + @count  WHERE [ActID] = @actid;
	  IF @@ERROR <> 0 
		BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新活動人數限制時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		END

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Od_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Od_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@Company nvarchar(50),
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
  DECLARE @totalRow AS INT;

IF @FilterBy='Oid' 
BEGIN
  /*;WITH NTE AS (
  	SELECT [OrderID], ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
  	[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]   
  	FROM [enterprise_Od]  
	WHERE [Company] = @Company AND [OrderID] LIKE @Filter + '%'
  )
   SELECT [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address], [Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
   FROM NTE 
   WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber )
   ORDER BY [RowNum];*/

   ;WITH CTE AS (
		SELECT 
		ACT.[Name] AS [ActName],
		ACT.[StartDay],
		OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
		OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
		FROM 
		[enterprise_Od] AS OD 
		INNER JOIN 
		[enterprise_Odt] AS DT 
		ON 
		OD.OrderID = DT.OrderID 
		INNER JOIN
		[enterprise_Act] AS ACT
		ON
		DT.[ActID] = ACT.[ActID]
		WHERE 
	OD.OrderID LIKE @Filter + '%'
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PAGING AS (
		SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
		[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PAGING	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum]

	-- 另一組 DataSet 用來取得資料總數 --
	/*;WITH CTE AS (
		SELECT [OrderID] FROM [enterprise_Od] WHERE [Company] = @Company AND [OrderID] LIKE @Filter + '%'
	)
    SELECT @totalRow = COUNT(*) OVER() FROM CTE */

	SELECT @totalRow = COUNT([OrderID]) FROM [enterprise_Od] WHERE [OrderID] LIKE @Filter + '%'

	RETURN @totalRow;
END
ELSE IF @FilterBy='Day' 
BEGIN
  ---- 依照活動日期取出報名資料 ----
  ;WITH CTE AS (
	SELECT 
	ACT.[Name] AS [ActName],
	ACT.[StartDay],
	OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
	OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
	FROM 
	[enterprise_Act] AS ACT
	INNER JOIN
	[enterprise_Odt] AS DT 
	ON 
	ACT.[ActID] =DT.[ActID]
	INNER JOIN 
	[enterprise_Od] AS OD 
	ON
	DT.[OrderID] = OD.[OrderID]
	WHERE 
	ACT.[StartDay] = @Filter 	
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActName] DESC) AS [RowNum],
	[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	-- 依照活動日期取出報名資料總數 --
	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_Odt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_Od] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ACT.[StartDay] = @Filter 	
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;

END
ELSE IF @FilterBy='E2' 
BEGIN
  ---- 依照活動編號 E2 取出報名資料 ----
  ;WITH CTE AS (
	SELECT 
	ACT.[Name] AS [ActName],
	ACT.[StartDay],
	OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
	OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
	FROM 
	[enterprise_Act] AS ACT
	INNER JOIN
	[enterprise_Odt] AS DT 
	ON 
	ACT.[ActID] =DT.[ActID]
	INNER JOIN 
	[enterprise_Od] AS OD 
	ON
	DT.[OrderID] = OD.[OrderID]
	WHERE 
	ACT.[ActID] LIKE 'E2%'
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
	[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	-- 依照活動編號取出報名資料總數 --
	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_Odt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_Od] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ACT.[ActID] LIKE 'E2%'
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;

END
ELSE IF @FilterBy='E1' 
BEGIN  
	/*;WITH NTE AS (
  		SELECT
  		O.[OrderID], ROW_NUMBER() OVER ( ORDER BY O.[OrderID] DESC) AS [RowNum],
  		O.[Name],O.[Tel1],O.[Tel2],O.[Cell1],O.[cell2],O.[Fax],O.[Address],O.[Email],O.[TotalPrice],O.[Comment],O.[Source],O.[Company],O.[CreateDay],O.[IsPaid]   
  		FROM 
  		[enterprise_Od] AS O 
  		LEFT JOIN 
  		[enterprise_Odt] AS D
  		ON 
  		O.[OrderID] = D.[OrderID] 
		WHERE  O.[Company] = @Company AND D.[ActID] LIKE 'E1%'
	)
    SELECT DISTINCT [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address], [Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
    FROM NTE 
    WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber )   

	-- 另一組 DataSet 用來取得資料總數 --
	;WITH CTE AS (
		SELECT O.[OrderID] FROM [enterprise_Od] AS O LEFT JOIN [enterprise_Odt] AS D ON O.[OrderID] = D.[OrderID] WHERE  O.[Company] = @Company AND D.[ActID] LIKE 'E1%'
	)    
    SELECT @totalRow = COUNT(DISTINCT [OrderID]) FROM CTE*/

	---- 依照活動編號 E1 取出報名資料 ----
  ;WITH CTE AS (
	SELECT 
	ACT.[Name] AS [ActName],
	ACT.[StartDay],
	OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
	OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
	FROM 
	[enterprise_Act] AS ACT
	INNER JOIN
	[enterprise_Odt] AS DT 
	ON 
	ACT.[ActID] =DT.[ActID]
	INNER JOIN 
	[enterprise_Od] AS OD 
	ON
	DT.[OrderID] = OD.[OrderID]
	WHERE 
	ACT.[ActID] LIKE 'E1%'
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
	[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	-- 依照活動編號取出報名資料總數 --
	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_Odt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_Od] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ACT.[ActID] LIKE 'E1%'
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;
END
ELSE IF @FilterBy='Aid' 
BEGIN
	---- 依照活動編號取出報名資料 ----
  ;WITH CTE AS (
	SELECT 
	ACT.[Name] AS [ActName],
	ACT.[StartDay],
	OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
	OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
	FROM 
	[enterprise_Act] AS ACT
	INNER JOIN
	[enterprise_Odt] AS DT 
	ON 
	ACT.[ActID] =DT.[ActID]
	INNER JOIN 
	[enterprise_Od] AS OD 
	ON
	DT.[OrderID] = OD.[OrderID]
	WHERE 
	ACT.[ActID] = @Filter 	
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
	[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	-- 依照活動編號取出報名資料總數 --
	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_Odt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_Od] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ACT.[ActID] = @Filter 	
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;
END
ELSE
BEGIN
	;WITH CTE AS (
	SELECT 
		ACT.[Name] AS [ActName],
		ACT.[StartDay],
		OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
		OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
		FROM 
		[enterprise_Od] AS OD 
		INNER JOIN 
		[enterprise_Odt] AS DT 
		ON 
		OD.OrderID = DT.OrderID 
		INNER JOIN
		[enterprise_Act] AS ACT
		ON
		DT.[ActID] = ACT.[ActID]
		WHERE ( @Filter IS NULL OR 
			CASE			
			WHEN @FilterBy='Eid' THEN DT.[EmpID]
			WHEN @FilterBy='Sid' THEN DT.[SID]
			END 
			LIKE @Filter + '%'
		) 		
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
		SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
		[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM DS2 
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_Odt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_Od] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ( @Filter IS NULL OR 
			CASE			
			WHEN @FilterBy='Eid' THEN DT.[EmpID]
			WHEN @FilterBy='Sid' THEN DT.[SID]
			END 
			LIKE @Filter + '%'
		) 			
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;
END
    
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Od_Report]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Od_Report] 
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
SELECT 
a.[OrderID],
a.[ActID],
a.[ActName],
a.[Name],
a.[SID],
a.[EmpID],
CONVERT(varchar(12), a.[DOB], 111) AS [DOB],
a.[Sex],
a.[Cell],
a.[Email],
a.[Price],
a.[Comment] AS [Cmt],
a.[IsVeg],
b.[Name] AS [MainName],
b.[Cell1] AS [MainCell],
b.[Tel1] AS [MainTel],
b.[Email] AS [MainEmail],
b.[TotalPrice],
b.[Comment] 
FROM [enterprise_Odt] a JOIN [enterprise_Od] b 
ON a.OrderID = b.OrderID 
WHERE b.[Company] = 'wt' AND 		
		(@Filter IS NULL OR 
		  CASE WHEN @FilterBy='Aid' THEN a.[ActID]
			   WHEN @FilterBy='Name' THEN a.[Name]
			   WHEN @FilterBy='Eid' THEN a.[EmpID]
			   WHEN @FilterBy='Sid' THEN  a.[SID]
			   WHEN @FilterBy='Oid' THEN a.[OrderID]
			   WHEN @FilterBy='Cmt' THEN  b.[Comment]
		  END 
		  Like @Filter + '%'
		) 	
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Od_Transfer]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Od_Transfer] 
@OrderID nvarchar(20),
@ActIDToTran nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN	 
  Declare @actname nvarchar(50)
  Declare @num int
  Declare @count int

  SET @num = 0
  SET @count = 0

  IF(SUBSTRING(@OrderID,1,1) = 'M')
  BEGIN
    -- 同性質旅遊轉換 --
    -- 交易開始
    BEGIN TRAN

	-- 取得此單號總人數 --
	SELECT @count = COUNT(*) FROM enterprise_odt WHERE OrderID = @OrderID;

	-- 檢查數量是否足夠 --
	SELECT @num = [Capacity] FROM [enterprise_Act] WHERE [ActID] = @ActIDToTran
	
	IF @count > @num
	BEGIN
	  ROLLBACK TRAN		   	       
	  SELECT @result = '此一活動名額不足無法進行轉梯次！';
	  Return
	END

    -- 取得欲轉換活動名稱 --	
    SELECT @actname = [Name] FROM [enterprise_Act] WHERE [ActID] = @ActIDToTran; 

    UPDATE [enterprise_Odt] SET [ActID] = @ActIDToTran, [ActName] = @actname WHERE [OrderID] = @OrderID; 
    IF @@ERROR <> 0 
    BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '轉換活動項目與梯次時發生錯誤！程序終止！' + ERROR_MESSAGE();
	  RETURN
    END

    -- 完成交易
    COMMIT TRAN 
    SELECT @result = 'OK';
    RETURN   
  END
  ELSE
  BEGIN
    SELECT @result = '一日遊活動與露營活動不可互轉';
    Return   
  END

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Odt_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Odt_Get] 
@id nvarchar(12)
AS
BEGIN	

  SELECT [SeqNo],[OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],
  [Cell],[Email],[Size],[IsVeg],[IsOld],[IsDiscount],[Price],
  [Comment],[Location],[TempField] 
  FROM  [enterprise_Odt]                
  WHERE [OrderID] =  @id;  

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Odt_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_all_Odt_Modify] 
@DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN	
    Declare @Seqno int
    Declare @ID nvarchar(15)
	Declare @sid nvarchar(15)
    Declare @name nvarchar(50)
	Declare @eid nvarchar(15)
    Declare @dob smalldatetime	
	Declare @cel nvarchar(20)	
	Declare @email nvarchar(256)
	Declare @price int
	Declare @adjPrice int
	Declare @cmt nvarchar(256)
	Declare @actid nvarchar(15)
	Declare @actname nvarchar(50)
	Declare @sex nvarchar(1)

	Declare @count int	
	SET @count = 0;
	SET @adjPrice =0;

	SELECT 
	   @Seqno = [SeqNo],
	   @ID=[OrderID],
	   @name=[Name],
	   @sid=[SID],
	   @eid = [EmpID],
	   @dob = [DOB],
	   @cmt=[Comment],
	   @cel=[Cell],
	   @email=[Email],
	   @price=[Price],
	   @actid=[ActID],
	   @actname=[ActName]   
    FROM @DETAILLIST AS b

	-- 交易開始
    BEGIN TRAN

	 -- 取得目前金額 --
	 SELECT @adjPrice = [Price] FROM [enterprise_Odt] WHERE [SeqNo] = @Seqno;
    
	IF @Action = 'Add'
	BEGIN
	  IF(RIGHT(LEFT(@sid, 2),1) = '1')
	  BEGIN
	    SET @sex ='男'
	  END
	  ELSE
	  BEGIN
	    SET @sex ='女'
	  END

      INSERT INTO [enterprise_Odt] ([OrderID], [ActName], [ActID], [Name], [SID], [EmpID], [DOB], [Cell], [Email], [Price], [Comment], [Size], [IsVeg], [IsOld], [IsEarly], [IsDiscount], [Location], [Sex]) 
	  VALUES (@ID, @actname, @actid, @name, @sid, @eid, @dob, @cel, @email, @price, @cmt, 'L', 0, 0 , 0, 0, '', @sex);
	  IF @@ERROR <> 0 
	  BEGIN
		ROLLBACK TRAN	  
		SELECT @result = '新增明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		Return
	  END

	  -- 更新金額 --
		UPDATE [enterprise_Od] SET [TotalPrice] = [TotalPrice] +  @Price WHERE [OrderID] = @ID; 
		IF @@ERROR <> 0 
		BEGIN
		 ROLLBACK TRAN	  
		 SELECT @result = '嘗試更新主表金額時發生錯誤！程序終止！' + ERROR_MESSAGE();
		 Return
		END
	END

	 IF @Action = 'Update'   
	  BEGIN
	  SET @eid = RTRIM(LTRIM(@eid));
	  
	  IF(LEN(@eid)>0)
	   BEGIN
	     IF(@eid <> '000')
		 BEGIN
			SELECT @count = COUNT([EmpID]) FROM  [enterprise_Odt] WHERE  [EmpID] = @eid AND [ActID] = @actid;
			IF @count > 1
			 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @eid + ' 已報名此一活動，請從新輸入！';
			  Return
			 END
		 END
	   END
	      
	   SELECT @count = COUNT([SID]) FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid
	   IF @count > 1
		BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一身分證號' + @sid + ' 已報名此一活動，請從新輸入！';
		  Return
        END

		
		-- 調整金額 --
		IF(@adjPrice > 0)
		BEGIN
			SET @adjPrice = @price - @adjPrice;
		END

	    UPDATE [enterprise_Odt] SET 
		[Name]=@name,
		[SID] = @sid,
		[EmpID]= @eid,
		[DOB]=@dob,
		[Comment]=@cmt,
		[Cell]=@cel,
		[Email]=@email,
		[Price]=@price   
		WHERE [SeqNo] = @Seqno; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		
		-- 更新金額 --
		UPDATE [enterprise_Od] SET [TotalPrice] = [TotalPrice] +  @adjPrice WHERE [OrderID] = @ID; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新主表金額時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [enterprise_Odt] WHERE [SeqNo] = @Seqno;     
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		
		-- 更新金額 --
		UPDATE [enterprise_Od] SET [TotalPrice] = [TotalPrice] -  @adjPrice WHERE [OrderID] = @ID; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新主表金額時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

		-- 更新數量 --
        UPDATE [enterprise_Act] SET [Capacity] = [Capacity] + 1  WHERE [ActID] = @actid;
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新活動人數限制時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

		 -- 當明細表刪除後發現該單號在明細表無資料時，就同時刪除主表資料 --
		SELECT @count = COUNT(*) FROM [enterprise_Odt] WHERE [OrderID] = @ID;
		IF @count = 0
		  BEGIN
		     DELETE FROM [enterprise_Od] WHERE [OrderID] = @ID;
			 IF @@ERROR <> 0 
			 BEGIN
			  ROLLBACK TRAN	  
			  SELECT @result = '嘗試刪除主表資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
			  Return
			 END
		  END
	  END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_UserName_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		ERIC LI
-- Create date: 1/27/2017
-- Description:	取得所有使用者
-- =============================================
CREATE PROCEDURE [dbo].[enterprise_all_UserName_Get] 
AS
BEGIN	
	SELECT U.[UserName] FROM dbo.aspnet_Users AS U
		
END

GO
/****** Object:  StoredProcedure [dbo].[enterprise_all_Users_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		ERIC LI
-- Create date: 1/27/2017
-- Description:	取得所有使用者
-- =============================================
CREATE PROCEDURE [dbo].[enterprise_all_Users_Get] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN	
	DECLARE @totalRow AS INT;

	IF @FilterBy='Email' OR @FilterBy='Name'
	BEGIN
		;WITH CTE AS
		(
			SELECT 
			ROW_NUMBER() OVER ( ORDER BY [UserName] DESC) AS [RowNum],
			U.[UserId],
			U.[UserName],
			M.[Password],
			M.[Email],
			M.[PasswordQuestion],
			M.[LastLoginDate],
			M.[IsApproved],
			M.[IsLockedOut],
			M.[LastLockoutDate],
			M.[FailedPasswordAttemptCount],
			M.[FailedPasswordAnswerAttemptCount]
			FROM 
			dbo.aspnet_Users AS U 
			INNER JOIN 
			dbo.aspnet_Membership AS M
			ON
			U.[UserId] = M.[UserId] 
			WHERE 
			@Filter IS NULL 
			OR
			CASE 
				WHEN @FilterBy='Email' THEN M.[Email]
				WHEN @FilterBy='Name' THEN U.[UserName]
			END
			LIKE @Filter + '%'							
		)
		SELECT 
		[UserId],
		[UserName],
		[Email],
		[Password],
		[PasswordQuestion],
		[LastLoginDate],
		[LastLockoutDate],
		[IsApproved],
		[IsLockedOut], 
		[FailedPasswordAttemptCount],
		[FailedPasswordAnswerAttemptCount]
		FROM CTE 
		WHERE 
		  (RowNum > @PageSize * (@PageNumber - 1) )
		  AND 
		  (RowNum <= @PageSize * @PageNumber )
		ORDER BY RowNum;

		-- 取得資料總數 --
		;WITH CTERows AS
		(
			SELECT U.[UserId]
			FROM 
			dbo.aspnet_Users AS U 
			INNER JOIN 
			dbo.aspnet_Membership AS M
			ON
			U.[UserId] = M.[UserId] 
			WHERE 
			@Filter IS NULL 
			OR
			CASE 
				WHEN @FilterBy='Email' THEN M.[Email]
				WHEN @FilterBy='Name' THEN U.[UserName]
			END
			LIKE @Filter + '%'
					
		)
		SELECT @totalRow = COUNT(*) OVER() FROM CTERows 

		RETURN @totalRow;
	END


	IF @FilterBy='All'
	BEGIN
		;WITH CTE AS
		(
			SELECT 
			ROW_NUMBER() OVER ( ORDER BY [UserName] DESC) AS [RowNum],
			U.[UserId],
			U.[UserName],
			M.[Password],
			M.[Email],
			M.[PasswordQuestion],
			M.[LastLoginDate],
			M.[IsApproved],
			M.[IsLockedOut],
			M.[LastLockoutDate],
			M.[FailedPasswordAttemptCount],
			M.[FailedPasswordAnswerAttemptCount]
			FROM 
			dbo.aspnet_Users AS U 
			INNER JOIN 
			dbo.aspnet_Membership AS M
			ON
			U.[UserId] = M.[UserId] 									
		)
		SELECT 
		[UserId],
		[UserName],
		[Email],
		[Password],
		[PasswordQuestion],
		[LastLoginDate],
		[LastLockoutDate],
		[IsApproved],
		[IsLockedOut], 
		[FailedPasswordAttemptCount],
		[FailedPasswordAnswerAttemptCount]
		FROM CTE 
		WHERE 
		  (RowNum > @PageSize * (@PageNumber - 1) )
		  AND 
		  (RowNum <= @PageSize * @PageNumber )
		ORDER BY RowNum;

		-- 取得資料總數 --
		;WITH CTERows AS
		(
			SELECT U.[UserId]
			FROM 
			dbo.aspnet_Users AS U 
			INNER JOIN 
			dbo.aspnet_Membership AS M
			ON
			U.[UserId] = M.[UserId]
		)
		SELECT @totalRow = COUNT(*) OVER() FROM CTERows 

		RETURN @totalRow;
	END
	
END

GO
/****** Object:  StoredProcedure [dbo].[enterprise_Employee_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[enterprise_Employee_Get] 
@EID	NVARCHAR(25),
@SSID	NVARCHAR(4),
@AID	NVARCHAR(11)
AS
BEGIN
	

	IF (NOT EXISTS (SELECT * FROM [dbo].[enterprise_wt_employee] WHERE [SID] = @SSID AND [EID] = @EID ))
	BEGIN
		SELECT 'Empty' AS [Name] -- 查無此員工
	END -- END IF
	ELSE
	BEGIN
	  IF @AID <> 'N'
	  BEGIN
		-- 判斷此員工是否已經有報一日遊 (ActID=E1) 或二日遊 (ActID=E2)
		IF (EXISTS (SELECT * FROM [dbo].[enterprise_Odt] WHERE EmpId=@EID AND LEFT(ActID,2) = LEFT(@AID,2) ))
		BEGIN
			SELECT 'Join' AS [Name] -- 已經有報過名
		END
		ELSE
		BEGIN
			SELECT [Name] FROM [dbo].[enterprise_wt_employee] WHERE [SID]= @SSID AND [EID]=@EID --回傳員工姓名
		END
	  END

	  IF @AID = 'N'
	  BEGIN
		SELECT [Name] FROM [dbo].[enterprise_wt_employee] WHERE [SID]= @SSID AND [EID]=@EID --回傳員工姓名
	  END
	END -- END ELSE

	--DECLARE @cnt INT
	--DECLARE @actid NVARCHAR(11)
	--SET @cnt =0

	-- 判斷是否此員工
	--SELECT @cnt = COUNT(*) FROM [dbo].[enterprise_wt_employee] WHERE [SID]= @SSID AND [EID]=@EID
	--IF @cnt > 0
	--BEGIN
	--  SELECT [Name] FROM [dbo].[enterprise_wt_employee] WHERE [SID]= @SSID AND [EID]=@EID
	--  /*
	--  -- 判斷此員工是否已經有報一日遊 (ActID=E1) 或二日遊 (ActID=E2)
	--  SELECT @cnt = COUNT(*) FROM [dbo].[enterprise_Odt] WHERE EmpId=@EID AND LEFT(ActID,2) = LEFT(@AID,2)
	--  IF @cnt > 0 
	--  BEGIN
	--    SELECT 0 -- 已經有報過名
	--  END
	--  ELSE
	--  BEGIN
	--    SELECT 1
	--  END
	--  */

	--END
	--ELSE
	--BEGIN
	--  -- Not Found return 0
	--  SELECT 'Empty' AS [Name]
	--END
END


GO
/****** Object:  StoredProcedure [dbo].[enterprise_get_my_order]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[enterprise_get_my_order] 
@EID	NVARCHAR(10),
@SSID	NVARCHAR(10)
AS
BEGIN
	WITH CTE AS (
	SELECT OrderID FROM [dbo].[enterprise_odt] WHERE EmpID = @EID AND [SID] = @SSID
	)
	SELECT 
	o.OrderID, 
	o.Name AS [Leader], 
	o.Tel1 AS [Phone], 
	o.Tel2 AS [Room], 
	o.email, 
	o.TotalPrice, 
	o.Comment,
	t.ActID, 
	t.ActName, 
	t.Name AS [Joiner], 
	t.[SID], 
	t.EmpID, 
	t.DOB, 
	t.Sex, 
	t.Cell, 
	t.Email AS [PersonMail], 
	t.Size, 
	t.IsVeg, 
	t.price, 
	t.Comment as [Summary],
	t.[Seqno],
	a.[StartDay],
	a.[RegExpDay]
	FROM CTE AS MJ 
	LEFT JOIN 
	[dbo].[enterprise_odt] AS t 
	ON
	MJ.OrderID = t.OrderID
	LEFT JOIN 
	[dbo].[enterprise_od] AS o
	ON
	MJ.OrderID = o.OrderID
	LEFT JOIN
	[dbo].[enterprise_Act] AS a
	ON
	t.[ActID] = a.[ActID]
	ORDER BY o.OrderID
END


GO
/****** Object:  StoredProcedure [dbo].[enterprise_Od_ActRegister_Amount]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_Od_ActRegister_Amount] 
@ActID nvarchar(20)
AS
BEGIN	 
  SELECT COUNT(*) FROM enterprise_Odt WHERE [ActID] = @ActID;

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Act_Import]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Act_Import] 
    @ACTLIST AS dbo.enterprise_wt_act_import_tbl READONLY,
    @result nvarchar(150) OUTPUT
AS
BEGIN 
	DECLARE @actid nvarchar(15) 
	DECLARE @name nvarchar(50)
	DECLARE @startdate nvarchar(20)
	DECLARE @regexpdate nvarchar(20)
	DECLARE @capacity int
	DECLARE @price int
	DECLARE @price2 int
	DECLARE @company nvarchar(50)
	DECLARE @enable bit
	DECLARE @str1 nvarchar(255)
	DECLARE @str2 nvarchar(255)
	DECLARE @room2 smallint
	DECLARE @room4 smallint
	DECLARE @count int

	SET @count = 1

	-- TRANSACTION BEGIN --
    BEGIN TRAN

	DECLARE POINTER CURSOR FOR
    SELECT 
     L.[ActID],L.[Name],L.[StartDay],L.[RegExpDay],L.[Capacity],L.[Price],L.[Price2],L.[Company],L.[Enable],L.[FieldStr1],L.[FieldStr2],L.[FieldInt1],L.[FieldInt2]
    FROM @ACTLIST AS L
    OPEN POINTER 
    -- 取出第一筆資料  
    FETCH NEXT FROM POINTER INTO  @actid, @name, @startdate, @regexpdate, @capacity, @price, @price2, @company, @enable, @str1, @str2, @room2, @room4

	WHILE @@FETCH_STATUS = 0
	BEGIN
      /*
	  IF(CONVERT(NVARCHAR, @actid) = '1')
	  BEGIN
	   -- 一日遊 --
	   SET @actid = 'E1000000'
	  END
	  ELSE
	  BEGIN
	    -- 二日遊 --
	    SET @actid = 'E2000000'
	  END

	  SET @actid = @actid+ RIGHT('000' + CONVERT(VARCHAR(3),@count), 3)
	  */
	  IF (EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
	  BEGIN
		UPDATE [enterprise_Act] SET 		
		[Name] = @name,
		[StartDay] = @startdate,
		[RegExpDay] = @regexpdate,
		[Capacity] = @capacity,
		[Price] = @price,
		[Price2] = @price2,
		[Company] = @company,
		[Enable] = @enable,
		[FieldStr1] = @str1,
		[FieldStr2] = @str2,
		[FieldInt1] = @room2,
		[FieldInt2] = @room4
		WHERE [ActID] = @actid

		IF @@ERROR <> 0 
	    BEGIN
	      ROLLBACK TRAN	  
	      SELECT @result ='更新活動：' + @name + '（' + @actid + '）失敗' 
	      RETURN
	    END
	  END -- UPDATE END
	  ELSE
	  BEGIN
	    INSERT INTO [enterprise_Act] ([ActID],[Name],[StartDay],[RegExpDay],[Capacity],[Price],[Price2],[Company],[Enable],[FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2])
        VALUES (@actid, @name, @startdate, @regexpdate, @capacity, @price, @price2, @company, @enable, @str1, @str2, @room2, @room4)

		IF @@ERROR <> 0 
	    BEGIN
	      ROLLBACK TRAN	  
	      SELECT @result ='新增活動：' + @name + '（' + @actid + '）失敗'
	      RETURN
	    END
	  END -- INSERT END

	  FETCH NEXT FROM POINTER INTO  @actid, @name, @startdate, @regexpdate, @capacity, @price, @price2, @company, @enable, @str1, @str2, @room2, @room4
	END -- END LOOP

	-- CLOSE CURSOR --
	CLOSE POINTER 
    DEALLOCATE POINTER 

    -- COMMIT TRANSACTION --
	COMMIT TRAN 
	SELECT @result = 'OK';
	RETURN    
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Album_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		ERIC LI
-- Create date: 12/20/2018
-- Description:	文燁相簿
-- =============================================

CREATE PROCEDURE [dbo].[enterprise_wt_Album_Get] 
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
	SET NOCOUNT ON;

	IF @FilterBy = 'All'
	BEGIN
	  SELECT [ID],[Desc],[Date],[Thumb],[Link] FROM [enterprise_wt_Album] ORDER BY [Date] DESC
	END

	IF @FilterBy = 'Date'
	BEGIN
	  SELECT [ID],[Desc],[Date],[Thumb],[Link] FROM [enterprise_wt_Album] WHERE [Date] >= @Filter  ORDER BY [Date] DESC
	END

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Camping_Od_Add]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Camping_Od_Add] 
	-- Add the parameters for the stored procedure here
    @ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
    @DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
    @result nvarchar(150) OUTPUT
AS
BEGIN
    Declare @preID nvarchar(10)	 
    Declare @actid nvarchar(15) 
	Declare @actname nvarchar(50)
    Declare @name nvarchar(50)
    Declare @sid nvarchar(20)
    Declare @empid nvarchar(20)
    Declare @dob nvarchar(20)
    Declare @sax nvarchar(1)
    Declare @cell nvarchar(20)
    Declare @email nvarchar(256)    
    Declare @cmt nvarchar(255)  
	Declare @price int

    Declare @TrueID nvarchar(12)
    Declare @num int
	Declare @count int

	
	SET @num =0;
	SET @count=0;
	SET @price=0;
    
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
    -- 交易開始
    BEGIN TRAN
   
    SELECT @preID = a.[OrderID] FROM @ORDERLIST AS a
    
    -- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [enterprise_Od] WITH (UPDLOCK, HOLDLOCK)
    WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC

     -- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @preID  + '001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  	SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
      END
      
     
    IF(NOT @TrueID is NULL)
      BEGIN
		IF (EXISTS (SELECT * FROM  [enterprise_Od] WHERE  [OrderID] = @TrueID ))
		BEGIN
		  ROLLBACK TRAN		   	       
		    SELECT @result = '單號重覆，程序終止！';
		  Return
      END
	END

	SET @num =0;
	 -- 檢查是否有重複報名
	 Declare CUR CURSOR FOR
     SELECT d.[ActID], d.[SID], d.[EmpID] FROM @DETAILLIST AS d
     OPEN CUR 
	 Fetch Next From CUR INTO @actid, @sid, @empid
	 While @@FETCH_STATUS = 0
	  BEGIN
	   SET @empid = LTRIM(RTRIM(@empid));

	   IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
		 BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行報名！';
		  Return
         END

	   IF(LEN(@empid)>0 OR @empid='000')
	   BEGIN
	     IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在該活動中報名，請重新輸入！';
			  Return
		 END

		 --IF(@actid='E1060703001' OR @actid='E1060703002')
		 --BEGIN
			--IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],1) ='C'))
			-- BEGIN
			--	  ROLLBACK TRAN		   	       
			--	  SELECT @result = '此一工號' + @empid + ' 已在該系列活動中報名，請重新輸入！';
			--	  Return
			-- END
		 --END

		 IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已補助一次，請重新輸入！'
			  Return
		 END
	   END		 

		 IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
		  BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一身分證號' + @sid + ' 已報名，請重新輸入！';
			  Return
		  END
		
		 SET @count = @count + 1;
		Fetch Next From CUR INTO @actid, @sid, @empid
	  END
     CLOSE CUR 
	 DEALLOCATE CUR
    
	-- 檢查數量是否足夠
	SELECT @num = [Capacity] FROM [enterprise_Act] WHERE [ActID] = @actid
	
	IF @count > @num
	 BEGIN
	  ROLLBACK TRAN		   	       
	  SELECT @result = '此一活動名額不足無法進行報名！';
	  Return
	 END

	-- 計算剩餘數量
	SET @num = @num - @count;
	IF @num <= 0
	BEGIN
	  SET @num = 0;
	END

	SET @count =0;
    INSERT INTO [enterprise_Od]
	(
	  [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],
      [TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],
      [CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
	)
    SELECT 
     @TrueID, b.[Name], b.[Tel1], b.[Tel2], b.[Cell1], b.[cell2], b.[Fax],     
     b.[Address], b.[Email], b.[TotalPrice],0,0,0, b.[Comment], b.[Source], b.[Company],GETDATE()
    FROM @ORDERLIST AS b
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result ='寫入主表單時發生錯誤，程序終止！'
	  Return
	 END
	 
    Declare POINTER CURSOR FOR
    SELECT 
     t.[ActID], t.[ActName], t.[Name], t.[SID], t.[EmpID], t.[DOB], t.[Sex], t.[Cell], t.[Email], t.[Comment], t.[Price]
    FROM @DETAILLIST AS t
    OPEN POINTER 
	-- 取出第一筆資料  
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price

	While @@FETCH_STATUS = 0
    BEGIN    
    BEGIN TRY
		SET @count = @count + 1;
    	INSERT INTO [enterprise_Odt]
		(
	 	  [OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Price],[Comment]
		  --[Location],[TempField],[IsVeg],[IsOld],[IsEarly],[IsDiscount],[Size]
		)
		VALUES
		(
	  	  @TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @price, @cmt	
    	)
    END TRY
	BEGIN CATCH  
	  ROLLBACK TRAN 
	  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時發生錯誤：' + ERROR_MESSAGE();      
      Return
	END CATCH
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時(' + @name + ')發生錯誤！程序終止！' + ERROR_MESSAGE();
	  Return
	 END	
	
    -- 存入成功後再取下一筆資料
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price

  END
  CLOSE POINTER 
  DEALLOCATE POINTER 
  
  -- 更新數量
  UPDATE [enterprise_Act] SET [Capacity] = @num WHERE [ActID] = @actid;  

  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Fitness_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		ERIC LI
-- Create date: 1/27/2017
-- Description:	文曄減重目標
-- =============================================

CREATE PROCEDURE [dbo].[enterprise_wt_Fitness_Modify] 
@Id int,
@Period nvarchar(50),
@Goal nvarchar(256),
@Action nvarchar(12),
@result nvarchar(150) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	
    -- 交易開始
    BEGIN TRAN
    
	IF @Action = 'Add' 
	 BEGIN
	    INSERT INTO [enterprise_wt_Fitness]	([Period],[Goal]) VALUES (@Period,@Goal);    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試寫入資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	 END
    
	 IF @Action = 'Update' 
	  BEGIN
	    UPDATE [enterprise_wt_Fitness] SET [Goal]=@Goal WHERE [ID] = @Id;
    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [enterprise_wt_Fitness] WHERE [ID] = @Id;    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return    

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Fitness_Od_Add]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Fitness_Od_Add] 
	-- Add the parameters for the stored procedure here
    @ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
    @DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
    @result nvarchar(150) OUTPUT
AS
BEGIN
    Declare @preID nvarchar(10)	 
    Declare @actid nvarchar(15) 
	Declare @actname nvarchar(50)
    Declare @name nvarchar(50)
    Declare @sid nvarchar(20)
    Declare @empid nvarchar(20)
    Declare @dob nvarchar(20)
    Declare @sax nvarchar(1)
    Declare @cell nvarchar(20)
    Declare @email nvarchar(256)    
    Declare @cmt nvarchar(255)  
	 
    Declare @TrueID nvarchar(12)
    Declare @num int
	Declare @count int

	
	SET @num =0;
	SET @count=0;
    
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
    -- 交易開始
    BEGIN TRAN
   
    SELECT @preID = a.[OrderID] FROM @ORDERLIST AS a
    
    -- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [enterprise_Od] WITH (UPDLOCK, HOLDLOCK)
    WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC

     -- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @preID  + '001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  	SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
      END
      
     
    IF(NOT @TrueID is NULL)
      BEGIN
		IF (EXISTS (SELECT * FROM  [enterprise_Od] WHERE  [OrderID] = @TrueID ))
		BEGIN
		  ROLLBACK TRAN		   	       
		    SELECT @result = '單號重覆，程序終止！';
		  Return
      END
	END

	SET @num =0;
	 -- 檢查是否有重複報名
	 Declare CUR CURSOR FOR
     SELECT d.[ActID], d.[SID], d.[EmpID] FROM @DETAILLIST AS d
     OPEN CUR 
	 Fetch Next From CUR INTO @actid, @sid, @empid
	 While @@FETCH_STATUS = 0
	  BEGIN
	    IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
		 BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一課程編號 ' + @actid+ ' 不存在無法進行報名！';
		  Return
         END

		 IF @actid <> 'F1060210001'
		  BEGIN
		   IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
			 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已報名此一課程，請重新輸入！';
			  Return
			 END

			 IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
			 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一身分證號' + @sid + ' 已報名此一課程，請重新輸入！';
			  Return
			 END
		  END
		
		 SET @count = @count + 1;
		Fetch Next From CUR INTO @actid, @sid, @empid
	  END
     CLOSE CUR 
	 DEALLOCATE CUR
    
	-- 檢查數量是否足夠
	SELECT @num = [Capacity] FROM [enterprise_Act] WHERE [ActID] = @actid
	
	IF @count > @num
	 BEGIN
	  ROLLBACK TRAN		   	       
	  SELECT @result = '此一課程名額不足無法進行報名！';
	  Return
	 END

	-- 計算剩餘數量
	SET @num = @num - @count;

	SET @count =0;
    INSERT INTO [enterprise_Od]
	(
	  [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],
      [TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],
      [CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
	)
    SELECT 
     @TrueID, b.[Name], b.[Tel1], b.[Tel2], b.[Cell1], b.[cell2], b.[Fax],     
     b.[Address], b.[Email], 0,0,0,0, b.[Comment], b.[Source], b.[Company],GETDATE()
    FROM @ORDERLIST AS b
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result ='寫入主表單時發生錯誤，程序終止！'
	  Return
	 END
    
    Declare POINTER CURSOR FOR
    SELECT 
     t.[ActID], t.[ActName], t.[Name], t.[SID], t.[EmpID], t.[DOB], t.[Sex], t.[Cell], t.[Email], t.[Comment]
    FROM @DETAILLIST AS t
    OPEN POINTER 
	-- 取出第一筆資料  
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt

	While @@FETCH_STATUS = 0
    BEGIN    
    BEGIN TRY
		SET @count = @count + 1;
    	INSERT INTO [enterprise_Odt]
		(
	 	  [OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Price],[Comment]
		  --[Location],[TempField],[IsVeg],[IsOld],[IsEarly],[IsDiscount],[Size]
		)
		VALUES
		(
	  	  @TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, 0, @cmt	
    	)
    END TRY
	BEGIN CATCH  
	  ROLLBACK TRAN 
	  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時發生錯誤：' + ERROR_MESSAGE();      
      Return
	END CATCH
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時(' + @name + ')發生錯誤！程序終止！' + ERROR_MESSAGE();
	  Return
	 END	
	
    -- 存入成功後再取下一筆資料
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt

  END
  CLOSE POINTER 
  DEALLOCATE POINTER 
  
  -- 更新數量
  UPDATE [enterprise_Act] SET [Capacity] = @num WHERE [ActID] = @actid;  

  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Fitness_Od_Report]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Fitness_Od_Report] 
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
SELECT a.[OrderID],a.[ActID],a.[ActName],a.[Name],a.[SID],a.[EmpID],a.[DOB],a.[Sex],a.[Cell],a.[Email],b.[Comment], a.Comment AS Cmt 
FROM [enterprise_Odt] a JOIN [enterprise_Od] b 
ON a.OrderID = b.OrderID 
WHERE b.[Company] = 'wt123' AND 		
		(@Filter IS NULL OR 
		  CASE WHEN @FilterBy='Aid' THEN a.[ActID]
			   WHEN @FilterBy='Name' THEN a.[Name]
			   WHEN @FilterBy='Eid' THEN a.[EmpID]
			   WHEN @FilterBy='Sid' THEN  a.[SID]
			   WHEN @FilterBy='Oid' THEN a.[OrderID]
			   WHEN @FilterBy='Cmt' THEN  b.[Comment]
		  END 
		  Like @Filter + '%'
		) 	
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Fitness_Odt_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Fitness_Odt_Modify] 
@DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN	
    Declare @Seqno int
    Declare @ID nvarchar(15)
	Declare @sid nvarchar(15)
    Declare @name nvarchar(50)
	Declare @eid nvarchar(15)
    Declare @dob smalldatetime	
	Declare @cel nvarchar(20)	
	Declare @email nvarchar(256)
	Declare @cmt nvarchar(256)
	Declare @actid nvarchar(15)
	Declare @actname nvarchar(50)

	Declare @count int	
	SET @count = 0;
	
	SELECT 
	   @Seqno = [SeqNo],
	   @ID=[OrderID],
	   @name=[Name],
	   @sid=[SID],
	   @eid = [EmpID],
	   @dob = [DOB],
	   @cmt=[Comment],
	   @cel=[Cell],
	   @email=[Email],
	   @actid=[ActID],
	   @actname=[ActName]   
    FROM @DETAILLIST AS b

	--SELECT @result = CONVERT(nvarchar(20), @Seqno) + ', ' + @ID 
	--+ ', ' + @name + ', ' + @sid + ', ' + @eid + ', ' + CONVERT(nvarchar(20), @dob) + ', ' + @cmt + ', ' + @actid + ', ' + @actname;
	--Return 

		-- 交易開始
    BEGIN TRAN
    
	 IF @Action = 'Update' 
	  SELECT @count = COUNT([EmpID]) FROM  [enterprise_Odt] WHERE  [EmpID] = @eid AND [ActID] = @actid
	 
	   IF @count > 1
		 BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一工號' + @eid + ' 已報名此一課程，請從新輸入！';
		  Return
         END
	   SELECT @count = COUNT([SID]) FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid
	    IF @count > 1
		 BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一身分證號' + @sid + ' 已報名此一課程，請從新輸入！';
		  Return
         END

	  BEGIN
	    UPDATE [enterprise_Odt] SET 
		[Name]=@name,
		[SID] = @sid,
		[EmpID]= @eid,
		[DOB]=@dob,
		[Comment]=@cmt,
		[Cell]=@cel,
		[Email]=@email	   
		WHERE [SeqNo] = @Seqno; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [enterprise_Odt] WHERE [SeqNo] = @Seqno;     
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

		-- 更新數量
        UPDATE [enterprise_Act] SET [Capacity] = [Capacity] + 1  WHERE [ActID] = @actid;
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新活動人數限制時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

		SELECT @count = COUNT(*) FROM [enterprise_Odt] WHERE [OrderID] = @ID;
		IF @count = 0
		  BEGIN
		     DELETE FROM [enterprise_Od] WHERE [OrderID] = @ID;
			 IF @@ERROR <> 0 
			 BEGIN
			  ROLLBACK TRAN	  
			  SELECT @result = '嘗試刪除主表資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
			  Return
			 END
		  END
	  END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Fitness_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Fitness_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5
AS
BEGIN
  DECLARE @totalRow AS INT;

	;WITH CTE AS
    (
      SELECT ROW_NUMBER() OVER ( ORDER BY [ID]) AS RowNum,[ID],[Period],[Goal] FROM [enterprise_wt_Fitness] 
    )
    SELECT [ID],[Period],[Goal] FROM CTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum
    
    -- 以下是另一組 DataSet 用來取得資料總數 --
	SELECT @totalRow = COUNT(*) FROM [enterprise_wt_Fitness]    
    
	RETURN @totalRow;
    
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Od_Rpt_WithPay]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Od_Rpt_WithPay] 
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
	IF @FilterBy = 'Day'
	BEGIN
		SELECT 
		DT.[OrderID],
		DT.[ActID],
		DT.[ActName],
		DT.[Name],
		DT.[SID],
		DT.[EmpID],
		CONVERT(varchar(12), DT.[DOB], 111) AS [DOB],
		DT.[Sex],
		DT.[Cell],
		DT.[Email],
		DT.[Price],
		DT.[Comment] AS [Cmt],
		DT.[IsVeg],
		OD.[Name] AS [MainName],
		OD.[Cell1] AS [MainCell],
		OD.[Tel1] AS [MainTel],
		OD.[Email] AS [MainEmail],
		OD.[TotalPrice],
		OD.[Comment],
		ACT.[StartDay],
		ISNULL(PAY.[Name], '') AS [PayName],
		--PAY.[Tel],
		--PAY.[Cell],
		ISNULL(PAY.[TotalPrice], 0) AS [ActualPay],
		ISNULL(PAY.[PayType], '') AS [PayType],
		ISNULL(PAY.[Account], '') AS [Account],
		ISNULL(PAY.[Comment], '') AS [PayCmt],
		ISNULL(CONVERT(varchar(12), PAY.[PayDay], 111), '') AS [PayDay]
		FROM [enterprise_Act] AS ACT
		INNER JOIN 
		[enterprise_Odt] AS DT 
		ON
		ACT.[ActID] = DT.[ActID] 
		INNER JOIN
		[enterprise_Od] AS OD
		ON 
		DT.[OrderID] = OD.[OrderID]
		LEFT JOIN
		[enterprise_wt_Pay] AS PAY 
		ON
		DT.[OrderID] = PAY.[OrderID]
		WHERE 
		ACT.[StartDay] = @Filter
		ORDER BY ACT.[ActID]
	END
	ELSE IF @FilterBy='E2' 
	BEGIN
		SELECT 
		DT.[OrderID],
		DT.[ActID],
		DT.[ActName],
		DT.[Name],
		DT.[SID],
		DT.[EmpID],
		CONVERT(varchar(12), DT.[DOB], 111) AS [DOB],
		DT.[Sex],
		DT.[Cell],
		DT.[Email],
		DT.[Price],
		DT.[Comment] AS [Cmt],
		DT.[IsVeg],
		OD.[Name] AS [MainName],
		OD.[Cell1] AS [MainCell],
		OD.[Tel1] AS [MainTel],
		OD.[Email] AS [MainEmail],
		OD.[TotalPrice],
		OD.[Comment],
		ACT.[StartDay],
		ISNULL(PAY.[Name], '') AS [PayName],
		--PAY.[Tel],
		--PAY.[Cell],
		ISNULL(PAY.[TotalPrice], 0) AS [ActualPay],
		ISNULL(PAY.[PayType], '') AS [PayType],
		ISNULL(PAY.[Account], '') AS [Account],
		ISNULL(PAY.[Comment], '') AS [PayCmt],
		ISNULL(CONVERT(varchar(12), PAY.[PayDay], 111), '') AS [PayDay]
		FROM [enterprise_Act] AS ACT
		INNER JOIN 
		[enterprise_Odt] AS DT 
		ON
		ACT.[ActID] = DT.[ActID] 
		INNER JOIN
		[enterprise_Od] AS OD
		ON 
		DT.[OrderID] = OD.[OrderID]
		LEFT JOIN
		[enterprise_wt_Pay] AS PAY 
		ON
		DT.[OrderID] = PAY.[OrderID]
		WHERE 
		ACT.[ActID] LIKE 'E2%'
		ORDER BY ACT.[ActID]
	END
	ELSE IF @FilterBy='E1' 
	BEGIN
		SELECT 
		DT.[OrderID],
		DT.[ActID],
		DT.[ActName],
		DT.[Name],
		DT.[SID],
		DT.[EmpID],
		CONVERT(varchar(12), DT.[DOB], 111) AS [DOB],
		DT.[Sex],
		DT.[Cell],
		DT.[Email],
		DT.[Price],
		DT.[Comment] AS [Cmt],
		DT.[IsVeg],
		OD.[Name] AS [MainName],
		OD.[Cell1] AS [MainCell],
		OD.[Tel1] AS [MainTel],
		OD.[Email] AS [MainEmail],
		OD.[TotalPrice],
		OD.[Comment],
		ACT.[StartDay],
		ISNULL(PAY.[Name], '') AS [PayName],
		--PAY.[Tel],
		--PAY.[Cell],
		ISNULL(PAY.[TotalPrice], 0) AS [ActualPay],
		ISNULL(PAY.[PayType], '') AS [PayType],
		ISNULL(PAY.[Account], '') AS [Account],
		ISNULL(PAY.[Comment], '') AS [PayCmt],
		ISNULL(CONVERT(varchar(12), PAY.[PayDay], 111), '') AS [PayDay]
		FROM [enterprise_Act] AS ACT
		INNER JOIN 
		[enterprise_Odt] AS DT 
		ON
		ACT.[ActID] = DT.[ActID] 
		INNER JOIN
		[enterprise_Od] AS OD
		ON 
		DT.[OrderID] = OD.[OrderID]
		LEFT JOIN
		[enterprise_wt_Pay] AS PAY 
		ON
		DT.[OrderID] = PAY.[OrderID]
		WHERE 
		ACT.[ActID] LIKE 'E1%'
		ORDER BY ACT.[ActID]
	END
	ELSE
	BEGIN
		;WITH CTE AS (
			SELECT 
			a.[OrderID],
			a.[ActID],
			a.[ActName],
			a.[Name],
			a.[SID],
			a.[EmpID],
			CONVERT(varchar(12), a.[DOB], 111) AS [DOB],
			a.[Sex],
			a.[Cell],
			a.[Email],
			a.[Price],
			a.[Comment] AS [Cmt],
			a.[IsVeg],
			b.[Name] AS [MainName],
			b.[Cell1] AS [MainCell],
			b.[Tel1] AS [MainTel],
			b.[Email] AS [MainEmail],
			b.[TotalPrice],
			b.[Comment] 
			FROM [enterprise_Odt] a JOIN [enterprise_Od] b 
			ON a.OrderID = b.OrderID 
			WHERE b.[Company] = 'wt' AND 		
					(@Filter IS NULL OR 
					  CASE WHEN @FilterBy='Aid' THEN a.[ActID]
						   WHEN @FilterBy='Name' THEN a.[Name]
						   WHEN @FilterBy='Eid' THEN a.[EmpID]
						   WHEN @FilterBy='Sid' THEN  a.[SID]
						   WHEN @FilterBy='Oid' THEN a.[OrderID]
						   WHEN @FilterBy='Cmt' THEN  b.[Comment]
					  END 
					  Like @Filter + '%'
					) 	
		)
		SELECT 
		MJ.[OrderID],
		MJ.[ActID],
		MJ.[ActName],
		MJ.[Name],
		MJ.[SID],
		MJ.[EmpID],
		MJ.[DOB],
		MJ.[Sex],
		MJ.[Cell],
		MJ.[Email],
		MJ.[Price],
		MJ.[Cmt],
		MJ.[IsVeg],
		MJ.[MainName],
		MJ.[MainCell],
		MJ.[MainTel],
		MJ.[MainEmail],
		MJ.[TotalPrice],
		MJ.[Comment],
		ISNULL(PAY.[Name], '') AS [PayName],
		--PAY.[Tel],
		--PAY.[Cell],
		ISNULL(PAY.[TotalPrice], 0) AS [ActualPay],
		ISNULL(PAY.[PayType], '') AS [PayType],
		ISNULL(PAY.[Account], '') AS [Account],
		ISNULL(PAY.[Comment], '') AS [PayCmt],
		ISNULL(CONVERT(varchar(12), PAY.[PayDay], 111), '') AS [PayDay],
		ACT.[StartDay]	
		FROM CTE AS MJ
		LEFT JOIN
		[enterprise_wt_Pay] AS PAY 
		ON
		MJ.[OrderID] = PAY.[OrderID]
		INNER JOIN 
		[enterprise_Act] AS ACT
		ON
		MJ.[ActID] = ACT.[ActID]
	END
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_OneDay_Od_Add]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_OneDay_Od_Add] 
	-- Add the parameters for the stored procedure here
    @ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
    @DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
    @result nvarchar(150) OUTPUT
AS
BEGIN
    Declare @preID nvarchar(10)	
	
    Declare @actid nvarchar(15) 
	Declare @actname nvarchar(50)
    Declare @name nvarchar(50)
    Declare @sid nvarchar(20)
    Declare @empid nvarchar(20)
    Declare @dob nvarchar(20)
    Declare @sax nvarchar(1)
    Declare @cell nvarchar(20)
    Declare @email nvarchar(256)    
    Declare @cmt nvarchar(255)  
	Declare @price int
	Declare @veg bit

    Declare @TrueID nvarchar(12)
    Declare @num int
	
	Declare @count int

	
	SET @num =0;	
	SET @count=0;
	SET @price=0;
    
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
    -- 交易開始
    BEGIN TRAN
   
    SELECT @preID = a.[OrderID] FROM @ORDERLIST AS a
    
    -- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [enterprise_Od] WITH (UPDLOCK, HOLDLOCK) WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC

     -- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @preID  + '001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  	SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
      END
      
     
    IF(NOT @TrueID is NULL)
      BEGIN
		IF (EXISTS (SELECT * FROM  [enterprise_Od] WHERE  [OrderID] = @TrueID ))
		BEGIN
		  ROLLBACK TRAN		   	       
		    SELECT @result = '單號重覆，報名程序終止！';
		  Return
      END
	END

	SET @num =0;
	 -- 檢查是否有重複報名
	 Declare CUR CURSOR FOR
     SELECT d.[ActID], d.[SID], d.[EmpID] FROM @DETAILLIST AS d
     OPEN CUR 
	 Fetch Next From CUR INTO @actid, @sid, @empid
	 While @@FETCH_STATUS = 0
	 BEGIN
	   SET @empid = LTRIM(RTRIM(@empid));

	   IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
	   BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行報名！';
		  Return
       END

	   IF(LEN(@empid)>0)
	   BEGIN
		 IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在此活動中報名，無法進行報名！';
			  Return
		 END -- END of 檢查工號是否已報名此活動

		 IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='M1'))
		 BEGIN
		      ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在其他一日遊活動中報名，無法進行報名！';
			  Return
		 END -- END of 檢查工號是否已報名其他一日遊

	   END -- END of 當有工號時 		 
	   ELSE
	   BEGIN
	     IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一身分證號' + @sid + ' 已在該活動中報名，無法進行報名！';
			  Return
		 END -- END of 檢查此身分證號是否已報名此活動

		 --IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE [SID] = @sid AND LEFT([OrderID],2) ='M1'))
		 --BEGIN
		 --     ROLLBACK TRAN		   	       
			--  SELECT @result = '此一身分證號' + @sid + ' 已在其他一日遊活動中報名，無法進行候補！';
			--  Return
		 --END -- END of 檢查身分證是否已報名其他一日遊

	   END -- END of 當沒有工號時檢查身分證	    
		
	   SET @count = @count + 1;
	   Fetch Next From CUR INTO @actid, @sid, @empid
	  END 
     CLOSE CUR 
	 DEALLOCATE CUR -- END LOOP

	 -- 檢查數量是否足夠
	SELECT @num = [Capacity] FROM [enterprise_Act] WHERE [ActID] = @actid
	
	IF @count > @num
	BEGIN
	  ROLLBACK TRAN		   	       
	  SELECT @result = '110';
	  Return
	END

	-- 計算剩餘數量
	SET @num = @num - @count;
	IF @num <= 0
	BEGIN
	  SET @num = 0;
	END
    
	SET @count =0;
    INSERT INTO [enterprise_Od]
	(
	  [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],
      [TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],
      [CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
	)
    SELECT 
     @TrueID, b.[Name], b.[Tel1], b.[Tel2], b.[Cell1], b.[cell2], b.[Fax], b.[Address], b.[Email], b.[TotalPrice],0,0,0, b.[Comment], b.[Source], b.[Company], GETDATE()
    FROM @ORDERLIST AS b
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result ='很抱歉服務器發生錯誤（發生於報名主單），目前無法進行報名！請稍後再嘗試。'
	  Return
	 END
	 
    Declare POINTER CURSOR FOR
    SELECT 
     t.[ActID], t.[ActName], t.[Name], t.[SID], t.[EmpID], t.[DOB], t.[Sex], t.[Cell], t.[Email], t.[Comment], t.[Price], t.[IsVeg]
    FROM @DETAILLIST AS t
    OPEN POINTER 
	-- 取出第一筆資料  
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

	While @@FETCH_STATUS = 0
    BEGIN    
    BEGIN TRY
		SET @count = @count + 1;
    	INSERT INTO [enterprise_Odt]
		(
	 	  [OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Price],[Comment],[IsVeg]
		)
		VALUES
		(
	  	  @TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @price, @cmt, @veg
    	)
    END TRY
	BEGIN CATCH  
	  ROLLBACK TRAN 
	  SELECT @result = '加入第' + Convert(nvarchar(10),@count) + '位參加人資料時發生錯誤：' + ERROR_MESSAGE();      
      Return
	END CATCH
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '加入第' + Convert(nvarchar(10),@count) + '位參加人資料時（' + @name + '）發生錯誤！目前無法進行報名！請稍後再嘗試。' + ERROR_MESSAGE();
	  Return
	 END	
	
    -- 存入成功後再取下一筆資料
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

  END
  CLOSE POINTER 
  DEALLOCATE POINTER -- END Second LOOP

  -- 更新數量
  UPDATE [enterprise_Act] SET [Capacity] = @num WHERE [ActID] = @actid;

  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_OneDay_Od_Waiting_Add]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_OneDay_Od_Waiting_Add] 
	-- Add the parameters for the stored procedure here
    @ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
    @DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
    @result nvarchar(150) OUTPUT
AS
BEGIN
    Declare @preID nvarchar(10)	
	
    Declare @actid nvarchar(15) 
	Declare @actname nvarchar(50)
    Declare @name nvarchar(50)
    Declare @sid nvarchar(20)
    Declare @empid nvarchar(20)
    Declare @dob nvarchar(20)
    Declare @sax nvarchar(1)
    Declare @cell nvarchar(20)
    Declare @email nvarchar(256)    
    Declare @cmt nvarchar(255)  
	Declare @price int
	Declare @veg bit

    Declare @TrueID nvarchar(12)
    Declare @num int
	
	Declare @count int

	
	SET @num =0;	
	SET @count=0;
	SET @price=0;
    
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
    -- 交易開始
    BEGIN TRAN
   
    SELECT @preID = a.[OrderID] FROM @ORDERLIST AS a
    
    -- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [enterprise_tempOd] WITH (UPDLOCK, HOLDLOCK) WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC

     -- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @preID  + '001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  	SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
      END
      
     
    IF(NOT @TrueID is NULL)
      BEGIN
		IF (EXISTS (SELECT * FROM  [enterprise_tempOd] WHERE  [OrderID] = @TrueID ))
		BEGIN
		  ROLLBACK TRAN		   	       
		    SELECT @result = '單號重覆，候補程序終止！';
		  Return
      END
	END

	SET @num =0;
	 -- 檢查是否有重複報名
	 Declare CUR CURSOR FOR
     SELECT d.[ActID], d.[SID], d.[EmpID] FROM @DETAILLIST AS d
     OPEN CUR 
	 Fetch Next From CUR INTO @actid, @sid, @empid
	 While @@FETCH_STATUS = 0
	 BEGIN
	   SET @empid = LTRIM(RTRIM(@empid));

	   IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
	   BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行候補！';
		  Return
       END

	   IF(LEN(@empid)>0)
	   BEGIN
	     IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在該活動中報名，無法進行候補！';
			  Return
		 END -- END of 檢查工號是否已報名此活動

		 IF (EXISTS (SELECT * FROM  [enterprise_tempOdt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在該活動中候補，無法再候補！';
			  Return
		 END -- END of 檢查工號是否已候補此活動

		 IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='M1'))
		 BEGIN
		      ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在其他一日遊活動中報名，無法進行候補！';
			  Return
		 END -- END of 檢查工號是否已報名其他一日遊

		 IF (EXISTS (SELECT * FROM  [enterprise_tempOdt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='W1'))
		 BEGIN
		      ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在其他一日遊活動中候補，無法再候補！';
			  Return
		 END -- END of 檢查工號是否已候補其他一日遊

	   END -- END of 當有工號時 		 
	   ELSE
	   BEGIN
	     IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一身分證號' + @sid + ' 已在該活動中報名，無法進行候補！';
			  Return
		 END -- END of 檢查此身分證號是否已報名此活動

		 IF (EXISTS (SELECT * FROM  [enterprise_tempOdt] WHERE  [SID] = @sid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一身分證號' + @sid + ' 已在該活動中候補，無法再候補！';
			  Return
		 END -- END of 檢查身分證是否已候補此活動

		 --IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE [SID] = @sid AND LEFT([OrderID],2) ='M1'))
		 --BEGIN
		 --     ROLLBACK TRAN		   	       
			--  SELECT @result = '此一身分證號' + @sid + ' 已在其他一日遊活動中報名，無法進行候補！';
			--  Return
		 --END -- END of 檢查身分證是否已報名其他一日遊

		 --IF (EXISTS (SELECT * FROM  [enterprise_tempOdt] WHERE  [SID] = @sid AND LEFT([OrderID],2) ='W2'))
		 --BEGIN
			--  ROLLBACK TRAN		   	       
			--  SELECT @result = '此一身分證號' + @sid + ' 已在其他一日遊活動中候補，無法再候補！';
			--  Return
		 --END -- END of 檢查身分證是否已候補其他一日遊

	   END -- END of 當沒有工號時檢查身分證	    
		
	   SET @count = @count + 1;
	   SET @num = @num + 1; -- 參加總人數
	   
	   Fetch Next From CUR INTO @actid, @sid, @empid
	  END
     CLOSE CUR 
	 DEALLOCATE CUR
    
	SET @count =0;
    INSERT INTO [enterprise_tempOd]
	(
	  [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],
      [TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],
      [CreateDay],[FieldInt1]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
	)
    SELECT 
     @TrueID, b.[Name], b.[Tel1], b.[Tel2], b.[Cell1], b.[cell2], b.[Fax], b.[Address], b.[Email], b.[TotalPrice],0,0,0, b.[Comment], b.[Source], b.[Company], GETDATE(), @num
    FROM @ORDERLIST AS b
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result ='很抱歉服務器發生錯誤（發生於候補主單），目前無法進行候補！請稍後再嘗試。'
	  Return
	 END
	 
    Declare POINTER CURSOR FOR
    SELECT 
     t.[ActID], t.[ActName], t.[Name], t.[SID], t.[EmpID], t.[DOB], t.[Sex], t.[Cell], t.[Email], t.[Comment], t.[Price], t.[IsVeg]
    FROM @DETAILLIST AS t
    OPEN POINTER 
	-- 取出第一筆資料  
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

	While @@FETCH_STATUS = 0
    BEGIN    
    BEGIN TRY
		SET @count = @count + 1;
    	INSERT INTO [enterprise_tempOdt]
		(
	 	  [OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Price],[Comment],[IsVeg]
		)
		VALUES
		(
	  	  @TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @price, @cmt, @veg
    	)
    END TRY
	BEGIN CATCH  
	  ROLLBACK TRAN 
	  SELECT @result = '加入第' + Convert(nvarchar(10),@count) + '位參加人資料時發生錯誤：' + ERROR_MESSAGE();      
      Return
	END CATCH
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '加入第' + Convert(nvarchar(10),@count) + '位參加人資料時（' + @name + '）發生錯誤！目前無法進行候補！請稍後再嘗試。' + ERROR_MESSAGE();
	  Return
	 END	
	
    -- 存入成功後再取下一筆資料
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

  END
  CLOSE POINTER 
  DEALLOCATE POINTER 

  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Pay_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Pay_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
	 DECLARE @totalRow AS INT;
	 SET @totalRow = 0;
	 -- 取得資料 --
	 WITH NTE AS (
		SELECT 
		p.[OrderID],
		o.[Name],
		o.[TotalPrice] AS [Payable],
		o.[Comment] AS [MainCmt],
		p.[Name] AS [PayName],
		p.[Tel],p.[Cell],
		p.[TotalPrice] AS [ActualPay],
		p.[PayType],p.[Account],p.[Comment],p.[PayDay]	          
		FROM [enterprise_wt_Pay] AS p 
		INNER JOIN 
		[enterprise_Od] AS o
		ON
		p.[OrderID] = o.[OrderID]
		WHERE (@Filter IS NULL OR 
			CASE 
			  WHEN @FilterBy='All' THEN p.[OrderID]
			  WHEN @FilterBy='Oid' THEN p.[OrderID]
			  WHEN @FilterBy='Name' THEN p.[Name]
			  WHEN @FilterBy='Acct' THEN CONVERT(NVARCHAR,p.[Account])
			END 
			Like @Filter + '%') 
	),
	CTE AS (
		SELECT t.[ActName], t.[ActID], m.[OrderID],m.[Name],m.[PayName],m.[Payable],m.[ActualPay],m.[Tel],m.[Cell],m.[PayType],m.[Account],m.[MainCmt],m.[Comment],m.[PayDay]	  
		FROM NTE AS m 
		INNER JOIN 
		[enterprise_Odt] AS t 
		ON 
		m.[OrderID] = t.[OrderID]
	),
	Final AS (
		SELECT DISTINCT [ActName],[ActID],[OrderID],[Name],[PayName],[Payable],[ActualPay],[Tel],[Cell],[PayType],[Account],[MainCmt],[Comment],[PayDay]
		FROM CTE 
	),
	Paging AS (
		SELECT ROW_NUMBER() OVER ( ORDER BY [PayDay] DESC) AS [RowNum],
		[ActID],[ActName], [OrderID],[Name],[PayName],[Payable],[ActualPay],[Tel],[Cell],[PayType],[Account],[MainCmt],[Comment],[PayDay]
		FROM Final 
	)
	SELECT [ActID],[ActName], [OrderID],[Name],[PayName],[Payable],[ActualPay],[Tel],[Cell],[PayType],[Account],[MainCmt],[Comment],[PayDay]
	FROM Paging
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND  ([RowNum] <= @PageSize * @PageNumber )
	ORDER BY [RowNum];

	-- 取得資料總數 --
	;WITH CNT AS
    (
      SELECT [OrderID] FROM [enterprise_wt_Pay] WHERE	
	  (@Filter IS NULL OR 
		CASE 
		  WHEN @FilterBy='All' THEN [OrderID]
		  WHEN @FilterBy='Oid' THEN [OrderID]
		  WHEN @FilterBy='Name' THEN [Name]
		  WHEN @FilterBy='Acct' THEN CONVERT(NVARCHAR, [Account])
		END 
		Like @Filter + '%'
	  ) 		
    )
    SELECT @totalRow = COUNT(*) OVER() FROM CNT 

	RETURN @totalRow;

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Pay_Report]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Pay_Report] 
AS
BEGIN	
	 -- 取得資料 --
	 WITH NTE AS (
		SELECT 
		p.[OrderID],
		o.[Name],
		o.[TotalPrice] AS [Payable],
		o.[Comment] AS [MainCmt],
		p.[Name] AS [PayName],
		p.[Tel],p.[Cell],
		p.[TotalPrice] AS [ActualPay],
		p.[PayType],p.[Account],p.[Comment],p.[PayDay]	          
		FROM [enterprise_wt_Pay] AS p 
		INNER JOIN 
		[enterprise_Od] AS o
		ON
		p.[OrderID] = o.[OrderID]
	),
	CTE AS (
		SELECT t.[ActName], t.[ActID],m.[OrderID],m.[Name],m.[PayName],m.[Payable],m.[ActualPay],m.[Tel],m.[Cell],m.[PayType],m.[Account],m.[MainCmt],m.[Comment],m.[PayDay]	  
		FROM NTE AS m 
		INNER JOIN 
		[enterprise_Odt] AS t 
		ON 
		m.[OrderID] = t.[OrderID]
	)
	SELECT DISTINCT [ActName], [ActID],[OrderID],[Name],[PayName],[Payable],[ActualPay],[Tel],[Cell],[PayType],[Account],[MainCmt],[Comment],[PayDay] FROM CTE 

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Payment]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Payment] 
@PayLIST AS dbo.mcp_sw_pay_tbl READONLY,
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN	

    Declare @ID nvarchar(15)
    Declare @name nvarchar(50)
	Declare @tel nvarchar(20)
	Declare @cel nvarchar(20)
	Declare @price int
	Declare @cmt nvarchar(256)
	Declare @type nvarchar(20)
	Declare @acctno int
	Declare @payday datetime	
	Declare @realPrice int

	SET @realPrice = 0 ;

	SELECT 
	@ID=[OrderID],
	@name=[Name],
	@tel=[Tel],
	@cel=[Cell],
    @price=[TotalPrice],
	@cmt=[Comment],
	@type=[PayType],
	@acctno=[Account],
	@payday=[PayDay] 	
    FROM 
	@PayLIST AS b

	-- 交易開始
    BEGIN TRAN

	IF @Action = 'Add'
	BEGIN
	  SELECT @realPrice = COUNT(*) FROM [enterprise_od] WHERE [OrderID]= @ID
	  
	  IF @realPrice <=0
	  BEGIN
	    ROLLBACK TRAN
		SELECT @result = '此一報名編號不存在 ' + @ID
		RETURN
	  END

	  SELECT @realPrice = [TotalPrice] FROM [enterprise_od] WHERE [OrderID]= @ID
	  
	 -- IF @realPrice <=0
	 -- BEGIN
	 --   ROLLBACK TRAN
		--SELECT @result = '付款金額不正確，您的應付金額應為 ' + CONVERT(nvarchar, @realPrice)
		--RETURN
	 -- END
	  
	  INSERT INTO [enterprise_wt_Pay] ([OrderID],[Name],[Tel],[Cell],[TotalPrice],[PayType],[Account],[Comment],[PayDay]) 
	  VALUES
	  (@ID,@name,@tel,@cel,@price,@type,@acctno,@cmt,GETDATE())
	  
	  IF @@ERROR <> 0 
	  BEGIN
	    ROLLBACK TRAN	
	    SELECT @result = '嘗試新增付款資料時發生錯誤！程序終止！' + ERROR_MESSAGE();
	    RETURN
	  END
	  
	  -- 更新報名主表資料 --
	  UPDATE [enterprise_od] SET [IsPaid] = 1  WHERE [OrderID]= @ID	  
	  IF @@ERROR <> 0 
	  BEGIN
	    ROLLBACK TRAN	  
	    SELECT @result = '嘗試更新已付款時發生錯誤！程序終止！' + ERROR_MESSAGE()
	    RETURN
	  END


	END

	IF @Action = 'Update'
	BEGIN
	  UPDATE [enterprise_wt_Pay] SET 
	  [Name]=@name,
	  [Tel]=@tel,
	  [Cell]=@cel,
	  [TotalPrice]=@price,
	  [PayType]=@type,
	  [Account]=@acctno,
	  [Comment]=@cmt,
	  [PayDay]=@payday	
	  WHERE [OrderID] = @ID
	  
	  IF @@ERROR <> 0 
	  BEGIN
	    ROLLBACK TRAN	
	    SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE()
	    RETURN
	  END
	END

	IF @Action = 'Delete'
	BEGIN
	  DELETE FROM [enterprise_wt_Pay] WHERE [OrderID] = @ID
	  IF @@ERROR <> 0 
	  BEGIN
	    ROLLBACK TRAN	
	    SELECT @result = '嘗試刪除明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE()
	    RETURN
	  END
	  
	  -- 更新報名主表資料 --  
	  UPDATE [enterprise_od] SET [IsPaid] = 0  WHERE [OrderID]= @ID
	  IF @@ERROR <> 0 
	  BEGIN
	    ROLLBACK TRAN	
	    SELECT @result = '嘗試更新已付款時發生錯誤！程序終止！' + ERROR_MESSAGE()
	    RETURN
	  END
	END

	-- 完成交易
	COMMIT TRAN

	SELECT @result = 'OK';
	RETURN   

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Personal_Od_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[enterprise_wt_Personal_Od_Get] 
@EID	NVARCHAR(10),
@SSID	NVARCHAR(10)
AS
BEGIN
	WITH CTE AS (
	SELECT OrderID FROM [dbo].[enterprise_Odt] WHERE EmpID = @EID AND [SID] = @SSID
	)
	SELECT 
	o.OrderID, 
	o.Name AS [Leader], 
	o.Tel1 AS [Phone], 
	o.Tel2 AS [Room], 
	o.email, 
	o.TotalPrice, 
	o.Comment,
	t.ActID, 
	t.ActName, 
	t.Name AS [Joiner], 
	t.[SID], 
	t.EmpID, 
	t.DOB, 
	t.Sex, 
	t.Cell, 
	t.Email AS [PersonMail], 
	t.Size, 
	t.IsVeg, 
	t.price, 
	t.Comment as [Summary],
	t.[Seqno],
	a.[StartDay],
	a.[RegExpDay]
	FROM CTE AS MJ 
	LEFT JOIN 
	[dbo].[enterprise_Odt] AS t 
	ON
	MJ.OrderID = t.OrderID
	LEFT JOIN 
	[dbo].[enterprise_Od] AS o
	ON
	MJ.OrderID = o.OrderID
	LEFT JOIN
	[dbo].[enterprise_Act] AS a
	ON
	t.[ActID] = a.[ActID]
	ORDER BY o.OrderID
END


GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Personal_Odt_Update]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Personal_Odt_Update] 
 @ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
 @DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
 @result nvarchar(150) OUTPUT
AS
BEGIN	
    Declare @Seqno int
    --Declare @ID nvarchar(15)
	Declare @oid nvarchar(15)
	Declare @sid nvarchar(15)
    Declare @name nvarchar(50)
	Declare @eid nvarchar(15)
    Declare @dob smalldatetime	
	Declare @cell nvarchar(20)	
	Declare @email nvarchar(256)
	Declare @price int
	Declare @total int	
	Declare @sex nvarchar(1)
	Declare @veg bit
	Declare @cmt nvarchar(255)

	Declare @count int	
	SET @count = 0;
	SET @total =0;

    BEGIN TRAN

	  SELECT @oid = a.[OrderID] FROM @ORDERLIST AS a

	  ---- 第一次回圈 檢查員工 ----
	  DECLARE CUR CURSOR FOR
	  SELECT d.[SID], d.[EmpID] FROM @DETAILLIST AS d 
	  OPEN CUR 
	  FETCH NEXT FROM CUR INTO @sid, @eid
	  WHILE @@FETCH_STATUS = 0
	  BEGIN
	    IF(LEN(@eid)>0)
		BEGIN
		  IF (NOT EXISTS (SELECT * FROM [dbo].[enterprise_wt_employee] WHERE [SID] = RIGHT(@sid,4) AND [EID] = @eid ))
		  BEGIN
			ROLLBACK TRAN		   	       
			SELECT @result = '查無此一工號' + @eid + '，請重新輸入！';
			Return
		  END -- END IF

		  ---- 一工號只能報一次一日遊與一次二日遊 ----	
		  IF (EXISTS (SELECT * FROM [dbo].[enterprise_Odt] WHERE [EmpID] = @eid AND [OrderID] <>  @oid AND LEFT([OrderID],2) = LEFT(@oid,2)))
		  BEGIN
			ROLLBACK TRAN		   	       
			SELECT @result = '此一工號 ' + @eid + ' 已經參加另一' + REPLACE(LEFT(@oid,2), 'M', '') + '日遊活動了，請重新輸入！';
			Return
		  END -- END IF

		END -- END IF
	  FETCH NEXT FROM CUR INTO @sid, @eid
	  END -- END WHILE
	  CLOSE CUR 
	  DEALLOCATE CUR

	  ---- 第二次回圈 更新資料 ----
	  DECLARE POINTER CURSOR FOR
      SELECT 
       t.[SeqNo], t.[Name], t.[SID], t.[EmpID], t.[DOB], t.[Sex], t.[Cell], t.[Email], t.[Comment], t.[Price], t.[IsVeg]
      FROM @DETAILLIST AS t
      OPEN POINTER 
	  FETCH NEXT FROM POINTER INTO @Seqno, @name, @sid, @eid, @dob, @sex, @cell, @email, @cmt, @price, @veg
	  WHILE @@FETCH_STATUS = 0
      BEGIN  
		BEGIN TRY
			SET @count = @count + 1;
			SET @total = @total +  @price;

			UPDATE [dbo].[enterprise_Odt] SET 
			[Name] = @name, [SID] = @sid, [EmpID]= @eid, [DOB] = @dob, [Sex]= @sex, [Cell] = @cell, [Email] = @email, [Price] = @price, [IsVeg] = @veg
    		WHERE [Seqno] = @Seqno
		END TRY -- // END TRY
		BEGIN CATCH  
		  ROLLBACK TRAN 
		  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時發生錯誤：' + ERROR_MESSAGE();      
		  Return
		END CATCH
	  
	  FETCH NEXT FROM POINTER INTO @Seqno, @name, @sid, @eid, @dob, @sex, @cell, @email, @cmt, @price, @veg
	  END  -- END WHILE
	  CLOSE POINTER 
	  DEALLOCATE POINTER

	  UPDATE [dbo].[enterprise_Od] SET [TotalPrice] = @total WHERE [OrderID] = @oid;     

    -- 完成交易
	COMMIT TRAN 
	--SELECT @result = 'OK' + @oid + CAST(@total AS VARCHAR);
	SELECT @result = 'OK' + @oid ;
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Personal_Order_Cancel]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Personal_Order_Cancel] 
@OrderID  nvarchar(12),
@result nvarchar(50) OUTPUT
AS
BEGIN	
    DECLARE @actID nvarchar(12) ;
	DECLARE @roomType nvarchar(2) ;
	DECLARE @roomCnt int ;
	DECLARE @capicaty int ;
	SET @roomCnt = 0;
	SET @capicaty =0;

    BEGIN TRAN
		---- 二日遊 ----
		IF LEFT(@OrderID, 2) = 'M2'
		BEGIN
		  ---- 依單號找房型 ----
		  SELECT @roomType = Tel2 FROM [enterprise_Od] WHERE OrderID = @OrderID;
		  
		  ---- 取得房數 ----
		  SET @roomCnt = CAST(LEFT(@roomType, 1) AS INT);
		  
		  ---- 取得人數 ----
		  SELECT @capicaty = COUNT(*) FROM [enterprise_Odt] WHERE OrderID = @OrderID;
		 
		  ---- 取得行程編號 ----
		  SELECT TOP 1 @actID = ActID FROM [enterprise_Odt] WHERE OrderID = @OrderID;
		 
		  ---- 刪除單號 ----
		  DELETE FROM [enterprise_Od] WHERE OrderID = @OrderID;
		  DELETE FROM [enterprise_Odt] WHERE OrderID = @OrderID;
		  IF @@ERROR <> 0 
		  BEGIN
		    ROLLBACK TRAN	  
		    SELECT @result = '取消報名時發生錯誤！程序終止！' + ERROR_MESSAGE();
		    Return
		  END
		 
		  ---- 更新活動主表 ----
		  IF (@roomCnt = 2)
		  BEGIN
			UPDATE [enterprise_Act] SET Capacity = Capacity + @capicaty, FieldInt1 = FieldInt1 + 1 WHERE ActID = @actID
			IF @@ERROR <> 0 
		    BEGIN
		      ROLLBACK TRAN	  
		      SELECT @result = '更新主表時發生錯誤！程序終止！' + ERROR_MESSAGE();
		      Return
		    END
		  END

		  IF (@roomCnt = 4)
          BEGIN
            UPDATE [enterprise_Act] SET Capacity = Capacity + @capicaty, FieldInt2 = FieldInt2 + 1 WHERE ActID = @actID
			IF @@ERROR <> 0 
		    BEGIN
		      ROLLBACK TRAN	  
		      SELECT @result = '更新主表時發生錯誤！程序終止！' + ERROR_MESSAGE();
		      Return
		    END
          END
		END

		---- 一日遊 ----
		IF LEFT(@OrderID, 2) = 'M1'
		BEGIN
		  ---- 取得人數 ----
		  SELECT @capicaty = COUNT(*) FROM [enterprise_Odt] WHERE OrderID = @OrderID;

		  ---- 取得行程編號 ----
		  SELECT TOP 1 @actID = ActID FROM [enterprise_Odt] WHERE OrderID = @OrderID;

		  ---- 刪除單號 ----
		  DELETE FROM [enterprise_Od] WHERE OrderID = @OrderID;
		  DELETE FROM [enterprise_Odt] WHERE OrderID = @OrderID;
		  IF @@ERROR <> 0 
		  BEGIN
		    ROLLBACK TRAN	  
		    SELECT @result = '取消報名時發生錯誤！程序終止！' + ERROR_MESSAGE();
		    Return
		  END

		  ---- 更新活動主表 ---
		  UPDATE [enterprise_Act] SET Capacity = Capacity + @capicaty WHERE ActID = @actID
		  IF @@ERROR <> 0 
		    BEGIN
		      ROLLBACK TRAN	  
		      SELECT @result = '更新主表時發生錯誤！程序終止！' + ERROR_MESSAGE();
		      Return
		    END
		END

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Personal_Waiting_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[enterprise_wt_Personal_Waiting_Get] 
@EID	NVARCHAR(10),
@SSID	NVARCHAR(10)
AS
BEGIN
	WITH CTE AS (
	SELECT OrderID FROM [dbo].[enterprise_tempOdt] WHERE EmpID = @EID AND [SID] = @SSID
	)
	SELECT 
	o.OrderID, 
	o.Name AS [Leader], 
	o.Tel1 AS [Phone], 
	o.Tel2 AS [Room], 
	o.email, 
	o.TotalPrice, 
	o.Comment,
	t.ActID, 
	t.ActName, 
	t.Name AS [Joiner], 
	t.[SID], 
	t.EmpID, 
	t.DOB, 
	t.Sex, 
	t.Cell, 
	t.Email AS [PersonMail], 
	t.Size, 
	t.IsVeg, 
	t.price, 
	t.Comment as [Summary],
	t.[Seqno],
	a.[StartDay],
	a.[RegExpDay]
	FROM CTE AS MJ 
	LEFT JOIN 
	[dbo].[enterprise_tempOdt] AS t 
	ON
	MJ.OrderID = t.OrderID
	LEFT JOIN 
	[dbo].[enterprise_tempOd] AS o
	ON
	MJ.OrderID = o.OrderID
	LEFT JOIN
	[dbo].[enterprise_Act] AS a
	ON
	t.[ActID] = a.[ActID]
	ORDER BY o.OrderID
END


GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Personal_Waiting_Update]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Personal_Waiting_Update] 
 @ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
 @DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
 @result nvarchar(150) OUTPUT
AS
BEGIN	
    Declare @Seqno int
    --Declare @ID nvarchar(15)
	Declare @oid nvarchar(15)
	Declare @sid nvarchar(15)
    Declare @name nvarchar(50)
	Declare @eid nvarchar(15)
    Declare @dob smalldatetime	
	Declare @cell nvarchar(20)	
	Declare @email nvarchar(256)
	Declare @price int
	Declare @total int	
	Declare @sex nvarchar(1)
	Declare @veg bit
	Declare @cmt nvarchar(255)

	Declare @count int	
	SET @count = 0;
	SET @total =0;

    BEGIN TRAN

	  SELECT @oid = a.[OrderID] FROM @ORDERLIST AS a

	  ---- 第一次回圈 檢查員工 ----
	  DECLARE CUR CURSOR FOR
	  SELECT d.[SID], d.[EmpID] FROM @DETAILLIST AS d 
	  OPEN CUR 
	  FETCH NEXT FROM CUR INTO @sid, @eid
	  WHILE @@FETCH_STATUS = 0
	  BEGIN
	    IF(LEN(@eid)>0)
		BEGIN
		  IF (NOT EXISTS (SELECT * FROM [dbo].[enterprise_wt_employee] WHERE [SID] = RIGHT(@sid,4) AND [EID] = @eid ))
		  BEGIN
			ROLLBACK TRAN		   	       
			SELECT @result = '查無此一工號' + @eid + '，請重新輸入！';
			RETURN
		  END -- END IF

		  ---- 一工號只能候補一次一日遊與一次二日遊 ----	
		  IF (EXISTS (SELECT * FROM [dbo].[enterprise_tempOdt] WHERE [EmpID] = @eid AND [OrderID] <>  @oid AND LEFT([OrderID],2) = LEFT(@oid,2)))
		  BEGIN
			ROLLBACK TRAN		   	       
			SELECT @result = '此一工號 ' + @eid + ' 已經候補另一' + REPLACE(LEFT(@oid,2), 'W', '') + '日遊活動了，請重新輸入！';
			RETURN
		  END -- END IF

		END -- END IF
	  FETCH NEXT FROM CUR INTO @sid, @eid
	  END -- END WHILE
	  CLOSE CUR 
	  DEALLOCATE CUR

	  ---- 第二次回圈 更新資料 ----
	  DECLARE POINTER CURSOR FOR
      SELECT 
       t.[SeqNo], t.[Name], t.[SID], t.[EmpID], t.[DOB], t.[Sex], t.[Cell], t.[Email], t.[Comment], t.[Price], t.[IsVeg]
      FROM @DETAILLIST AS t
      OPEN POINTER 
	  FETCH NEXT FROM POINTER INTO @Seqno, @name, @sid, @eid, @dob, @sex, @cell, @email, @cmt, @price, @veg
	  WHILE @@FETCH_STATUS = 0
      BEGIN  
		BEGIN TRY
			SET @count = @count + 1;
			SET @total = @total +  @price;

			UPDATE [dbo].[enterprise_tempOdt] SET 
			[Name] = @name, [SID] = @sid, [EmpID]= @eid, [DOB] = @dob, [Sex]= @sex, [Cell] = @cell, [Email] = @email, [Price] = @price, [IsVeg] = @veg
    		WHERE [Seqno] = @Seqno
		END TRY -- // END TRY
		BEGIN CATCH  
		  ROLLBACK TRAN 
		  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時發生錯誤：' + ERROR_MESSAGE();      
		  RETURN
		END CATCH
	  
	  FETCH NEXT FROM POINTER INTO @Seqno, @name, @sid, @eid, @dob, @sex, @cell, @email, @cmt, @price, @veg
	  END  -- END WHILE
	  CLOSE POINTER 
	  DEALLOCATE POINTER

	  UPDATE [dbo].[enterprise_tempOd] SET [TotalPrice] = @total WHERE [OrderID] = @oid;     

    -- 完成交易
	COMMIT TRAN 
	--SELECT @result = 'OK' + @oid + CAST(@total AS VARCHAR);
	SELECT @result = 'OK' + @oid ;
	RETURN   


END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_TwoDays_Od_Add]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_TwoDays_Od_Add] 
	-- Add the parameters for the stored procedure here
    @ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
    @DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
    @result nvarchar(150) OUTPUT
AS
BEGIN
    Declare @preID nvarchar(10)	
	Declare @room nvarchar(2) 
    Declare @actid nvarchar(15) 
	Declare @actname nvarchar(50)
    Declare @name nvarchar(50)
    Declare @sid nvarchar(20)
    Declare @empid nvarchar(20)
    Declare @dob nvarchar(20)
    Declare @sax nvarchar(1)
    Declare @cell nvarchar(20)
    Declare @email nvarchar(256)    
    Declare @cmt nvarchar(255)  
	Declare @price int
	Declare @veg bit

    Declare @TrueID nvarchar(12)
    Declare @num int
	Declare @roomnum int
	Declare @count int

	
	SET @num =0;
	SET @roomnum =0;
	SET @count=0;
	SET @price=0;
    
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
    -- 交易開始
    BEGIN TRAN
   
    SELECT @preID = a.[OrderID], @room = a.[Tel2] FROM @ORDERLIST AS a
    
    -- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [enterprise_Od] WITH (UPDLOCK, HOLDLOCK)
    WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC

     -- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @preID  + '001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  	SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
      END
      
     
    IF(NOT @TrueID is NULL)
      BEGIN
		IF (EXISTS (SELECT * FROM  [enterprise_Od] WHERE  [OrderID] = @TrueID ))
		BEGIN
		  ROLLBACK TRAN		   	       
		    SELECT @result = '單號重覆，程序終止！';
		  Return
      END
	END

	SET @num =0;
	 -- 檢查是否有重複報名
	 Declare CUR CURSOR FOR
     SELECT d.[ActID], d.[SID], d.[EmpID] FROM @DETAILLIST AS d
     OPEN CUR 
	 Fetch Next From CUR INTO @actid, @sid, @empid
	 While @@FETCH_STATUS = 0
	  BEGIN
	   SET @empid = LTRIM(RTRIM(@empid));

	   IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
	   BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行報名！';
		  Return
       END

	   IF(LEN(@empid)>0)
	   BEGIN
	     IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在該活動中報名，請重新輸入！';
			  Return
		 END
		 ELSE
		 BEGIN
		   IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='M2'))
		   BEGIN
			ROLLBACK TRAN		   	       
			SELECT @result = '此一工號' + @empid + ' 已在該系列其他活動中報名，請重新輸入！';
			Return
		   END
		 END		 
	   END		 

	   IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
	   BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一身分證號' + @sid + ' 已在該活動中報名，請重新輸入！';
		  Return
	   END

		--IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND LEFT([OrderID],1) ='M'))
		--BEGIN
		--	  ROLLBACK TRAN		   	       
		--	  SELECT @result = '此一身分證號' + @sid + ' 已在該系列活動中報名，請重新輸入！';
		--	  Return
		--END
		
		 SET @count = @count + 1;
		Fetch Next From CUR INTO @actid, @sid, @empid
	  END
     CLOSE CUR 
	 DEALLOCATE CUR
    
	-- 檢查房數是否足夠
	IF(LEFT(@room,1)='2')
	BEGIN
	  SELECT @roomnum = [FieldInt1] FROM [enterprise_Act] WHERE [ActID] = @actid
	END

	IF(LEFT(@room,1)='4')
	BEGIN
	  SELECT @roomnum = [FieldInt2] FROM [enterprise_Act] WHERE [ActID] = @actid
	END

	IF @roomnum <=0 
	BEGIN
	  ROLLBACK TRAN		   	       
	  SELECT @result = '119';
	  Return
	END
	
	-- 檢查數量是否足夠
	SELECT @num = [Capacity] FROM [enterprise_Act] WHERE [ActID] = @actid
	
	IF @count > @num
	 BEGIN
	  ROLLBACK TRAN		   	       
	  SELECT @result = '110';
	  Return
	 END

	-- 計算剩餘數量
	SET @num = @num - @count;

	SET @count =0;
    INSERT INTO [enterprise_Od]
	(
	  [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],
      [TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],
      [CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
	)
    SELECT 
     @TrueID, b.[Name], b.[Tel1], b.[Tel2], b.[Cell1], b.[cell2], b.[Fax],     
     b.[Address], b.[Email], b.[TotalPrice],0,0,0, b.[Comment], b.[Source], b.[Company],GETDATE()
    FROM @ORDERLIST AS b
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result ='寫入主表單時發生錯誤，程序終止！'
	  Return
	 END
	 
    Declare POINTER CURSOR FOR
    SELECT 
     t.[ActID], t.[ActName], t.[Name], t.[SID], t.[EmpID], t.[DOB], t.[Sex], t.[Cell], t.[Email], t.[Comment], t.[Price], t.[IsVeg]
    FROM @DETAILLIST AS t
    OPEN POINTER 
	-- 取出第一筆資料  
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

	While @@FETCH_STATUS = 0
    BEGIN    
    BEGIN TRY
		SET @count = @count + 1;
    	INSERT INTO [enterprise_Odt]
		(
	 	  [OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Price],[Comment],[IsVeg]
		  --[Location],[TempField],[IsVeg],[IsOld],[IsEarly],[IsDiscount],[Size]
		)
		VALUES
		(
	  	  @TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @price, @cmt, @veg
    	)
    END TRY
	BEGIN CATCH  
	  ROLLBACK TRAN 
	  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時發生錯誤：' + ERROR_MESSAGE();      
      Return
	END CATCH
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時(' + @name + ')發生錯誤！程序終止！' + ERROR_MESSAGE();
	  Return
	 END	
	
    -- 存入成功後再取下一筆資料
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

  END
  CLOSE POINTER 
  DEALLOCATE POINTER 
  
  -- 更新數量
  UPDATE [enterprise_Act] SET [Capacity] = @num WHERE [ActID] = @actid;  

  SET @roomnum = @roomnum -1;

  IF @roomnum < 0
  BEGIN
   SET @roomnum = 0;
  END

  IF(LEFT(@room,1)='2')
  BEGIN
	  UPDATE [enterprise_Act] SET [FieldInt1] = @roomnum FROM [enterprise_Act] WHERE [ActID] = @actid
  END

  IF(LEFT(@room,1)='4')
  BEGIN
	  UPDATE [enterprise_Act] SET [FieldInt2] = @roomnum FROM [enterprise_Act] WHERE [ActID] = @actid
  END

  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_TwoDays_Od_Waiting_Add]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_TwoDays_Od_Waiting_Add] 
	-- Add the parameters for the stored procedure here
    @ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
    @DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
    @result nvarchar(150) OUTPUT
AS
BEGIN
    Declare @preID nvarchar(10)	
	Declare @room nvarchar(2) 
    Declare @actid nvarchar(15) 
	Declare @actname nvarchar(50)
    Declare @name nvarchar(50)
    Declare @sid nvarchar(20)
    Declare @empid nvarchar(20)
    Declare @dob nvarchar(20)
    Declare @sax nvarchar(1)
    Declare @cell nvarchar(20)
    Declare @email nvarchar(256)    
    Declare @cmt nvarchar(255)  
	Declare @price int
	Declare @veg bit

    Declare @TrueID nvarchar(12)
    Declare @num int
	Declare @roomnum int
	Declare @count int

	
	SET @num =0;
	SET @roomnum =0;
	SET @count=0;
	SET @price=0;
    
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
    -- 交易開始
    BEGIN TRAN
   
    SELECT @preID = a.[OrderID], @room = a.[Tel2] FROM @ORDERLIST AS a
    
    -- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [enterprise_tempOd] WITH (UPDLOCK, HOLDLOCK)
    WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC

     -- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @preID  + '001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  	SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
      END
      
     
    IF(NOT @TrueID is NULL)
      BEGIN
		IF (EXISTS (SELECT * FROM  [enterprise_tempOd] WHERE  [OrderID] = @TrueID ))
		BEGIN
		  ROLLBACK TRAN		   	       
		    SELECT @result = '單號重覆，候補終止！';
		  Return
      END
	END

	SET @num =0;
	 -- 檢查是否有重複報名
	 Declare CUR CURSOR FOR
     SELECT d.[ActID], d.[SID], d.[EmpID] FROM @DETAILLIST AS d
     OPEN CUR 
	 Fetch Next From CUR INTO @actid, @sid, @empid
	 While @@FETCH_STATUS = 0
	  BEGIN
	   SET @empid = LTRIM(RTRIM(@empid));

	   IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
	   BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行候補！';
		  Return
       END

	   IF(LEN(@empid)>0)
	   BEGIN
	     IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在該活動中報名，無法進行候補！';
			  Return
		 END -- END of 檢查工號是否已報名此活動

	     IF (EXISTS (SELECT * FROM  [enterprise_tempOdt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在該活動中候補，無法再候補！';
			  Return
		 END -- END of 檢查工號是否已候補此活動

		 IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='M2'))
		 BEGIN
		      ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在其他二日遊活動中報名，無法進行候補！';
			  Return
		 END -- END of 檢查工號是否已報名其他二日遊

		 IF (EXISTS (SELECT * FROM  [enterprise_tempOdt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='W2'))
		 BEGIN
		      ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @empid + ' 已在其他二日遊活動中候補，無法再候補！';
			  Return
		 END -- END of 檢查工號是否已候補其他二日遊

	   END -- END of 當工號不為空值時 		 
	   ELSE
	   BEGIN
	     IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一身分證號' + @sid + ' 已在該活動中報名，無法進行候補！';
			  Return
		 END -- END of 檢查此身分證號是否已報名此活動

		 IF (EXISTS (SELECT * FROM  [enterprise_tempOdt] WHERE  [SID] = @sid AND [ActID] = @actid))
		 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一身分證號' + @sid + ' 已在該活動中候補，無法再候補！';
			  Return
		 END -- END of 檢查身分證是否已候補此活動

		 --IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE [SID] = @sid AND LEFT([OrderID],2) ='M2'))
		 --BEGIN
		 --     ROLLBACK TRAN		   	       
			--  SELECT @result = '此一身分證號' + @sid + ' 已在其他二日遊活動中報名，無法進行候補！';
			--  Return
		 --END -- END of 檢查身分證是否已報名其他二日遊

		 --IF (EXISTS (SELECT * FROM  [enterprise_tempOdt] WHERE  [SID] = @sid AND LEFT([OrderID],2) ='W2'))
		 --BEGIN
			--  ROLLBACK TRAN		   	       
			--  SELECT @result = '此一身分證號' + @sid + ' 已在其他二日遊活動中候補，無法再候補！';
			--  Return
		 --END -- END of 檢查身分證是否已候補其他二日遊


	   END -- END of 當沒有工號時檢查身分證
		
		SET @count = @count + 1;
		Fetch Next From CUR INTO @actid, @sid, @empid
	  END
     CLOSE CUR 
	 DEALLOCATE CUR
    
	SET @count =0;
    INSERT INTO [enterprise_tempOd]
	(
	  [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],
      [TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],
      [CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
	)
    SELECT 
     @TrueID, b.[Name], b.[Tel1], b.[Tel2], b.[Cell1], b.[cell2], b.[Fax], b.[Address], b.[Email], b.[TotalPrice],0,0,0, b.[Comment], b.[Source], b.[Company], GETDATE()
    FROM @ORDERLIST AS b
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result ='很抱歉服務器發生錯誤（發生於候補主單），目前無法進行候補！請稍後再嘗試。'
	  Return
	 END
	 
    Declare POINTER CURSOR FOR
    SELECT 
     t.[ActID], t.[ActName], t.[Name], t.[SID], t.[EmpID], t.[DOB], t.[Sex], t.[Cell], t.[Email], t.[Comment], t.[Price], t.[IsVeg]
    FROM @DETAILLIST AS t
    OPEN POINTER 
	-- 取出第一筆資料  
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

	While @@FETCH_STATUS = 0
    BEGIN    
    BEGIN TRY
		SET @count = @count + 1;
    	INSERT INTO [enterprise_tempOdt]
		(
	 	  [OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Price],[Comment],[IsVeg]
		)
		VALUES
		(
	  	  @TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @price, @cmt, @veg
    	)
    END TRY
	BEGIN CATCH  
	  ROLLBACK TRAN 
	  SELECT @result = '加入第' + Convert(nvarchar(10),@count) + '位參加人資料時發生錯誤：' + ERROR_MESSAGE();      
      Return
	END CATCH
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '加入第' + Convert(nvarchar(10),@count) + '位參加人資料時（' + @name + '）發生錯誤！目前無法進行候補！請稍後再嘗試。' + ERROR_MESSAGE();
	  Return
	 END	
	
    -- 存入成功後再取下一筆資料
	Fetch Next From POINTER INTO 
	@actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg

  END
  CLOSE POINTER 
  DEALLOCATE POINTER 

  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Waiting_Details]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Waiting_Details] 
@id nvarchar(12)
AS
BEGIN	

  SELECT [SeqNo],[OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],
  [Cell],[Email],[Size],[IsVeg],[IsOld],[IsDiscount],[Price],
  [Comment],[Location],[TempField] 
  FROM  [enterprise_tempOdt]                
  WHERE [OrderID] =  @id;  

END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Waiting_Od_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Waiting_Od_Modify] 
@ORDERLIST AS dbo.enterprise_wt_od_tbl READONLY,
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN	

    Declare @ID nvarchar(15)
    Declare @name nvarchar(50)
	Declare @tel nvarchar(20)
	Declare @cel nvarchar(20)
	Declare @tel2 nvarchar(20)
	Declare @cel2 nvarchar(20)
	Declare @fax nvarchar(20)
	Declare @address nvarchar(50)
	Declare @price int
	Declare @cmt nvarchar(256)
	Declare @source nvarchar(20)
	Declare @company nvarchar(50)
	Declare @email nvarchar(256)
	
	Declare @count int	
	Declare @actid nvarchar(20)
		
	SET @count = 0;

	SELECT 
	   @ID=[OrderID],
	   @name=[Name],
	   @tel=[Tel1],
	   @tel2=[Tel2],
	   @cel=[Cell1],
	   @cel2=[cell2],
	   @fax=[Fax],
	   @address=[Address],
	   @email=[Email],
       @price=[TotalPrice],
	   @cmt=[Comment],
	   @source=[Source],
	   @company=[Company] 	
    FROM @ORDERLIST AS b

	--SELECT @result = @ID + ',' + @name + ', ' + @cel; 
	--Return
/**/
	-- 交易開始
    BEGIN TRAN
    
	 IF @Action = 'Update' 
	  BEGIN
	    UPDATE [enterprise_tempOd] SET 
		[Name]=@name,[Tel1]=@tel,[Tel2]=@tel2,[Cell1]=@cel,[cell2]=@cel2,
	    [Fax]=@fax,[Address]=@address,[Email]=@email,[TotalPrice]=@price,
	    [Comment]=@cmt,[Source]=@source,[Company]=@company	   
		WHERE [OrderID] = @ID; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	   --SELECT TOP 1 @actid = [ActID] FROM [enterprise_tempOdt] WHERE [OrderID] = @ID;
	   --SELECT @count = COUNT(*) FROM [enterprise_Odt] WHERE [OrderID] = @ID;
	   
	   DELETE FROM [enterprise_tempOdt] WHERE [OrderID] = @ID;
	   IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

	    DELETE FROM [enterprise_tempOd] WHERE [OrderID] = @ID;     
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除主表資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END	

	  -- 更新數量  
  --    UPDATE [enterprise_Act] SET [Capacity] = [Capacity] + @count  WHERE [ActID] = @actid;
	 -- IF @@ERROR <> 0 
		--BEGIN
		--  ROLLBACK TRAN	  
		--  SELECT @result = '嘗試更新活動人數限制時發生錯誤！程序終止！' + ERROR_MESSAGE();
		--  Return
		--END

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Waiting_Odt_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Waiting_Odt_Modify] 
@DETAILLIST AS dbo.enterprise_wt_odt_tbl READONLY,
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN	
    Declare @Seqno int
    Declare @ID nvarchar(15)
	Declare @sid nvarchar(15)
    Declare @name nvarchar(50)
	Declare @eid nvarchar(15)
    Declare @dob smalldatetime	
	Declare @cel nvarchar(20)	
	Declare @email nvarchar(256)
	Declare @price int
	Declare @adjPrice int
	Declare @cmt nvarchar(256)
	Declare @actid nvarchar(15)
	Declare @actname nvarchar(50)
	Declare @sex nvarchar(1)

	Declare @count int	
	SET @count = 0;
	SET @adjPrice =0;

	SELECT 
	   @Seqno = [SeqNo],
	   @ID=[OrderID],
	   @name=[Name],
	   @sid=[SID],
	   @eid = [EmpID],
	   @dob = [DOB],
	   @cmt=[Comment],
	   @cel=[Cell],
	   @email=[Email],
	   @price=[Price],
	   @actid=[ActID],
	   @actname=[ActName]   
    FROM @DETAILLIST AS b

	-- 交易開始
    BEGIN TRAN

	 -- 取得目前金額 --
	 SELECT @adjPrice = [Price] FROM [enterprise_tempOdt] WHERE [SeqNo] = @Seqno;
    
	IF @Action = 'Add'
	BEGIN
	  IF(RIGHT(LEFT(@sid, 2),1) = '1')
	  BEGIN
	    SET @sex ='男'
	  END
	  ELSE
	  BEGIN
	    SET @sex ='女'
	  END

      INSERT INTO [enterprise_tempOdt] ([OrderID], [ActName], [ActID], [Name], [SID], [EmpID], [DOB], [Cell], [Email], [Price], [Comment], [Size], [IsVeg], [IsOld], [IsEarly], [IsDiscount], [Location], [Sex]) 
	  VALUES (@ID, @actname, @actid, @name, @sid, @eid, @dob, @cel, @email, @price, @cmt, 'L', 0, 0 , 0, 0, '', @sex);
	  IF @@ERROR <> 0 
	  BEGIN
		ROLLBACK TRAN	  
		SELECT @result = '新增明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		Return
	  END

	  -- 更新金額 --
		UPDATE [enterprise_tempOd] SET [TotalPrice] = [TotalPrice] +  @Price WHERE [OrderID] = @ID; 
		IF @@ERROR <> 0 
		BEGIN
		 ROLLBACK TRAN	  
		 SELECT @result = '嘗試更新主表金額時發生錯誤！程序終止！' + ERROR_MESSAGE();
		 Return
		END
	END

	 IF @Action = 'Update'   
	  BEGIN
	  SET @eid = RTRIM(LTRIM(@eid));
	  
	  IF(LEN(@eid)>0)
	   BEGIN
	     IF(@eid <> '000')
		 BEGIN
			SELECT @count = COUNT([EmpID]) FROM  [enterprise_tempOdt] WHERE  [EmpID] = @eid AND [ActID] = @actid;
			IF @count > 1
			 BEGIN
			  ROLLBACK TRAN		   	       
			  SELECT @result = '此一工號' + @eid + ' 已報名此一活動，請從新輸入！';
			  Return
			 END
		 END
	   END
	      
	   SELECT @count = COUNT([SID]) FROM  [enterprise_tempOdt] WHERE  [SID] = @sid AND [ActID] = @actid
	   IF @count > 1
		BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '此一身分證號' + @sid + ' 已報名此一活動，請從新輸入！';
		  Return
        END

		
		-- 調整金額 --
		IF(@adjPrice > 0)
		BEGIN
			SET @adjPrice = @price - @adjPrice;
		END

	    UPDATE [enterprise_tempOdt] SET 
		[Name]=@name,
		[SID] = @sid,
		[EmpID]= @eid,
		[DOB]=@dob,
		[Comment]=@cmt,
		[Cell]=@cel,
		[Email]=@email,
		[Price]=@price   
		WHERE [SeqNo] = @Seqno; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		
		-- 更新金額 --
		UPDATE [enterprise_tempOd] SET [TotalPrice] = [TotalPrice] +  @adjPrice WHERE [OrderID] = @ID; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新主表金額時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [enterprise_tempOdt] WHERE [SeqNo] = @Seqno;     
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		
		-- 更新金額 --
		UPDATE [enterprise_tempOd] SET [TotalPrice] = [TotalPrice] -  @adjPrice WHERE [OrderID] = @ID; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新主表金額時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

		-- 更新數量 --
  --      UPDATE [enterprise_Act] SET [Capacity] = [Capacity] + 1  WHERE [ActID] = @actid;
		--IF @@ERROR <> 0 
		-- BEGIN
		--  ROLLBACK TRAN	  
		--  SELECT @result = '嘗試更新活動人數限制時發生錯誤！程序終止！' + ERROR_MESSAGE();
		--  Return
		-- END

		 -- 當明細表刪除後發現該單號在明細表無資料時，就同時刪除主表資料 --
		SELECT @count = COUNT(*) FROM [enterprise_tempOdt] WHERE [OrderID] = @ID;
		IF @count = 0
		  BEGIN
		     DELETE FROM [enterprise_tempOd] WHERE [OrderID] = @ID;
			 IF @@ERROR <> 0 
			 BEGIN
			  ROLLBACK TRAN	  
			  SELECT @result = '嘗試刪除主表資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
			  Return
			 END
		  END
	  END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Waiting_Order_Cancel]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Waiting_Order_Cancel] 
@OrderID  nvarchar(12),
@result nvarchar(50) OUTPUT
AS
BEGIN	
    BEGIN TRAN
	  DELETE FROM [enterprise_tempOd] WHERE OrderID = @OrderID;
	  DELETE FROM [enterprise_tempOdt] WHERE OrderID = @OrderID;
	  IF @@ERROR <> 0 
	  BEGIN
		ROLLBACK TRAN	  
		SELECT @result = '取消候補時發生錯誤！程序終止！' + ERROR_MESSAGE();
		Return
	  END
    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	RETURN   
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Waiting_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Waiting_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@Company nvarchar(50),
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
  DECLARE @totalRow AS INT;


IF @FilterBy='Oid' 
BEGIN
   ;WITH CTE AS (
		SELECT 
		ACT.[Name] AS [ActName],
		ACT.[StartDay],
		OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
		OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
		FROM 
		[enterprise_tempOd] AS OD 
		INNER JOIN 
		[enterprise_tempOdt] AS DT 
		ON 
		OD.OrderID = DT.OrderID 
		INNER JOIN
		[enterprise_Act] AS ACT
		ON
		DT.[ActID] = ACT.[ActID]
		WHERE 
	OD.OrderID LIKE @Filter + '%'
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PAGING AS (
		SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
		[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PAGING	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum]

	SELECT @totalRow = COUNT([OrderID]) FROM [enterprise_tempOd] WHERE [OrderID] LIKE @Filter + '%'

	RETURN @totalRow;
END
ELSE IF @FilterBy='Day' 
BEGIN
  ---- 依照活動日期取出報名資料 ----
  ;WITH CTE AS (
	SELECT 
	ACT.[Name] AS [ActName],
	ACT.[StartDay],
	OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
	OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
	FROM 
	[enterprise_Act] AS ACT
	INNER JOIN
	[enterprise_tempOdt] AS DT 
	ON 
	ACT.[ActID] =DT.[ActID]
	INNER JOIN 
	[enterprise_tempOd] AS OD 
	ON
	DT.[OrderID] = OD.[OrderID]
	WHERE 
	ACT.[StartDay] = @Filter 	
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActName] DESC) AS [RowNum],
	[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	-- 依照活動日期取出報名資料總數 --
	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_tempOdt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_tempOd] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ACT.[StartDay] = @Filter 	
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;

END
ELSE IF @FilterBy='E2' 
BEGIN
  ---- 依照活動編號 E2 取出報名資料 ----
  ;WITH CTE AS (
	SELECT 
	ACT.[Name] AS [ActName],
	ACT.[StartDay],
	OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
	OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
	FROM 
	[enterprise_Act] AS ACT
	INNER JOIN
	[enterprise_tempOdt] AS DT 
	ON 
	ACT.[ActID] =DT.[ActID]
	INNER JOIN 
	[enterprise_tempOd] AS OD 
	ON
	DT.[OrderID] = OD.[OrderID]
	WHERE 
	ACT.[ActID] LIKE 'E2%'
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
	[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	-- 依照活動編號取出報名資料總數 --
	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_tempOdt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_tempOd] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ACT.[ActID] LIKE 'E2%'
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;

END
ELSE IF @FilterBy='E1' 
BEGIN  
	/*;WITH NTE AS (
  		SELECT
  		O.[OrderID], ROW_NUMBER() OVER ( ORDER BY O.[OrderID] DESC) AS [RowNum],
  		O.[Name],O.[Tel1],O.[Tel2],O.[Cell1],O.[cell2],O.[Fax],O.[Address],O.[Email],O.[TotalPrice],O.[Comment],O.[Source],O.[Company],O.[CreateDay],O.[IsPaid]   
  		FROM 
  		[enterprise_tempOd] AS O 
  		LEFT JOIN 
  		[enterprise_tempOdt] AS D
  		ON 
  		O.[OrderID] = D.[OrderID] 
		WHERE  O.[Company] = @Company AND D.[ActID] LIKE 'E1%'
	)
    SELECT DISTINCT [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address], [Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
    FROM NTE 
    WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber )   

	-- 另一組 DataSet 用來取得資料總數 --
	;WITH CTE AS (
		SELECT O.[OrderID] FROM [enterprise_tempOd] AS O LEFT JOIN [enterprise_tempOdt] AS D ON O.[OrderID] = D.[OrderID] WHERE  O.[Company] = @Company AND D.[ActID] LIKE 'E1%'
	)    
    SELECT @totalRow = COUNT(DISTINCT [OrderID]) FROM CTE*/

	---- 依照活動編號 E1 取出報名資料 ----
  ;WITH CTE AS (
	SELECT 
	ACT.[Name] AS [ActName],
	ACT.[StartDay],
	OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
	OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
	FROM 
	[enterprise_Act] AS ACT
	INNER JOIN
	[enterprise_tempOdt] AS DT 
	ON 
	ACT.[ActID] =DT.[ActID]
	INNER JOIN 
	[enterprise_tempOd] AS OD 
	ON
	DT.[OrderID] = OD.[OrderID]
	WHERE 
	ACT.[ActID] LIKE 'E1%'
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
	[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	-- 依照活動編號取出報名資料總數 --
	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_tempOdt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_tempOd] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ACT.[ActID] LIKE 'E1%'
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;
END
ELSE IF @FilterBy='Aid' 
BEGIN
	---- 依照活動編號取出報名資料 ----
  ;WITH CTE AS (
	SELECT 
	ACT.[Name] AS [ActName],
	ACT.[StartDay],
	OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
	OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
	FROM 
	[enterprise_Act] AS ACT
	INNER JOIN
	[enterprise_tempOdt] AS DT 
	ON 
	ACT.[ActID] =DT.[ActID]
	INNER JOIN 
	[enterprise_tempOd] AS OD 
	ON
	DT.[OrderID] = OD.[OrderID]
	WHERE 
	ACT.[ActID] = @Filter 	
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
	[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM DS2
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	-- 依照活動編號取出報名資料總數 --
	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_tempOdt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_tempOd] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ACT.[ActID] = @Filter 	
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;
END
ELSE
BEGIN
	;WITH CTE AS (
	SELECT 
		ACT.[Name] AS [ActName],
		ACT.[StartDay],
		OD.[OrderID], OD.[Name],OD.[Tel1],OD.[Tel2],OD.[Cell1],OD.[cell2],OD.[Fax],OD.[Address],
		OD.[Email],OD.[TotalPrice],OD.[Comment],OD.[Source],OD.[Company],OD.[CreateDay],OD.[IsPaid]
		FROM 
		[enterprise_tempOd] AS OD 
		INNER JOIN 
		[enterprise_tempOdt] AS DT 
		ON 
		OD.OrderID = DT.OrderID 
		INNER JOIN
		[enterprise_Act] AS ACT
		ON
		DT.[ActID] = ACT.[ActID]
		WHERE ( @Filter IS NULL OR 
			CASE			
			WHEN @FilterBy='Eid' THEN DT.[EmpID]
			WHEN @FilterBy='Sid' THEN DT.[SID]
			END 
			LIKE @Filter + '%'
		) 		
	),
	DS2 AS (
		SELECT DISTINCT [OrderID],
		[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM CTE
	),
	PGE AS (
		SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS [RowNum],
		[OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
		FROM DS2 
	)
	SELECT [OrderID],[ActName],[StartDay],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay],[IsPaid]
	FROM PGE	
	WHERE ([RowNum] > @PageSize * (@PageNumber - 1) ) AND ([RowNum] <= @PageSize * @PageNumber ) ORDER BY [RowNum];

	;WITH PCTE AS (
		SELECT 	OD.[OrderID] FROM [enterprise_Act] AS ACT
		INNER JOIN [enterprise_tempOdt] AS DT ON ACT.[ActID] =DT.[ActID]
		INNER JOIN [enterprise_tempOd] AS OD ON	DT.[OrderID] = OD.[OrderID]
		WHERE ( @Filter IS NULL OR 
			CASE			
			WHEN @FilterBy='Eid' THEN DT.[EmpID]
			WHEN @FilterBy='Sid' THEN DT.[SID]
			END 
			LIKE @Filter + '%'
		) 			
	),
	PDS2 AS (
		SELECT DISTINCT [OrderID]FROM PCTE
	)
	SELECT @totalRow = COUNT(*) FROM PDS2;

	RETURN @totalRow;
END
    
    
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Waiting_Report]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Waiting_Report] 
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
IF @FilterBy = 'Day'
	BEGIN
		SELECT 
		DT.[OrderID],
		DT.[ActID],
		DT.[ActName],
		DT.[Name],
		DT.[SID],
		DT.[EmpID],
		CONVERT(varchar(12), DT.[DOB], 111) AS [DOB],
		DT.[Sex],
		DT.[Cell],
		DT.[Email],
		DT.[Price],
		DT.[Comment] AS [Cmt],
		DT.[IsVeg],
		OD.[Name] AS [MainName],
		OD.[Cell1] AS [MainCell],
		OD.[Tel1] AS [MainTel],
		OD.[Email] AS [MainEmail],
		OD.[TotalPrice],
		OD.[Comment],
		ACT.[StartDay]
		FROM [enterprise_Act] AS ACT
		INNER JOIN 
		[enterprise_tempOdt] AS DT 
		ON
		ACT.[ActID] = DT.[ActID] 
		INNER JOIN
		[enterprise_tempOd] AS OD
		ON 
		DT.[OrderID] = OD.[OrderID]		
		WHERE 
		ACT.[StartDay] = @Filter
		ORDER BY ACT.[ActID]
	END
	ELSE IF @FilterBy='E2' 
	BEGIN
		SELECT 
		DT.[OrderID],
		DT.[ActID],
		DT.[ActName],
		DT.[Name],
		DT.[SID],
		DT.[EmpID],
		CONVERT(varchar(12), DT.[DOB], 111) AS [DOB],
		DT.[Sex],
		DT.[Cell],
		DT.[Email],
		DT.[Price],
		DT.[Comment] AS [Cmt],
		DT.[IsVeg],
		OD.[Name] AS [MainName],
		OD.[Cell1] AS [MainCell],
		OD.[Tel1] AS [MainTel],
		OD.[Email] AS [MainEmail],
		OD.[TotalPrice],
		OD.[Comment],
		ACT.[StartDay]
		FROM [enterprise_Act] AS ACT
		INNER JOIN 
		[enterprise_tempOdt] AS DT 
		ON
		ACT.[ActID] = DT.[ActID] 
		INNER JOIN
		[enterprise_tempOd] AS OD
		ON 
		DT.[OrderID] = OD.[OrderID]		
		WHERE 
		ACT.[ActID] LIKE 'E2%'
		ORDER BY ACT.[ActID]
	END
	ELSE IF @FilterBy='E1' 
	BEGIN
		SELECT 
		DT.[OrderID],
		DT.[ActID],
		DT.[ActName],
		DT.[Name],
		DT.[SID],
		DT.[EmpID],
		CONVERT(varchar(12), DT.[DOB], 111) AS [DOB],
		DT.[Sex],
		DT.[Cell],
		DT.[Email],
		DT.[Price],
		DT.[Comment] AS [Cmt],
		DT.[IsVeg],
		OD.[Name] AS [MainName],
		OD.[Cell1] AS [MainCell],
		OD.[Tel1] AS [MainTel],
		OD.[Email] AS [MainEmail],
		OD.[TotalPrice],
		OD.[Comment],
		ACT.[StartDay]
		FROM [enterprise_Act] AS ACT
		INNER JOIN 
		[enterprise_tempOdt] AS DT 
		ON
		ACT.[ActID] = DT.[ActID] 
		INNER JOIN
		[enterprise_tempOd] AS OD
		ON 
		DT.[OrderID] = OD.[OrderID]		
		WHERE 
		ACT.[ActID] LIKE 'E1%'
		ORDER BY ACT.[ActID]
	END
	ELSE
	BEGIN
		;WITH CTE AS (
			SELECT 
			DT.[OrderID],
			DT.[ActID],
			DT.[ActName],
			DT.[Name],
			DT.[SID],
			DT.[EmpID],
			CONVERT(varchar(12), DT.[DOB], 111) AS [DOB],
			DT.[Sex],
			DT.[Cell],
			DT.[Email],
			DT.[Price],
			DT.[Comment] AS [Cmt],
			DT.[IsVeg],
			OD.[Name] AS [MainName],
			OD.[Cell1] AS [MainCell],
			OD.[Tel1] AS [MainTel],
			OD.[Email] AS [MainEmail],
			OD.[TotalPrice],
			OD.[Comment] 
			FROM 
			[enterprise_tempOdt] AS DT 
			LEFT JOIN 
			[enterprise_tempOd] AS OD 
			ON DT.[OrderID] = OD.[OrderID] 
			WHERE OD.[Company] = 'wt' AND 		
					(@Filter IS NULL OR 
					  CASE WHEN @FilterBy='Aid' THEN DT.[ActID]
						   WHEN @FilterBy='Name' THEN DT.[Name]
						   WHEN @FilterBy='Eid' THEN DT.[EmpID]
						   WHEN @FilterBy='Sid' THEN  DT.[SID]
						   WHEN @FilterBy='Oid' THEN DT.[OrderID]
						   WHEN @FilterBy='Cmt' THEN  OD.[Comment]
					  END 
					  Like @Filter + '%'
					) 	
		)
		SELECT 
		MJ.[OrderID],
		MJ.[ActID],
		MJ.[ActName],
		MJ.[Name],
		MJ.[SID],
		MJ.[EmpID],
		MJ.[DOB],
		MJ.[Sex],
		MJ.[Cell],
		MJ.[Email],
		MJ.[Price],
		MJ.[Cmt],
		MJ.[IsVeg],
		MJ.[MainName],
		MJ.[MainCell],
		MJ.[MainTel],
		MJ.[MainEmail],
		MJ.[TotalPrice],
		MJ.[Comment],		
		ACT.[StartDay]	
		FROM CTE AS MJ		
		INNER JOIN 
		[enterprise_Act] AS ACT
		ON
		MJ.[ActID] = ACT.[ActID]
	END
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Waiting_to_Order]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Waiting_to_Order] 
	-- Add the parameters for the stored procedure here
    @oid nvarchar(12),
    @result nvarchar(150) OUTPUT
AS
BEGIN
    DECLARE @preID nvarchar(10)	
	DECLARE @room nvarchar(2) 
    DECLARE @actid nvarchar(15) 
	DECLARE @actname nvarchar(50)
    DECLARE @name nvarchar(50)
	DECLARE @tel1 nvarchar(50)
	DECLARE @tel2 nvarchar(50)
	DECLARE @cell nvarchar(20)
	DECLARE @cel2 nvarchar(20)
	DECLARE @fax nvarchar(20)
	DECLARE @addr nvarchar(150)
    DECLARE @sid nvarchar(20)
    DECLARE @empid nvarchar(20)
    DECLARE @dob nvarchar(20)
    DECLARE @sax nvarchar(1)
    
    DECLARE @email nvarchar(256)    
    DECLARE @cmt nvarchar(255)  
	DECLARE @price int
	DECLARE @veg bit

    DECLARE @TrueID nvarchar(12)
	DECLARE @RoomType nvarchar(2)
    DECLARE @num int
	DECLARE @roomnum int
	DECLARE @count int
	
	SET @num =0;
	SET @roomnum =0;
	SET @count=0;
	SET @price=0;
    
	
	SET NOCOUNT ON;

	SET @preID = CONVERT(NVARCHAR, CAST(DatePart(year, getdate()) AS INT) - 1911) + RIGHT('00' + CAST(DATEPART(month, getdate()) AS varchar(2)), 2) +  RIGHT('00' + CAST(DATEPART(day, getdate()) AS varchar(2)), 2);
	
	
    
    -- 交易開始
    BEGIN TRAN	

	IF (LEFT(@oid,2)='W1')
	BEGIN
	  SET @preID = 'M' + @preID;
	END

	IF (LEFT(@oid,2)='W2')
	BEGIN
		SET @preID = 'M2' +  RIGHT(@preID,6);
	END

	-- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [enterprise_Od] WITH (UPDLOCK, HOLDLOCK)  WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC

	-- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
    BEGIN
      SET @TrueID = @preID  + '001';
    END
    ELSE
    BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
    END
	
	IF (EXISTS (SELECT * FROM  [enterprise_Od] WHERE  [OrderID] = @TrueID ))
	BEGIN
	 ROLLBACK TRAN		   	       
	 SELECT @result = '單號重覆，程序終止！';
	 RETURN
    END

	/* 一日遊-從候補清單中找尋符合條件的資料 */
	IF (LEFT(@oid,2)='W1')
	BEGIN
		SET @num = 0;
		SET @count =0;

		-- 找出目前候補參加人數
		SELECT  @count = COUNT([OrderId]) FROM [enterprise_tempOdt] WHERE [OrderId] = @oid;

		-- 找出活動編碼
		SELECT  TOP 1 @actid = [ActID] FROM [enterprise_tempOdt] WHERE [OrderId] = @oid;

	    -- 找出此一活動目前剩餘人數
		SELECT @num = [Capacity] FROM [enterprise_act]  WHERE ActID= @actid;

		-- 檢查數量是否足夠		
		SET @num = @num - @count;
		IF @num < 0 
		BEGIN
			ROLLBACK TRAN
			SELECT @result = '此一活動目前數量不足';
			RETURN
		END  -- End of IF

		-- 加入主單 --
		SELECT  
		@name = [Name],
		@tel1 = [Tel1],
		@tel2 = [Tel2],
		@cell = [Cell1],
		@cel2 = [cell2],
		@fax = [Fax],
		@addr = [Address],
		@email = [Email],
		@price = [TotalPrice],
		@cmt = [Comment]
		FROM [enterprise_tempOd] WHERE [OrderID] = @oid

		INSERT INTO [enterprise_Od] (
			[OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],[CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
		) 
		VALUES (@TrueID, @name, @tel1, @tel2, @cell, @cel2, @fax, @addr, @email, @price, 0, 0, 0, @cmt, '', 'wt', getdate());
		IF @@ERROR <> 0 
		BEGIN
			ROLLBACK TRAN	  
			SELECT @result = '加入主單時發生錯誤:' + ERROR_MESSAGE();
			RETURN
		END	
		
		SET @count =0;

		-- 檢查重複報名 --
		DECLARE CUR CURSOR FOR
		SELECT [ActID], [SID], [EmpID] FROM [enterprise_tempOdt] WHERE [OrderID] =  @oid
		OPEN CUR 
		FETCH NEXT FROM CUR INTO @actid, @sid, @empid
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @empid = LTRIM(RTRIM(@empid));
			IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
			BEGIN
				ROLLBACK TRAN		   	       
				SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行報名！';
				RETURN
			END -- End of IF

			IF(LEN(@empid)>0)
			BEGIN
				IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
				BEGIN
					ROLLBACK TRAN		   	       
					SELECT @result = '此一工號' + @empid + ' 已在該活動中報名，請重新輸入！';
					RETURN
				END -- End of IF
				IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='M2'))
				BEGIN
					ROLLBACK TRAN		   	       
					SELECT @result = '此一工號' + @empid + ' 已在該系列活動中報名，請重新輸入！';
					RETURN
				END -- End of IF
			END -- End of IF Start ELSE
			ELSE
			BEGIN
				IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
				BEGIN
					ROLLBACK TRAN		   	       
					SELECT @result = '此一身分證號' + @sid + ' 已在該活動中報名，請重新輸入！';
					RETURN
				END -- End of IF
			END	-- End of ELSE	 				
			FETCH NEXT FROM CUR INTO @actid, @sid, @empid
		END -- End Loop
		CLOSE CUR 
		DEALLOCATE CUR

		SET @count =0;		
			
		-- 加入明細 --
		DECLARE POINTER CURSOR FOR
		SELECT d.[ActID],d.[ActName],d.[Name],d.[SID],d.[EmpID],d.[DOB],d.[Sex],d.[Cell],d.[Email],d.[Comment],d.[Price],d.[IsVeg]
		FROM  [enterprise_tempOdt] AS d                
		WHERE d.[OrderID] =  @oid
		OPEN POINTER
		FETCH NEXT FROM POINTER INTO @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg
		WHILE @@FETCH_STATUS = 0
		BEGIN    
			SET @count = @count + 1;
			INSERT INTO [enterprise_Odt]([OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Comment],[Price],[IsVeg])
			VALUES
			(@TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg) 
				
			IF @@ERROR <> 0 
			BEGIN
				ROLLBACK TRAN	  
				SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時(' + @name + ')發生錯誤！程序終止！' + ERROR_MESSAGE();
				RETURN
			END	-- End of Error IF

			FETCH NEXT FROM POINTER INTO @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg
		END -- End of Detail Loop
		CLOSE POINTER 
		DEALLOCATE POINTER

		-- 更新數量
		IF @num < 0 
		BEGIN
			SET @num = 0;
		END
		UPDATE [enterprise_Act] SET [Capacity] = @num WHERE [ActID] = @actid;

		-- 刪除候補
		DELETE FROM [enterprise_tempOd] WHERE [OrderID] = @oid 
		DELETE FROM [enterprise_tempOdt] WHERE [OrderID] = @oid
	END -- End of 一日遊


	IF (LEFT(@oid,2)='W2')
	BEGIN
		SET @num = 0;
		SET @count =0;

		-- 找出目前候補參加人數
		SELECT  @count = COUNT([OrderId]) FROM [enterprise_tempOdt] WHERE [OrderId] = @oid;

		-- 找出活動編碼
		SELECT TOP 1 @actid = [ActID] FROM [enterprise_tempOdt] WHERE [OrderId] = @oid;

		-- 找出房型
		SELECT @RoomType = [Tel2] FROM [enterprise_tempOd] WHERE [OrderId] = @oid;

	    -- 找出此一活動目前剩餘人數
		SELECT @num = [Capacity] FROM [enterprise_Act]  WHERE ActID= @actid;
		
		-- 檢查數量是否足夠		
		SET @num = @num - @count;
		IF @num < 0 
		BEGIN
			ROLLBACK TRAN
			SELECT @result = '此一活動目前數量不足！';
			RETURN
		END  -- End of IF

		-- 檢查房數是否足夠
		IF(LEFT(@RoomType,1)='2')
		BEGIN
			SELECT @roomnum = [FieldInt1] FROM [enterprise_Act] WHERE [ActID] = @actid
		END

		IF(LEFT(@RoomType,1)='4')
		BEGIN
			SELECT @roomnum = [FieldInt2] FROM [enterprise_Act] WHERE [ActID] = @actid
		END

		IF @roomnum <=0 
		BEGIN
			ROLLBACK TRAN		   	       
			SELECT @result = @tel2 + '此一房型目前數量不足！';
			RETURN
		END

		-- 加入主單 --
		SELECT  
		@name = [Name],
		@tel1 = [Tel1],
		@tel2 = [Tel2],
		@cell = [Cell1],
		@cel2 = [cell2],
		@fax = [Fax],
		@addr = [Address],
		@email = [Email],
		@price = [TotalPrice],
		@cmt = [Comment]
		FROM [enterprise_tempOd] WHERE [OrderID] = @oid

		INSERT INTO [enterprise_Od] (
			[OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],[CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
		) 
		VALUES (@TrueID, @name, @tel1, @tel2, @cell, @cel2, @fax, @addr, @email, @price, 0, 0, 0, @cmt, '', 'wt', getdate());
		IF @@ERROR <> 0 
		BEGIN
			ROLLBACK TRAN	  
			SELECT @result = '加入主單時發生錯誤:' + ERROR_MESSAGE();
			RETURN
		END	
		
		SET @count =0;

		-- 檢查重複報名 --
		DECLARE CUR CURSOR FOR
		SELECT [ActID], [SID], [EmpID] FROM [enterprise_tempOdt] WHERE [OrderID] =  @oid
		OPEN CUR 
		FETCH NEXT FROM CUR INTO @actid, @sid, @empid
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @empid = LTRIM(RTRIM(@empid));
			IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
			BEGIN
				ROLLBACK TRAN		   	       
				SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行報名！';
				RETURN
			END -- End of IF

			IF(LEN(@empid)>0)
			BEGIN
				IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
				BEGIN
					ROLLBACK TRAN		   	       
					SELECT @result = '此一工號' + @empid + ' 已在該活動中報名，請重新輸入！';
					RETURN
				END -- End of IF
				IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='M2'))
				BEGIN
					ROLLBACK TRAN		   	       
					SELECT @result = '此一工號' + @empid + ' 已在該系列活動中報名，請重新輸入！';
					RETURN
				END -- End of IF
			END -- End of IF Start ELSE
			ELSE
			BEGIN
				IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
				BEGIN
					ROLLBACK TRAN		   	       
					SELECT @result = '此一身分證號' + @sid + ' 已在該活動中報名，請重新輸入！';
					RETURN
				END -- End of IF
			END	-- End of ELSE	 				
			FETCH NEXT FROM CUR INTO @actid, @sid, @empid
		END -- End Loop
		CLOSE CUR 
		DEALLOCATE CUR

		SET @count =0;		
			
		-- 加入明細 --
		DECLARE POINTER CURSOR FOR
		SELECT d.[ActID],d.[ActName],d.[Name],d.[SID],d.[EmpID],d.[DOB],d.[Sex],d.[Cell],d.[Email],d.[Comment],d.[Price],d.[IsVeg]
		FROM  [enterprise_tempOdt] AS d                
		WHERE d.[OrderID] =  @oid
		OPEN POINTER
		FETCH NEXT FROM POINTER INTO @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg
		WHILE @@FETCH_STATUS = 0
		BEGIN    
			SET @count = @count + 1;
			INSERT INTO [enterprise_Odt]([OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Comment],[Price],[IsVeg])
			VALUES
			(@TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg) 
				
			IF @@ERROR <> 0 
			BEGIN
				ROLLBACK TRAN	  
				SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時(' + @name + ')發生錯誤！程序終止！' + ERROR_MESSAGE();
				RETURN
			END	-- End of Error IF

			FETCH NEXT FROM POINTER INTO @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg
		END -- End of Detail Loop
		CLOSE POINTER 
		DEALLOCATE POINTER

		-- 更新數量
		IF @num < 0 
		BEGIN
			SET @num = 0;
		END
		UPDATE [enterprise_Act] SET [Capacity] = @num WHERE [ActID] = @actid;

		-- 更新房數
		SET @roomnum = @roomnum -1;
		IF @roomnum < 0 
		BEGIN
			SET @roomnum = 0;
		END
		IF(LEFT(@RoomType,1)='2')
		BEGIN
			UPDATE [enterprise_Act] SET [FieldInt1] = @roomnum FROM [enterprise_Act] WHERE [ActID] = @actid
		END

		IF(LEFT(@RoomType,1)='4')
		BEGIN
			UPDATE [enterprise_Act] SET [FieldInt2] = @roomnum FROM [enterprise_Act] WHERE [ActID] = @actid
		END

		-- 刪除候補
		DELETE FROM [enterprise_tempOd] WHERE [OrderID] = @oid 
		DELETE FROM [enterprise_tempOdt] WHERE [OrderID] = @oid

	END -- End of 二日遊
  

  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID
  RETURN    
      
END
GO
/****** Object:  StoredProcedure [dbo].[enterprise_wt_Waiting_to_Order_Auto]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[enterprise_wt_Waiting_to_Order_Auto] 
	-- Add the parameters for the stored procedure here
    @actid nvarchar(12),
	@joinAmt int,
	@roomType nvarchar(2),
    @result nvarchar(150) OUTPUT
AS
BEGIN
    DECLARE @preID nvarchar(10)	
	DECLARE @room nvarchar(2) 
    --DECLARE @actid nvarchar(15) 
	DECLARE @actname nvarchar(50)
    DECLARE @name nvarchar(50)
	DECLARE @tel1 nvarchar(50)
	DECLARE @tel2 nvarchar(50)
	DECLARE @cell nvarchar(20)
	DECLARE @cel2 nvarchar(20)
	DECLARE @fax nvarchar(20)
	DECLARE @addr nvarchar(150)
    DECLARE @sid nvarchar(20)
    DECLARE @empid nvarchar(20)
    DECLARE @dob nvarchar(20)
    DECLARE @sax nvarchar(1)
    
    DECLARE @email nvarchar(256)    
    DECLARE @cmt nvarchar(255)  
	DECLARE @price int
	DECLARE @veg bit

    DECLARE @TrueID nvarchar(12)
	DECLARE @WID nvarchar(12)
    DECLARE @num int
	DECLARE @roomnum int
	DECLARE @count int

	
	SET @num =0;
	SET @roomnum =0;
	SET @count=0;
	SET @price=0;

	
	SET NOCOUNT ON;

	SET @preID = CONVERT(NVARCHAR, CAST(DatePart(year, getdate()) AS INT) - 1911) + RIGHT('00' + CAST(DATEPART(month, getdate()) AS varchar(2)), 2) +  RIGHT('00' + CAST(DATEPART(day, getdate()) AS varchar(2)), 2);
	
    
    -- 交易開始
    BEGIN TRAN	
		
	IF (LEFT(@actid,2)='E1')
	BEGIN
	  SET @preID = 'M' + @preID;
	END

	IF (LEFT(@actid,2)='E2')
	BEGIN
		SET @preID = 'M2' +  RIGHT(@preID,6);
	END

	-- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [enterprise_Od] WITH (UPDLOCK, HOLDLOCK)  WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC   

	-- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
    BEGIN
      SET @TrueID = @preID  + '001';
    END
    ELSE
    BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
    END
	
	IF (EXISTS (SELECT * FROM  [enterprise_Od] WHERE  [OrderID] = @TrueID ))
	BEGIN
	 ROLLBACK TRAN		   	       
	 SELECT @result = '單號重覆，程序終止！';
	 Return
    END
	
	/* 一日遊-從候補清單中找尋符合條件的資料 */
	IF (LEFT(@actid,2)='E1')
	BEGIN
		;WITH CTE AS (
			SELECT  DISTINCT m.OrderId FROM [enterprise_tempOdt] AS d
			INNER JOIN [enterprise_tempOd] AS m ON d.OrderId = m.OrderId
			WHERE d.ActID = @actid AND  m.fieldInt1 = @joinAmt 
		)
		SELECT TOP 1  @WID = OrderId FROM CTE ORDER BY OrderId;

		IF NOT @WID  IS NULL 
		BEGIN		
		    -- 加入主單 --
			SELECT  
			@name = [Name],
			@tel1 = [Tel1],
			@tel2 = [Tel2],
			@cell = [Cell1],
			@cel2 = [cell2],
			@fax = [Fax],
			@addr = [Address],
			@email = [Email],
			@price = [TotalPrice],
			@cmt = [Comment]
			FROM [enterprise_tempOd] WHERE [OrderID] = @WID

			INSERT INTO [enterprise_Od] (
			 [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],[CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
			)
			VALUES
			(@TrueID, @name, @tel1, @tel2, @cell, @cel2, @fax, @addr, @email, @price, 0, 0, 0, @cmt, '', 'wt', getdate());

			IF @@ERROR <> 0 
			BEGIN
			  ROLLBACK TRAN	  
			  SELECT @result = 'INSERT [enterprise_Od] ERROR' + ERROR_MESSAGE();
			  RETURN
			END	

			SET @num =0;
			SET @count =0;
			
			-- 檢查重複報名 --
			DECLARE CUR CURSOR FOR
			SELECT [ActID], [SID], [EmpID] FROM [enterprise_tempOdt] WHERE [OrderID] =  @WID
			OPEN CUR 
			FETCH NEXT FROM CUR INTO @actid, @sid, @empid
			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @empid = LTRIM(RTRIM(@empid));
				IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
			    BEGIN
				  ROLLBACK TRAN		   	       
				  SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行報名！';
				  RETURN
			    END -- End of IF

				IF(LEN(@empid)>0)
				BEGIN
					IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
					BEGIN
						ROLLBACK TRAN		   	       
						SELECT @result = '此一工號' + @empid + ' 已在該活動中報名，請重新輸入！';
						RETURN
					END -- End of IF
					IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='M2'))
					BEGIN
						ROLLBACK TRAN		   	       
						SELECT @result = '此一工號' + @empid + ' 已在該系列活動中報名，請重新輸入！';
						RETURN
					END -- End of IF
				END -- End of IF Start ELSE
				ELSE
				BEGIN
					IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
					BEGIN
						  ROLLBACK TRAN		   	       
						  SELECT @result = '此一身分證號' + @sid + ' 已在該活動中報名，請重新輸入！';
						  RETURN
					END -- End of IF
				END	-- End of ELSE	 
				SET @count = @count + 1;
				FETCH NEXT FROM CUR INTO @actid, @sid, @empid
			END -- End Loop
			CLOSE CUR 
			DEALLOCATE CUR

			-- 檢查數量是否足夠
			SELECT @num = [Capacity] FROM [enterprise_Act] WHERE [ActID] = @actid
			-- 計算剩餘數量
			SET @num = @num - @count;

			IF @num < 0 
			BEGIN
				ROLLBACK TRAN	
				SELECT @result = '此一房型目前數量不足';
				RETURN
			END  -- End of IF
			
			SET @count =0;		
			-- 加入明細 --
			DECLARE POINTER CURSOR FOR
			SELECT d.[ActID],d.[ActName],d.[Name],d.[SID],d.[EmpID],d.[DOB],d.[Sex],d.[Cell],d.[Email],d.[Comment],d.[Price],d.[IsVeg]
			FROM  [enterprise_tempOdt] AS d                
			WHERE d.[OrderID] =  @WID
			OPEN POINTER
			FETCH NEXT FROM POINTER INTO @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg
			WHILE @@FETCH_STATUS = 0
			BEGIN    
				SET @count = @count + 1;
				INSERT INTO [enterprise_Odt]([OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Comment],[Price],[IsVeg])
				VALUES
				(@TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg) 
				
				IF @@ERROR <> 0 
				BEGIN
				  ROLLBACK TRAN	  
				  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時(' + @name + ')發生錯誤！程序終止！' + ERROR_MESSAGE();
				  Return
				END	-- End of Error IF

				FETCH NEXT FROM POINTER INTO @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg
			END -- End of Detail Loop
			CLOSE POINTER 
			DEALLOCATE POINTER 

			--SET @TrueID = CONVERT(NVARCHAR, @num) + '|' + CONVERT(NVARCHAR, @count)
			
			-- 更新數量
			IF @num < 0 
			BEGIN
				SET @num = 0;
			END
			UPDATE [enterprise_Act] SET [Capacity] = @num WHERE [ActID] = @actid;

			-- 刪除候補
			DELETE FROM [enterprise_tempOd] WHERE [OrderID] = @WID 
			DELETE FROM [enterprise_tempOdt] WHERE [OrderID] = @WID

		END -- End of @WID has value
		ELSE
		BEGIN
		    -- 找不到符合條件的候補 --
			SET @TrueID = ''
		END
	END -- End of 一日遊
	


	/* 二日遊-從候補清單中找尋符合條件的資料 */
	IF (LEFT(@actid,2)='E2')
	BEGIN
	    -- 檢查房數是否足夠
		IF(LEFT(@roomType,1)='2')
		BEGIN
			SELECT @roomnum = [FieldInt1] FROM [enterprise_Act] WHERE [ActID] = @actid
		END
		IF(LEFT(@roomType,1)='4')
		BEGIN
			SELECT @roomnum = [FieldInt2] FROM [enterprise_Act] WHERE [ActID] = @actid
		END
		IF @roomnum <= 0 
		BEGIN
			ROLLBACK TRAN		   	       
			SELECT @result = '本行程此一房型目前數量不足';
			RETURN
		END -- End of Check room

		;WITH CTE AS (
			SELECT  DISTINCT m.OrderId FROM [enterprise_tempOdt] AS d
			INNER JOIN [enterprise_tempOd] AS m ON d.OrderId = m.OrderId
			WHERE d.ActID = @actid AND  m.Tel2 = @roomType 
		)
		SELECT TOP 1  @WID = OrderId FROM CTE ORDER BY OrderId;

		IF NOT @WID  IS NULL 
		BEGIN
			-- 加入主單 --
			SELECT  
			@name = [Name],
			@tel1 = [Tel1],
			@tel2 = [Tel2],
			@cell = [Cell1],
			@cel2 = [cell2],
			@fax = [Fax],
			@addr = [Address],
			@email = [Email],
			@price = [TotalPrice],
			@cmt = [Comment]
			FROM [enterprise_tempOd] WHERE [OrderID] = @WID

			INSERT INTO [enterprise_Od] (
			 [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],[Email],[TotalPrice],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source],[Company],[CreateDay]-- [FieldStr1],[FieldStr2],[FieldInt1],[FieldInt2]
			)
			VALUES
			(@TrueID, @name, @tel1, @tel2, @cell, @cel2, @fax, @addr, @email, @price, 0, 0, 0, @cmt, '', 'wt', getdate());

			IF @@ERROR <> 0 
			BEGIN
			  ROLLBACK TRAN	  
			  SELECT @result = 'INSERT [enterprise_Od] ERROR-TwoDay' + ERROR_MESSAGE();
			  RETURN
			END	

			SET @num =0;
			SET @count =0;

			-- 檢查重複報名 --
			DECLARE CUR CURSOR FOR
			SELECT [ActID], [SID], [EmpID] FROM [enterprise_tempOdt] WHERE [OrderID] = @WID
			OPEN CUR 
			FETCH NEXT FROM CUR INTO @actid, @sid, @empid
			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @empid = LTRIM(RTRIM(@empid));
				IF (NOT EXISTS (SELECT * FROM  [enterprise_Act] WHERE [ActID] = @actid))
			    BEGIN
				  ROLLBACK TRAN		   	       
				  SELECT @result = '此一活動 ' + @actid+ ' 不存在無法進行報名！';
				  RETURN
			    END -- End of IF

				IF(LEN(@empid)>0)
				BEGIN
					IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND [ActID] = @actid))
					BEGIN
						ROLLBACK TRAN		   	       
						SELECT @result = '此一工號' + @empid + ' 已在該活動中報名，請重新輸入！';
						RETURN
					END -- End of IF
					IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [EmpID] = @empid AND LEFT([OrderID],2) ='M2'))
					BEGIN
						ROLLBACK TRAN		   	       
						SELECT @result = '此一工號' + @empid + ' 已在該系列活動中報名，請重新輸入！';
						RETURN
					END -- End of IF
				END -- End of IF Start ELSE
				ELSE
				BEGIN
					IF (EXISTS (SELECT * FROM  [enterprise_Odt] WHERE  [SID] = @sid AND [ActID] = @actid))
					BEGIN
						  ROLLBACK TRAN		   	       
						  SELECT @result = '此一身分證號' + @sid + ' 已在該活動中報名，請重新輸入！';
						  RETURN
					END -- End of IF
				END	-- End of ELSE	 				
				SET @count = @count + 1;
				FETCH NEXT FROM CUR INTO @actid, @sid, @empid
			END -- End Loop
			CLOSE CUR 
			DEALLOCATE CUR

			-- 檢查數量是否足夠
			SELECT @num = [Capacity] FROM [enterprise_Act] WHERE [ActID] = @actid
			-- 計算剩餘數量
			SET @num = @num - @count;

			IF @num < 0 
			BEGIN
				ROLLBACK TRAN	
				SELECT @result = '此一活動目前數量不足';
				RETURN
			END  -- End of IF
			
			SET @count =0;

			-- 加入明細 --
			DECLARE POINTER CURSOR FOR
			SELECT [ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Comment],[Price],[IsVeg]
			FROM  [enterprise_tempOdt]                
			WHERE [OrderID] =  @WID
			OPEN POINTER
			FETCH NEXT FROM POINTER INTO @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg
			WHILE @@FETCH_STATUS = 0
			BEGIN    
				SET @count = @count + 1;
				INSERT INTO [enterprise_Odt]([OrderID],[ActID],[ActName],[Name],[SID],[EmpID],[DOB],[Sex],[Cell],[Email],[Price],[Comment],[IsVeg])
				VALUES
				(@TrueID, @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @price, @cmt, @veg) 
				
				IF @@ERROR <> 0 
				BEGIN
				  ROLLBACK TRAN	  
				  SELECT @result = '嘗試寫入第' + Convert(nvarchar(10),@count) + '筆資料列時(' + @name + ')發生錯誤！程序終止！' + ERROR_MESSAGE();
				  Return
				END	-- End of Error IF

				FETCH NEXT FROM POINTER INTO @actid, @actname, @name, @sid, @empid, @dob, @sax, @cell, @email, @cmt, @price, @veg
			END -- End of Detail Loop
			CLOSE POINTER 
			DEALLOCATE POINTER 

			-- 更新數量
			IF @num < 0 
			BEGIN
				SET @num = 0;
			END
			UPDATE [enterprise_Act] SET [Capacity] = @num WHERE [ActID] = @actid;

			-- 更新房數
			SET @roomnum = @roomnum -1;
			
			IF @roomnum < 0
			BEGIN
				SET @roomnum = 0;
			END

			IF(LEFT(@roomType,1)='2')
			BEGIN
				UPDATE [enterprise_Act] SET [FieldInt1] = @roomnum FROM [enterprise_Act] WHERE [ActID] = @actid
			END
			IF(LEFT(@roomType,1)='4')
			BEGIN
				UPDATE [enterprise_Act] SET [FieldInt2] = @roomnum FROM [enterprise_Act] WHERE [ActID] = @actid
			END

			-- 刪除候補
			DELETE FROM [enterprise_tempOd] WHERE [OrderID] = @WID 
			DELETE FROM [enterprise_tempOdt] WHERE [OrderID] = @WID

		END -- End of @WID has value
		ELSE
		BEGIN
		    -- 找不到符合條件的候補 --
			SET @TrueID = ''
		END
	END -- End of 二日遊
 
  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[ftp_Act_HitPoint]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ftp_Act_HitPoint] 
@actID nvarchar(10)
AS
BEGIN
  
UPDATE [ftp_Act] SET [Rating]=[Rating]+1 WHERE [ActID] = @actID ;

END
GO
/****** Object:  StoredProcedure [dbo].[ftp_Act_HomePage]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ftp_Act_HomePage] 

AS
BEGIN
  
-- Create table
CREATE TABLE tbl (
	[ActID] [nvarchar](10) NOT NULL,
	[ActName] [nvarchar](50) NOT NULL,
	[Days] [smallint],
	[Location] [nvarchar](10) NOT NULL,
	[Price1] [smallint],
	[Rating] [int]	
);

INSERT INTO tbl 
SELECT TOP 5 [ActID],[ActName],[Days],[Location],[Price1],[Rating] FROM [ftp_Act]  
WHERE [Location] = 'TP' AND [IsOn]= 1 ORDER BY [ModifyDate] DESC;

INSERT INTO tbl 
SELECT TOP 5 [ActID],[ActName],[Days],[Location],[Price1],[Rating] FROM [ftp_Act]  
WHERE [Location] = 'TY' AND [IsOn]= 1 ORDER BY [ModifyDate] DESC;

INSERT INTO tbl 
SELECT TOP 5 [ActID],[ActName],[Days],[Location],[Price1],[Rating] FROM [ftp_Act]  
WHERE [Location] = 'CH' AND [IsOn]= 1 ORDER BY [ModifyDate] DESC;

INSERT INTO tbl 
SELECT TOP 5 [ActID],[ActName],[Days],[Location],[Price1],[Rating] FROM [ftp_Act]  
WHERE [Location] = 'IL' AND [IsOn]= 1 ORDER BY [ModifyDate] DESC;

INSERT INTO tbl 
SELECT TOP 5 [ActID],[ActName],[Days],[Location],[Price1],[Rating] FROM [ftp_Act]  
WHERE [Location] = 'TC' AND [IsOn]= 1 ORDER BY [ModifyDate] DESC;

INSERT INTO tbl 
SELECT TOP 5 [ActID],[ActName],[Days],[Location],[Price1],[Rating] FROM [ftp_Act]  
WHERE [Location] = 'ML' AND [IsOn]= 1 ORDER BY [ModifyDate] DESC;

INSERT INTO tbl 
SELECT TOP 5 [ActID],[ActName],[Days],[Location],[Price1],[Rating] FROM [ftp_Act]  
WHERE [Location] = 'NT' AND [IsOn]= 1 ORDER BY [ModifyDate] DESC;

INSERT INTO tbl 
SELECT TOP 5 [ActID],[ActName],[Days],[Location],[Price1],[Rating] FROM [ftp_Act]  
WHERE [Location] = 'CW' AND [IsOn]= 1 ORDER BY [ModifyDate] DESC;

SELECT [ActID],[ActName],[Days],[Location],[Price1],[Rating] FROM tbl ORDER BY [Location];

DROP TABLE tbl;

END
GO
/****** Object:  StoredProcedure [dbo].[ftp_Act_Hot]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ftp_Act_Hot] 

AS
BEGIN
  
SELECT TOP 20 [ActID],[ActName],[Rating] FROM [ftp_Act]  ORDER BY [Rating] DESC;

END
GO
/****** Object:  StoredProcedure [dbo].[ftp_Act_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ftp_Act_Modify] 
@action nvarchar(10),
@actID nvarchar(10),
@name nvarchar(50),
@desc nvarchar(250),
@type nvarchar(10),
@day int,
@loc nvarchar(2),
@p1 int,
@p2 int,
@prom bit,
@on bit,
@rate int,
@result nvarchar(150) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	Declare @TrueID nvarchar(12)
    Declare @num int

    

	IF @action = 'Add' 
	 BEGIN
	 BEGIN TRAN -- 交易開始 
	-- 取出現存資料庫中的 ActID  BBK10001--
    SELECT TOP 1 @TrueID = [ActID] FROM [ftp_Act] WITH (UPDLOCK, HOLDLOCK)
    WHERE [ActID] LIKE @actID +'%' ORDER BY [ActID] DESC
	
	-- 若沒有類似的編碼則加入後三碼為 0001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @actID  + '0001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 4)) + 1 
	  	SET @TrueID = @actID + right('000'+convert(varchar(4), CONVERT(nvarchar(4),@num)), 4)
      END

	IF (EXISTS (SELECT * FROM  [ftp_Act] WHERE  [ActID] = @TrueID ))
	  BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '編號重複，程序終止！';
		  Return
      END

	 INSERT INTO [ftp_Act]
	 ([ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn]) 
	 VALUES
	 (@TrueID,@name,@desc,@type,@day,@loc, @p1, @p2, 0, 1);


		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試寫入資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		COMMIT TRAN -- 完成交易
		SELECT @result = 'OK' + @TrueID;
		Return
	 END
    
	 IF @action = 'Update' 
	  BEGIN
	  BEGIN TRAN -- 交易開始
	    UPDATE [ftp_Act]
		SET 
		[ActDesc]=@desc,
		[ActName]=@name,		
		[Days]=@day,
		[Location]=@loc,
		[Price1]=@p1,
		[Price2]=@p2,	
		[IsOn]=@on,
		[Rating]=@rate,
		[ModifyDate] = getdate()
		WHERE [ActID] = @actID 
    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		COMMIT TRAN -- 完成交易
		SELECT @result = 'OK';
		Return
	  END
	 
	 IF @action = 'Delete' 
	  BEGIN
	  BEGIN TRAN -- 交易開始
	    DELETE FROM [ftp_Act] WHERE [ActID] = @actID;    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

		COMMIT TRAN -- 完成交易
		SELECT @result = 'OK';
		Return
	  END	

    
	    

END
GO
/****** Object:  StoredProcedure [dbo].[ftp_Act_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ftp_Act_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL,
@Days smallint = 1
AS
BEGIN
  DECLARE @totalRow AS INT;

  IF @FilterBy = 'Location'
  BEGIN
   IF @Filter='BIK'
   BEGIN
   ;WITH NTE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS [RowNum],[ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM [ftp_Act]  
	WHERE [Days] = @Days AND [Location] IN ('TP','KL','IL')	  					
	)
	SELECT [ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM NTE 
	WHERE (RowNum > @PageSize * (@PageNumber - 1) ) AND (RowNum <= @PageSize * @PageNumber) ORDER BY RowNum;
	--資料總數 --
	SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [Days] = @Days AND [Location] IN ('TP','KL','IL'); 	 
	RETURN @totalRow;
   END

   IF @Filter='TCM'
   BEGIN
   ;WITH NTE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS [RowNum],[ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM [ftp_Act]  
	WHERE [Days] = @Days AND [Location] IN ('TY','CH','ML')	  					
	)
	SELECT [ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM NTE 
	WHERE (RowNum > @PageSize * (@PageNumber - 1) ) AND (RowNum <= @PageSize * @PageNumber) ORDER BY RowNum;
	--資料總數 --
	SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [Days] = @Days AND [Location] IN ('TY','CH','ML'); 	 
	RETURN @totalRow;
   END

   IF @Filter='CCT'
   BEGIN
   ;WITH NTE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS [RowNum],[ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM [ftp_Act]  
	WHERE [Days] = @Days AND [Location] IN ('TC','NT','CW')	  					
	)
	SELECT [ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM NTE 
	WHERE (RowNum > @PageSize * (@PageNumber - 1) ) AND (RowNum <= @PageSize * @PageNumber) ORDER BY RowNum;
	--資料總數 --
	SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [Days] = @Days AND [Location] IN ('TC','NT','CW'); 	 
	RETURN @totalRow;
   END

   IF @Filter='YCN'
   BEGIN
   ;WITH NTE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS [RowNum],[ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM [ftp_Act]  
	WHERE [Days] = @Days AND [Location] IN ('YL','CY','TN')	  					
	)
	SELECT [ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM NTE 
	WHERE (RowNum > @PageSize * (@PageNumber - 1) ) AND (RowNum <= @PageSize * @PageNumber) ORDER BY RowNum;
	--資料總數 --
	SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [Days] = @Days AND [Location] IN ('YL','CY','TN'); 	 
	RETURN @totalRow;
   END

   IF @Filter='KPP'
   BEGIN
   ;WITH NTE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS [RowNum],[ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM [ftp_Act]  
	WHERE [Days] = @Days AND [Location] IN ('KS','PT')	  					
	)
	SELECT [ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM NTE 
	WHERE (RowNum > @PageSize * (@PageNumber - 1) ) AND (RowNum <= @PageSize * @PageNumber) ORDER BY RowNum;
	--資料總數 --
	SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [Days] = @Days AND [Location] IN ('KS','PT'); 	 
	RETURN @totalRow;
   END

   IF @Filter='HTT'
   BEGIN
   ;WITH NTE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS [RowNum],[ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM [ftp_Act]  
	WHERE [Days] = @Days AND [Location] IN ('HL','TT')	  					
	)
	SELECT [ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM NTE 
	WHERE (RowNum > @PageSize * (@PageNumber - 1) ) AND (RowNum <= @PageSize * @PageNumber) ORDER BY RowNum;
	--資料總數 --
	SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [Days] = @Days AND [Location] IN ('HL','TT'); 	 
	RETURN @totalRow;
   END

   IF @Filter='ISL'
   BEGIN
   ;WITH NTE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS [RowNum],[ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM [ftp_Act]  
	WHERE [Days] = @Days AND [Location] IN ('PH','JM','MT','LT','LY','LC')	  					
	)
	SELECT [ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM NTE 
	WHERE (RowNum > @PageSize * (@PageNumber - 1) ) AND (RowNum <= @PageSize * @PageNumber) ORDER BY RowNum;
	--資料總數 --
	SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [Days] = @Days AND [Location] IN ('PH','JM','MT','LT','LY','LC'); 	 
	RETURN @totalRow;
   END
   ------------- END Location ------------------
  END
  ELSE
  BEGIN
  ;WITH NTE AS (
	SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS [RowNum],[ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM [ftp_Act]  
	WHERE 	
	(
	  @Filter IS NULL OR 
	  CASE 
		 WHEN @FilterBy='ID' THEN [ActID]	
		 WHEN @FilterBy='Name' THEN [ActName]	
		 WHEN @FilterBy='City' THEN [Location]	
	  END 
	  Like @Filter + '%'
	) 
	AND [Days] = @Days 					
	)
	SELECT [ActID],[ActName],[ActDesc],[ActType],[Days],[Location],[Price1],[Price2],[IsPromotion],[IsOn],[Rating]
	FROM NTE 
	WHERE (RowNum > @PageSize * (@PageNumber - 1) ) AND (RowNum <= @PageSize * @PageNumber) ORDER BY RowNum;	
    
	-- 以下是另一組 DataSet 用來取得資料總數 --
	SELECT @totalRow = COUNT([ActID]) FROM [ftp_Act] 
	WHERE (@Filter IS NULL OR 
			CASE 
			 WHEN @FilterBy='ID' THEN [ActID]	
			 WHEN @FilterBy='Name' THEN [ActName]	
			 WHEN @FilterBy='City' THEN [Location]	
		    END  
			Like @Filter + '%'
		  ) 
		  AND [Days] = @Days 
	RETURN @totalRow;
  END  
END
GO
/****** Object:  StoredProcedure [dbo].[ftp_Adv_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ftp_Adv_Get]

AS
BEGIN
 --   IF @advtype = 'N'
	--BEGIN
	--SELECT [Id], [Desc],[Title],[GoToUrl],[PictureUrl],[AdvType] FROM [ftp_Adv] ORDER BY [ModifyDate] DESC;	
	--END
	--ELSE
	--BEGIN
	--  SELECT [Id], [Desc],[Title],[GoToUrl],[PictureUrl],[AdvType] FROM [ftp_Adv] 	 
	-- WHERE [AdvType]=@advtype ORDER BY [ModifyDate] DESC;
	--END
	  SELECT [Id], [Desc],[Title],[GoToUrl],[PictureUrl],[AdvType] FROM [ftp_Adv] ORDER BY [ModifyDate] DESC;	
END
GO
/****** Object:  StoredProcedure [dbo].[ftp_Adv_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		ERIC LI
-- Create date: 12/21/2017
-- Description:	戶外教學輪播廣告
-- =============================================

CREATE PROCEDURE [dbo].[ftp_Adv_Modify] 
@Id int,
@title nvarchar(255),
@desc nvarchar(255),
@gourl nvarchar(max),
@picurl nvarchar(max),
@advtype nvarchar(2),
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	
    -- 交易開始
    BEGIN TRAN
    
	IF @Action = 'Add' 
	 BEGIN
	    INSERT INTO [ftp_Adv]	
		([Desc],[Title],[GoToUrl],[PictureUrl],[AdvType]) VALUES (@desc,@title,@gourl,@picurl,@advtype);    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '新增輪播圖失敗！' + ERROR_MESSAGE();
		  Return
		 END
	 END
    
	 IF @Action = 'Update' 
	  BEGIN
	    UPDATE [ftp_Adv] 
		SET [Desc]=@desc,[Title]=@title,[GoToUrl]=@gourl,[PictureUrl]=@picurl,[AdvType]=@advtype, [ModifyDate] = GETDATE() 
		WHERE [Id] = @Id;
    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '更新輪播圖失敗！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [ftp_Adv] WHERE [Id] = @Id;    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '刪除輪播圖失敗！' + ERROR_MESSAGE();
		  Return
		 END
	  END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return    

END
GO
/****** Object:  StoredProcedure [dbo].[mcp_Act_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_Act_Get]
@SubjectNo int = 0,
@SeasonType NVARCHAR(1) = 'V'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF @SubjectNo > 0
	 BEGIN
	  SELECT m.[SeqNo],m.[Name],d.[ActID],d.[ActName],d.[ActDesc],d.[ActSubject] FROM mcp_Subject m 
	  INNER JOIN mcp_itinerary d ON m.[Name] = d.[ActSubject] 
	  WHERE [IsOn]=1 AND m.[SeqNo] = @SubjectNo  
	  ORDER BY d.[ModifyDate] DESC;
	 END
	ELSE
	 BEGIN
	  SELECT m.[SeqNo],m.[Name],d.[ActID],d.[ActName],d.[ActDesc],d.[ActSubject] FROM mcp_Subject m 
	  INNER JOIN mcp_itinerary d ON m.[Name] = d.[ActSubject] 
	  WHERE [IsOn]=1 AND d.[ActType] = @SeasonType  
	  ORDER BY m.[Name], d.[ModifyDate] DESC;
	 END

  
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_Act_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_Act_Modify] 
@action nvarchar(10),
@actID nvarchar(10),
@name nvarchar(50),
@desc nvarchar(250),
@type nvarchar(10),
@season nvarchar(10),
@subject nvarchar(20),
@loc nvarchar(2),
@day int,
@p2 int,
@p4 int,
@pb int,
@ps int,
@on bit,
@rate int,
@result nvarchar(150) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	Declare @TrueID nvarchar(12)
    Declare @num int

    
    

	IF @action = 'Add' 
	 BEGIN
	 BEGIN TRAN -- 交易開始 
	-- 取出現存資料庫中的 ActID  BBK10001--
    SELECT TOP 1 @TrueID = [ActID] FROM [mcp_itinerary] WITH (UPDLOCK, HOLDLOCK)
    WHERE [ActID] LIKE @actID +'%' ORDER BY [ActID] DESC
	
	-- 若沒有類似的編碼則加入後三碼為 0001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @actID  + '0001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 4)) + 1 
	  	SET @TrueID = @actID + right('000'+convert(varchar(4), CONVERT(nvarchar(4),@num)), 4)
      END

	IF (EXISTS (SELECT * FROM  [mcp_itinerary] WHERE  [ActID] = @TrueID ))
	  BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '編號重複，程序終止！';
		  Return
      END

	 INSERT INTO [mcp_itinerary]
	 ([ActID],[ActName],[ActDesc],[ActType],[ActSeason],[ActSubject],[Days],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn]) 
	 VALUES
	 (@TrueID,@name,@desc,@type,@season,@subject,@day,@loc, @p2, @p4, @pb, @ps, 0, 1);

		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試寫入資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		COMMIT TRAN -- 完成交易
		SELECT @result = 'OK' + @TrueID;
		Return
	 END
    
	 IF @action = 'Update' 
	  BEGIN
	  BEGIN TRAN -- 交易開始
	    UPDATE [mcp_itinerary]
		SET 
		[ActDesc]=@desc,
		[ActName]=@name,
		[ActType]=@type,
		[ActSeason]=@season,
		[ActSubject]=@subject,
		[Days]=@day,
		[Location]=@loc,
		[Price2]=@p2,
		[Price4]=@p4,
		[PriceBasic]=@pb,
		[PriceSpecial]=@ps,
		[IsOn]=@on,
		[Rating]=@rate,
		[ModifyDate] = getdate()
		WHERE [ActID] = @actID 
    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		COMMIT TRAN -- 完成交易
		SELECT @result = 'OK';
		Return
	  END
	 
	 IF @action = 'Delete' 
	  BEGIN
	  BEGIN TRAN -- 交易開始
	    DELETE FROM [mcp_itinerary] WHERE [ActID] = @actID;    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

		COMMIT TRAN -- 完成交易
		SELECT @result = 'OK';
		Return
	  END	

    
	    

END
GO
/****** Object:  StoredProcedure [dbo].[mcp_Act_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_Act_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL,
@Days smallint =1
AS
BEGIN
  DECLARE @totalRow AS INT;
  

  IF @FilterBy='ID'	
  BEGIN    
	 ;WITH NTE AS
    (
      SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS RowNum ,
	   [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]     
	  FROM [mcp_itinerary]  
	  WHERE [Days] = @Days AND [ActID] LIKE @Filter + '%'  
    )
    SELECT [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]
    FROM NTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum;
	
	-- 以下是另一組 DataSet 用來取得資料總數 --
	 SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] 
	 WHERE [Days] = @Days AND [ActID] LIKE @Filter + '%' 

	RETURN @totalRow;
  END
  ELSE IF @FilterBy = 'ActType'
    BEGIN
		IF @Filter='BBK' 
			BEGIN
			 ;WITH NTE AS
			(
			  SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS RowNum ,
			  [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]     
			  FROM [mcp_itinerary]  
			  WHERE [ActType] = '企業旅遊' AND [Location] IN ('TP','KL') 		
			)
			SELECT [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]
			FROM NTE 
			WHERE 
			  (RowNum > @PageSize * (@PageNumber - 1) )
			  AND 
			  (RowNum <= @PageSize * @PageNumber )
			ORDER BY RowNum;
	
			-- 以下是另一組 DataSet 用來取得資料總數 --
			 SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [ActType] = '企業旅遊' AND [Location] IN ('TP','KL') 	 
			 RETURN @totalRow; 
			END   

			IF @Filter='TCM' 
			BEGIN
			 ;WITH NTE AS
			(
			  SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS RowNum ,
			  [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]     
			  FROM [mcp_itinerary]  
			  WHERE [ActType] = '企業旅遊' AND [Location] IN ('TY','CH','ML') 		
			)
			SELECT [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]
			FROM NTE 
			WHERE 
			  (RowNum > @PageSize * (@PageNumber - 1) )
			  AND 
			  (RowNum <= @PageSize * @PageNumber )
			ORDER BY RowNum;
	
			-- 以下是另一組 DataSet 用來取得資料總數 --
			 SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [ActType] = '企業旅遊' AND [Location] IN ('TY','CH','ML') 	  
			 RETURN @totalRow;
			END   
			
			IF @Filter='CCT' 
			BEGIN
			 ;WITH NTE AS
			(
			  SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS RowNum ,
			  [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]     
			  FROM [mcp_itinerary]  
			  WHERE [ActType] = '企業旅遊' AND [Location] IN ('TC','NT','CW') 		
			)
			SELECT [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]
			FROM NTE 
			WHERE 
			  (RowNum > @PageSize * (@PageNumber - 1) )
			  AND 
			  (RowNum <= @PageSize * @PageNumber )
			ORDER BY RowNum;
	
			-- 以下是另一組 DataSet 用來取得資料總數 --
			 SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [ActType] = '企業旅遊' AND [Location] IN ('TC','NT','CW') 	  
			 RETURN @totalRow;
			END   
			
			IF @Filter='YCN' 
			BEGIN
			 ;WITH NTE AS
			(
			  SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS RowNum ,
			  [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]     
			  FROM [mcp_itinerary]  
			  WHERE [ActType] = '企業旅遊' AND [Location] IN ('YL','TN','CY')  		
			)
			SELECT [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]
			FROM NTE 
			WHERE 
			  (RowNum > @PageSize * (@PageNumber - 1) )
			  AND 
			  (RowNum <= @PageSize * @PageNumber )
			ORDER BY RowNum;
	
			-- 以下是另一組 DataSet 用來取得資料總數 --
			 SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [ActType] = '企業旅遊' AND [Location] IN ('YL','TN','CY')  
			 RETURN @totalRow;	  
			END 

			IF @Filter='KPL' 
			BEGIN
			 ;WITH NTE AS
			(
			  SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS RowNum ,
			  [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]     
			  FROM [mcp_itinerary]  
			  WHERE [ActType] = '企業旅遊' AND [Location] IN ('KS','PT','LC')  		
			)
			SELECT [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]
			FROM NTE 
			WHERE 
			  (RowNum > @PageSize * (@PageNumber - 1) )
			  AND 
			  (RowNum <= @PageSize * @PageNumber )
			ORDER BY RowNum;
	
			-- 以下是另一組 DataSet 用來取得資料總數 --
			 SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [ActType] = '企業旅遊' AND [Location] IN ('KS','PT','LC')  
			 RETURN @totalRow;	  
			END   

			IF @Filter='IHT' 
			BEGIN
			 ;WITH NTE AS
			(
			  SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS RowNum ,
			  [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]     
			  FROM [mcp_itinerary]  
			  WHERE [ActType] = '企業旅遊' AND [Location] IN ('IL','HL','TT','LT')  		
			)
			SELECT [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]
			FROM NTE 
			WHERE 
			  (RowNum > @PageSize * (@PageNumber - 1) )
			  AND 
			  (RowNum <= @PageSize * @PageNumber )
			ORDER BY RowNum;
	
			-- 以下是另一組 DataSet 用來取得資料總數 --
			 SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [ActType] = '企業旅遊' AND [Location] IN ('IL','HL','TT','LT') 	
			 RETURN @totalRow;  
			END   
			 
			 IF @Filter='ISL' 
			BEGIN
			 ;WITH NTE AS
			(
			  SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS RowNum ,
			  [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]     
			  FROM [mcp_itinerary]  
			  WHERE [ActType] = '企業旅遊' AND [Location] IN ('PH','JM','MT','LT','LY')  		
			)
			SELECT [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]
			FROM NTE 
			WHERE 
			  (RowNum > @PageSize * (@PageNumber - 1) )
			  AND 
			  (RowNum <= @PageSize * @PageNumber )
			ORDER BY RowNum;
	
			-- 以下是另一組 DataSet 用來取得資料總數 --
			 SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] WHERE [ActType] = '企業旅遊' AND [Location] IN ('PH','JM','MT','LT','LY') 	
			 RETURN @totalRow;  
			END  

		END
  ELSE
	  BEGIN
		  IF @FilterBy='SeqNo'	
		  BEGIN
		   SELECT @Filter = [Name] FROM [mcp_Subject] WHERE [SeqNo] = CONVERT(int,@Filter);
		   SET @FilterBy='Subject'
		  END

		  ;WITH NTE AS
			(
			  SELECT ROW_NUMBER() OVER ( ORDER BY [ActID] ) AS RowNum ,
			   [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]     
			  FROM [mcp_itinerary]  
			  WHERE 	
				(@Filter IS NULL OR 
					CASE WHEN @FilterBy='Subject'	THEN [ActSubject]
						 WHEN @FilterBy='Location'	THEN [Location]
						 WHEN @FilterBy='Season'	THEN [ActSeason]
						 WHEN @FilterBy='Type'		THEN [ActType]
					END 
					Like @Filter + '%'
				) 
				-- AND [Days] = @Days 
					
			)
			SELECT [ActID],[ActName],[ActDesc],[ActSubject],[ActType],[Days],[ActSeason],[Location],[Price2],[Price4],[PriceBasic],[PriceSpecial],[IsPromotion],[IsOn],[Rating]
			FROM NTE 
			WHERE 
			  (RowNum > @PageSize * (@PageNumber - 1) )
			  AND 
			  (RowNum <= @PageSize * @PageNumber )
			ORDER BY RowNum;

	
    
			-- 以下是另一組 DataSet 用來取得資料總數 --
			 SELECT @totalRow = COUNT([ActID]) FROM [mcp_itinerary] 
			 WHERE 	
			(@Filter IS NULL OR 
					CASE WHEN @FilterBy='Subject'	THEN [ActSubject]
						 WHEN @FilterBy='Location'	THEN [Location]
						 WHEN @FilterBy='Season'	THEN [ActSeason]
						 WHEN @FilterBy='Type'		THEN [ActType]
					END 
					Like @Filter + '%'
			) 
			-- AND [Days] = @Days 
			RETURN @totalRow;
		  END     
	END
GO
/****** Object:  StoredProcedure [dbo].[mcp_Adv_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_Adv_Get]
@advtype nvarchar(2)
AS
BEGIN
    IF @advtype = 'N'
	BEGIN
	SELECT [Id], [Desc],	[Title],[GoToUrl],[PictureUrl],[AdvType] FROM [mcp_Adv];	
	END
	ELSE
	BEGIN
	  SELECT [Id], [Desc],	[Title],[GoToUrl],[PictureUrl],[AdvType] FROM [mcp_Adv] 	 
	 WHERE [AdvType]=@advtype ;
	END
	  
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_Adv_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		ERIC LI
-- Create date: 3/27/2017
-- Description:	公司行號輪播廣告
-- =============================================

CREATE PROCEDURE [dbo].[mcp_Adv_Modify] 
@Id int,
@title nvarchar(255),
@desc nvarchar(255),
@gourl nvarchar(max),
@picurl nvarchar(max),
@advtype nvarchar(2),
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	
    -- 交易開始
    BEGIN TRAN
    
	IF @Action = 'Add' 
	 BEGIN
	    INSERT INTO [mcp_Adv]	
		([Desc],	[Title],[GoToUrl],[PictureUrl],[AdvType]) VALUES (@desc,@title,@gourl,@picurl,@advtype);    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試寫入資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	 END
    
	 IF @Action = 'Update' 
	  BEGIN
	    UPDATE [mcp_Adv] 
		SET [Desc]=@desc,[Title]=@title,[GoToUrl]=@gourl,[PictureUrl]=@picurl,[AdvType]=@advtype 
		WHERE [Id] = @Id;
    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [mcp_Adv] WHERE [Id] = @Id;    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return    

END
GO
/****** Object:  StoredProcedure [dbo].[mcp_OldCust]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_OldCust]
@name NVARCHAR(50),
@sid NVARCHAR(10) 
AS
BEGIN
	SELECT COUNT([Name]) FROM [mcp_SwCust] WHERE [Name] = @name AND [SID] = @sid;  
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_Subj_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_Subj_Get]
@type NVARCHAR(12) = 'All'
AS
BEGIN
	SET NOCOUNT ON;

	IF @type = 'All'
	 BEGIN
	  SELECT [SeqNo],[Name],[Type] FROM [mcp_Subject] ORDER BY [SeqNo];
	 END
	ELSE
	 BEGIN
	  SELECT [SeqNo],[Name],[Type] FROM [mcp_Subject] 
	  WHERE [Type] = @type  
	  ORDER BY [SeqNo];
	 END
  
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_Subject_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_Subject_Modify] 
@seqno int,
@name nvarchar(50),
@type nvarchar(12),
@action nvarchar(10),
@result nvarchar(150) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	IF @action = 'Add' 
	 BEGIN
	 BEGIN TRAN -- 交易開始 

	 INSERT INTO [mcp_Subject] ([Name],[Type])  VALUES (@name, @type);
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試寫入資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		COMMIT TRAN -- 完成交易
		SELECT @result = 'OK' ;
		Return
	 END
    
	 IF @action = 'Update' 
	  BEGIN
	  BEGIN TRAN -- 交易開始
	    UPDATE [mcp_Subject] SET [Name]=@name, [Type]=@type WHERE [SeqNo] = @seqno
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		COMMIT TRAN -- 完成交易
		SELECT @result = 'OK';
		Return
	  END
	 
	 IF @action = 'Delete' 
	  BEGIN
	  BEGIN TRAN -- 交易開始
	    DELETE FROM [mcp_Subject] WHERE [SeqNo] = @seqno;    
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

		COMMIT TRAN -- 完成交易
		SELECT @result = 'OK';
		Return
	  END	
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Joiner_checker]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Joiner_checker] 
@name NVARCHAR(50) ,
@sid NVARCHAR(20)
AS
BEGIN

SELECT TOP 1
DTL.[Name],
DTL.[SID],
OD.[IsBuy1],
OD.[IsBuy2],
OD.[IsBuy3],
OD.[IsBuy4],
DTL.[IsVeg],   
DTL.[IsSwim],
DTL.[Size],
DTL.[Location],
DTL.[Comment]    
FROM [mcp_SwOd] AS OD 
LEFT JOIN 
[mcp_SwOdt] AS DTL
ON 
OD.[OrderID] = DTL.[OrderID ]
WHERE 	
DTL.[Name]= @name AND DTL.[SID]=@sid
    
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Od_Add]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Od_Add] 
	-- Add the parameters for the stored procedure here
    @ORDERLIST AS dbo.mcp_sw_od_tbl READONLY,
    @DETAILLIST AS dbo.mcp_sw_odt_tbl READONLY,
    @result nvarchar(150) OUTPUT
AS
BEGIN
    Declare @preID nvarchar(10)	 
    Declare @name nvarchar(50)
    Declare @sid nvarchar(20)   
    Declare @dob smalldatetime
    Declare @size nvarchar(6)
    Declare @cell nvarchar(20)
    Declare @email nvarchar(256)  
	Declare @unitprice int  
	Declare @isveg bit
	Declare @isold bit
	Declare @isearly bit
	Declare @isswim bit
    Declare @cmt nvarchar(255)  
    Declare @loc nvarchar(20)
	Declare @tempf nvarchar(256)

    Declare @TrueID nvarchar(12)
	Declare @oldCust int    
	Declare @total int
	Declare @num int

	SET @total=0;
    SET @oldCust=0;
	SET @num=0;

	SET NOCOUNT ON;
    
    -- 交易開始
    BEGIN TRAN
   
    SELECT @preID = a.[OrderID], @total = a.[TotalPrice] FROM @ORDERLIST AS a
    
    -- 取出現存資料庫中的 OrderID --
    SELECT TOP 1 @TrueID = [OrderID] FROM [mcp_SwOd] WITH (UPDLOCK, HOLDLOCK)
    WHERE [OrderID] LIKE @preID +'%' ORDER BY [OrderID] DESC

     -- 若沒有類似的編碼則加入後三碼為 001
    IF(@TrueID is NULL)
      BEGIN
     	SET @TrueID = @preID  + '001';
      END
    ELSE
      BEGIN
      -- 若有類似的編碼則先取出最近一筆的編碼，然後將後三碼加上 1 作為新的編碼
      	SET @num = CONVERT(int,RIGHT(@TrueID, 3)) + 1 
	  	SET @TrueID = @preID + right('000'+convert(varchar(3), CONVERT(nvarchar(3),@num)), 3)
      END
      
     
    IF(NOT @TrueID is NULL)
      BEGIN
		IF (EXISTS (SELECT * FROM  [mcp_SwOd] WHERE  [OrderID] = @TrueID ))
		BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = '單號重覆，程序終止！';
		  Return
      END
	END

	SET @num =0;

	 -- 檢查是否有重複報名
	 /*
	 Declare CUR CURSOR FOR
     SELECT d.[Name], d.[SID] FROM @DETAILLIST AS d
     OPEN CUR 
	 Fetch Next From CUR INTO @name, @sid
	 While @@FETCH_STATUS = 0
	  BEGIN
	    IF (NOT EXISTS (SELECT * FROM  [mcp_SwOdt] WHERE [Name]=@name AND [SID]=@sid))
		 BEGIN
		  ROLLBACK TRAN		   	       
		  SELECT @result = @name + '已在報名清單中，無法重覆報名！';
		  Return
         END
		 --SET @count = @count + 1;
		Fetch Next From CUR INTO @name, @sid
	  END
     CLOSE CUR 
	 DEALLOCATE CUR    
	*/

    INSERT INTO [mcp_SwOd]
	( [OrderID],[Name],[Tel],[Cell],[Address],[Email],[TotalPrice],[IsBuy1],[IsBuy2],[IsBuy3],[IsBuy4],[RoomN2],
      [RoomV2],[Room3],[Room4],[Room6],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source] ,[CreateDay]
	)
    SELECT 
     @TrueID, b.[Name], b.[Tel], b.[Cell], b.[Address], b.[Email], @total, b.[IsBuy1],     
     b.[IsBuy2], b.[IsBuy3], b.[IsBuy4], 0,0,0,0,0,0,0, b.[IsPromote], b.[Comment],b.[Source],GETDATE()
    FROM @ORDERLIST AS b
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result ='寫入主表單時發生錯誤，程序終止！'
	  Return
	 END
    
    Declare POINTER CURSOR FOR
    SELECT 
	t.[Name],t.[SID],t.[DOB],t.[Cell],t.[Email],t.[Size],t.[UnitPrice],
    t.[IsVeg],t.[IsOld],t.[IsEarly],t.[IsSwim],t.[Comments],t.[Location],t.[TempField]
    FROM @DETAILLIST AS t
    OPEN POINTER 
	-- 取出第一筆資料  
	Fetch Next From POINTER INTO 
	@name, @sid, @dob, @cell, @email, @size,@unitprice,@isveg,@isold,@isearly,@isswim,@cmt,@loc,@tempf 
	While @@FETCH_STATUS = 0
    BEGIN    
    BEGIN TRY	
	    -- 是否為舊生--
		IF (EXISTS (SELECT * FROM  [mcp_SwCust] WHERE [Name]=@name AND [SID]=@sid))
		 BEGIN	
		  /*   	     
		   IF (@loc <>  '自行前往')
		    BEGIN
			 SELECT @oldCust = @oldCust + 1;
		     SET @isold = 1;
		     SET @unitprice = @unitprice -50;	
			END
		  */	

		   SELECT @oldCust = @oldCust + 1;
		   SET @isold = 1;
		   SET @unitprice = @unitprice -50;
		  		  	  
         END
        ELSE
		 BEGIN
		   SET @isold = 0;
		 END
		
    	INSERT INTO [mcp_SwOdt]
		(
	 	  [OrderID],[Name],[SID],[DOB],[Cell],[Email],[Size],[UnitPrice],[IsVeg],[IsOld],[IsEarly],[IsSwim],[Comment],[Location],[TempField]
		)
		VALUES
		(
	  	  @TrueID, @name, @sid, @dob, @cell, @email, @size,@unitprice,@isveg,@isold,@isearly,@isswim,@cmt,@loc,@tempf 	
    	)
    END TRY
	BEGIN CATCH  
	  ROLLBACK TRAN 
	  SELECT @result = '嘗試寫入明細資料列時發生錯誤：' + ERROR_MESSAGE();      
      Return
	END CATCH
    
    IF @@ERROR <> 0 
	 BEGIN
	  ROLLBACK TRAN	  
	  SELECT @result = '嘗試寫入明細資料列時發生錯誤：' + ERROR_MESSAGE();  
	  Return
	 END	
	
    -- 存入成功後再取下一筆資料
	Fetch Next From POINTER INTO 
	@name, @sid, @dob, @cell, @email, @size,@unitprice,@isveg,@isold,@isearly,@isswim,@cmt,@loc,@tempf 
  END
  CLOSE POINTER 
  DEALLOCATE POINTER 
  
  SET @total = @total - (@oldCust * 50);
  -- 更新總金額
  UPDATE [mcp_SwOd] SET [TotalPrice] = @total WHERE [OrderID] = @TrueID;  

  -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' + @TrueID + CONVERT(nvarchar, @total);
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Od_Export]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Od_Export] 
@OrderID NVARCHAR(15) ,
@method NVARCHAR(15)
AS
BEGIN
  DECLARE @totalRow AS INT;
IF @method='email'
 BEGIN
  SELECT 
  a.[OrderID],
  a.[Email] AS [ContactMail],
  a.[TotalPrice],
  a.[IsBuy1],
  a.[IsBuy2],
  a.[IsBuy3],
  a.[IsBuy4],
  a.[RoomN2],
  a.[RoomV2],
  a.[Room3],
  a.[Room4],
  a.[Room6],
  b.[Name],
  b.[SID],
  b.[DOB],
  b.[Cell],
  b.[Email],
  b.[Size],
  b.[UnitPrice],
  b.[IsVeg],
  b.[IsOld],
  b.[IsEarly],
  b.[IsSwim],
  b.[Comment] AS [Comments],
  b.[Location],
  b.[TempField]        
  FROM 
  [mcp_SwOd] AS a 
  LEFT JOIN 
  [mcp_SwOdt] AS b
  ON 
  a.OrderID = b.OrderID                 
  WHERE 
  a.[OrderID] = @OrderID; 
 END

IF @method='export'
 BEGIN
	SELECT 
	a.[OrderID],
	a.[Name] AS [Contact], 
	a.[Tel],
	a.[Cell] AS [ContactCell],
	a.[Address],
	a.[Email] AS [ContactMail],
	a.[TotalPrice],
	a.[IsBuy1],
	a.[IsBuy2],
	a.[IsBuy3],
	a.[IsBuy4],
	a.[RoomN2],
	a.[RoomV2],
	a.[Room3],
	a.[Room4],
	a.[Room6],
	a.[IsPaid],
	a.[IsConfirm],
	a.[IsPromote],
	a.[Comment],
	a.[Source] ,
	a.[CreateDay],
	b.[Name],
	b.[SID],
	b.[DOB],
	b.[Cell],
	b.[Email],
	b.[Size],
	b.[UnitPrice],
	b.[IsVeg],
	b.[IsOld],
	b.[IsEarly],
	b.[IsSwim],
	b.[Comment] AS [Comments],
	b.[Location],
	b.[TempField] 
	FROM 
	[mcp_SwOd] AS a 
	LEFT JOIN 
	[mcp_SwOdt] AS b
	ON 
	a.[OrderID] = b.[OrderID]
	ORDER BY a.[CreateDay] DESC, a.OrderID;

 END
    
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Od_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Od_Modify] 
@ORDERLIST AS dbo.mcp_sw_od_tbl READONLY,
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN	    
    Declare @ID nvarchar(15)	
    Declare @name nvarchar(50)
    Declare @cell nvarchar(20)
	Declare @tel nvarchar(20)
    Declare @email nvarchar(256)  
	Declare @addr nvarchar(256) 
	Declare @totalprice int  
	Declare @ispaid bit
	Declare @isconfirm bit
    Declare @cmt nvarchar(255)  
	Declare @buy1 int  
	Declare @buy2 int  
	Declare @buy3 int  
	Declare @buy4 int  
	Declare @roomN2 int  
	Declare @roomV2 int  
	Declare @room3 int  
	Declare @room4 int
	Declare @room6 int	
	
	SELECT 	   
	   @ID=[OrderID],
	   @name=[Name],
	   @cell=[Cell],
	   @tel=[Tel],
	   @addr = [Address],
	   @totalprice = [TotalPrice],
	   @email=[Email],
	   @cmt=[Comment],
	   @ispaid=[IsPaid],
	   @isconfirm=[IsConfirm],
	   @buy1=[IsBuy1],
	   @buy2=[IsBuy2],
	   @buy3=[IsBuy3],
	   @buy4=[IsBuy4],
	   @roomN2=[RoomN2],
	   @roomV2=[RoomV2],
	   @room3=[Room3],
	   @room4=[Room4],
	   @room6=[Room6] 
    FROM @ORDERLIST AS b

	--SELECT @result = CONVERT(nvarchar(20), @Seqno) + ', ' + @ID 
	--+ ', ' + @name + ', ' + @sid + ', ' + @eid + ', ' + CONVERT(nvarchar(20), @dob) + ', ' + @cmt + ', ' + @actid + ', ' + @actname;
	--Return 

		-- 交易開始
    BEGIN TRAN
    
	 IF @Action = 'Update' 
	  BEGIN
	    UPDATE [dbo].[mcp_SwOd]   SET 		
		[Name] = @name
		,[Tel] =@tel
        ,[Cell] = @cell
		,[Address] = @addr
		,[Email] = @email
		,[TotalPrice] = @totalprice
		,[IsBuy1] = @buy1
		,[IsBuy2] = @buy2
		,[IsBuy3] = @buy3
		,[IsBuy4] = @buy4
		,[RoomN2] = @roomN2
		,[RoomV2] = @roomV2
		,[Room3] = @room3
		,[Room4] = @room4
		,[Room6] = @room6
		,[IsPaid] = @ispaid
		,[IsConfirm] = @isconfirm
		,[Comment] = @cmt
		WHERE [OrderID] = @ID
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [dbo].[mcp_SwOdt]  WHERE [OrderID] = @ID;     
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		 
		DELETE FROM [dbo].[mcp_SwOd]  WHERE [OrderID] = @ID;     
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除主單資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
		 		
	   END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Od_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Od_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
  DECLARE @totalRow AS INT;
IF @FilterBy='All'
 BEGIN
 ;WITH NTE AS
    (
      SELECT ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS RowNum ,
	   [OrderID],[Name],[Tel],[Cell],[Address],[Email],[TotalPrice],[IsBuy1],[IsBuy2],[IsBuy3],[IsBuy4],[RoomN2],
       [RoomV2],[Room3],[Room4],[Room6],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source] ,[CreateDay]        
		FROM [mcp_SwOd] 		
    )
    SELECT [OrderID],[Name],[Tel],[Cell],[Address],[Email],[TotalPrice],[IsBuy1],[IsBuy2],[IsBuy3],[IsBuy4],[RoomN2],
      [RoomV2],[Room3],[Room4],[Room6],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source] ,[CreateDay]
    FROM NTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum;

	-- 以下是另一組 DataSet 用來取得資料總數 --
	;WITH CTE AS
    (
      SELECT [OrderID] FROM [mcp_SwOd] 					
    )
    SELECT @totalRow = COUNT(*) OVER() FROM CTE 

	RETURN @totalRow;
 END
ELSE
 BEGIN

   IF @FilterBy='Oid'
   BEGIN
		;WITH STE AS
		(
		  SELECT [OrderID], ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS RowNum ,
		    [Name], [Tel], [Cell], [Address], [Email], [TotalPrice], [IsBuy1], [IsBuy2],
		    [IsBuy3], [IsBuy4], [RoomN2],[RoomV2], [Room3], [Room4], [Room6],
		    [IsPaid], [IsConfirm], [IsPromote], [Comment],[Source] , [CreateDay]       
			FROM [mcp_SwOd] 
			WHERE [OrderID] Like @Filter + '%'	
		)
		SELECT  [OrderID],[Name],[Tel],[Cell],[Address],[Email],[TotalPrice],[IsBuy1],[IsBuy2],[IsBuy3],[IsBuy4],[RoomN2], [RoomV2],[Room3],[Room4],[Room6],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source] ,[CreateDay] 
		FROM STE 
		WHERE 
		  (RowNum > @PageSize * (@PageNumber - 1) )
		  AND 
		  (RowNum <= @PageSize * @PageNumber )
		ORDER BY RowNum;

		 -- 以下是另一組 DataSet 用來取得資料總數 --
		;WITH CTE AS
		(
		  SELECT [OrderID]  FROM [mcp_SwOd] WHERE [OrderID] Like @Filter + '%'	
		)
		SELECT @totalRow = COUNT(*) OVER() FROM CTE 

		RETURN @totalRow;
   END
   ELSE
   BEGIN
		;WITH STE AS
		(
		  SELECT DISTINCT a.[OrderID], ROW_NUMBER() OVER ( ORDER BY a.[OrderID] DESC) AS RowNum ,
		   a.[Name],a.[Tel],a.[Cell],a.[Address],a.[Email],a.[TotalPrice],a.[IsBuy1],a.[IsBuy2],
		   a.[IsBuy3],a.[IsBuy4],a.[RoomN2],a.[RoomV2],a.[Room3],a.[Room4],a.[Room6],
		   a.[IsPaid],a.[IsConfirm],a.[IsPromote],a.[Comment],a.[Source] ,a.[CreateDay]       
			FROM [mcp_SwOd] a LEFT JOIN [mcp_SwOdt]  b
			ON a.OrderID = b.OrderID 
			WHERE 		
			(@Filter IS NULL OR 
						CASE  
								WHEN @FilterBy='Name' THEN b.[Name]
								WHEN @FilterBy='Sid' THEN b.[SID]
						END 
						Like @Filter + '%'
						) 
					
		)
		SELECT  [OrderID],[Name],[Tel],[Cell],[Address],[Email],[TotalPrice],[IsBuy1],[IsBuy2],[IsBuy3],[IsBuy4],[RoomN2],
		  [RoomV2],[Room3],[Room4],[Room6],[IsPaid],[IsConfirm],[IsPromote],[Comment],[Source] ,[CreateDay] 
		FROM STE 
		WHERE 
		  (RowNum > @PageSize * (@PageNumber - 1) )
		  AND 
		  (RowNum <= @PageSize * @PageNumber )
		ORDER BY RowNum;

		 -- 以下是另一組 DataSet 用來取得資料總數 --
		;WITH CTE AS
		(
		  SELECT DISTINCT a.[OrderID]    
			FROM [mcp_SwOd] a LEFT JOIN [mcp_SwOdt]  b
			ON a.OrderID = b.OrderID 
			WHERE 
			(@Filter IS NULL OR 
						CASE WHEN @FilterBy='Oid' THEN a.[OrderID]
								WHEN @FilterBy='Name' THEN b.[Name]
								WHEN @FilterBy='Sid' THEN b.[SID]
						END 
						Like @Filter + '%'
			) 					
		)
		SELECT @totalRow = COUNT(*) OVER() FROM CTE 

		RETURN @totalRow;
   END
  
 END
    
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Od_PriceModify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Od_PriceModify] 	
    @price int,
	@result nvarchar(150) output
AS
BEGIN
    Declare @id nvarchar(12)	 
	Declare @seqno int
	Declare @uniteprice int
	Declare @isswim bit

	SET @seqno=0;
    SET @uniteprice=0;
	SET @isswim=0;
	SET @result ='OK';

	SET NOCOUNT ON;
    
    -- 交易開始
    BEGIN TRAN
   
    Declare POINTER CURSOR FOR
    SELECT [SeqNo],[OrderID],[UnitPrice],[IsSwim] FROM [mcp_SwOdt]
    OPEN POINTER 	
	Fetch Next From POINTER INTO  @seqno, @id, @uniteprice, @isswim
	While @@FETCH_STATUS = 0
    BEGIN    
    BEGIN TRY		   
		IF @isswim = 1
		 BEGIN				 
			 SET @uniteprice=@uniteprice+@price;
		     UPDATE [mcp_SwOdt] SET [UnitPrice] = @uniteprice WHERE [OrderID]=@id AND [SeqNo]=@seqno;
			  -- 更新總金額
			 UPDATE [mcp_SwOd] SET [TotalPrice] = [TotalPrice] + @price WHERE [OrderID] = @id;
         END        
    END TRY
	BEGIN CATCH  	  
	  SELECT @result = '發生錯誤：' + ERROR_MESSAGE();      
      BREAK;
	END CATCH
    
    IF @@ERROR <> 0 
	 BEGIN	    
	  SELECT @result = '發生錯誤：' + ERROR_MESSAGE();  
	  BREAK;
	 END	
	
    Fetch Next From POINTER INTO  @seqno, @id, @uniteprice, @isswim
  END
  CLOSE POINTER 
  DEALLOCATE POINTER 

  IF @result <> 'OK'
  BEGIN
	ROLLBACK TRAN
	Return
  END
    -- 完成交易
  COMMIT TRAN 
  SELECT @result = 'OK' ;
  Return    
      
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Odt_Get]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Odt_Get] 
@orderid nvarchar(12)
AS
BEGIN	

  SELECT [SeqNo],[OrderID],[Name],[SID],[DOB],[Cell]
           ,[Email],[Size],[UnitPrice],[IsVeg],[IsOld]
           ,[IsEarly],[IsSwim],[Comment],[Location],[TempField] 
  FROM  [mcp_SwOdt]                
  WHERE [OrderID] =  @orderid;  
  
END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Odt_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Odt_Modify] 
@DETAILLIST AS dbo.mcp_sw_odt_tbl READONLY,
@Action nvarchar(10),
@result nvarchar(50) OUTPUT
AS
BEGIN	    
    Declare @seqno int
    Declare @oid nvarchar(15)	
    Declare @name nvarchar(50)
    Declare @cell nvarchar(20)
	Declare @sid nvarchar(10)
    Declare @email nvarchar(256)  
	Declare @dob smalldatetime
	Declare @price int  
	Declare @isveg bit
	Declare @isswim bit
	Declare @isold bit
	Declare @isearly bit
    Declare @cmt nvarchar(255)  
	Declare @size nvarchar(10)
	Declare @loc nvarchar(20)	

	SELECT 	   
	@seqno=[SeqNo],
	@oid=[OrderID],
	@name=[Name],
	@cell=[Cell],
	@sid=[SID],
	@email=[Email],
	@dob=[DOB],
	@price=[UnitPrice],
	@isveg=[IsVeg],
	@isswim=[IsSwim],
	@isold=[IsOld],
	@isearly=[IsEarly],
	@cmt=[Comments],
	@size=[Size],
	@loc=[Location]	 
    FROM @DETAILLIST AS b

	--SELECT @result = CONVERT(nvarchar(20), @Seqno) + ', ' + @ID 
	--+ ', ' + @name + ', ' + @sid + ', ' + @eid + ', ' + CONVERT(nvarchar(20), @dob) + ', ' + @cmt + ', ' + @actid + ', ' + @actname;
	--Return 

		-- 交易開始
    BEGIN TRAN
    
	 IF @Action = 'Update' 
	  BEGIN
		  UPDATE [dbo].[mcp_SwOdt]  SET        
		  [Name] = @name
		  ,[SID] = @sid
		  ,[DOB] = @dob
		  ,[Cell] = @cell
		  ,[Email] = @email
		  ,[Size] = @size
		  ,[UnitPrice] =@price
		  ,[IsVeg] = @isveg
		  ,[IsOld] = @isold
		  ,[IsEarly] = @isearly
		  ,[IsSwim] = @isswim
		  ,[Comment] = @cmt
		  ,[Location] = @loc     
		WHERE [OrderID] = @oid AND [SeqNo]=@seqno	
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN
	    DELETE FROM [dbo].[mcp_SwOdt]  WHERE [SeqNo]=@seqno;     
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END		
	   END	

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Pay_Modify]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Pay_Modify] 
@PayLIST AS dbo.mcp_sw_pay_tbl READONLY,
@Action nvarchar(20),
@result nvarchar(150) OUTPUT
AS
BEGIN	

    Declare @ID nvarchar(15)
    Declare @name nvarchar(50)
	Declare @tel nvarchar(20)
	Declare @cel nvarchar(20)
	Declare @price int
	Declare @cmt nvarchar(256)
	Declare @type nvarchar(20)
	Declare @acctno int
	Declare @payday datetime	
	Declare @realPrice int

	SET @realPrice = 0 ;

	SELECT 
	   @ID=[OrderID],
	   @name=[Name],
	   @tel=[Tel],
	   @cel=[Cell],
       @price=[TotalPrice],
	   @cmt=[Comment],
	   @type=[PayType],
	   @acctno=[Account],
	   @payday=[PayDay] 	
    FROM @PayLIST AS b

	--SELECT @result = @ID + ',' + @name + ', ' + @cel; 
	--Return
/**/
	-- 交易開始
    BEGIN TRAN
    
	IF @Action = 'Add' 
	  BEGIN
	    SELECT @realPrice = COUNT(*) FROM [mcp_SwOd] WHERE [OrderID]= @ID
		IF @realPrice <=0
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '此一報名編號不存在 ' + @ID;
		  Return
		 END

	    SELECT @realPrice = [TotalPrice] FROM [mcp_SwOd] WHERE [OrderID]= @ID

		IF @realPrice <> @price
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '付款金額不正確，您的應付金額應為 ' + CONVERT(nvarchar, @realPrice);
		  Return
		 END
		 
	    INSERT INTO [mcp_SwPay] 
		([OrderID],[Name],[Tel],[Cell],[TotalPrice],[PayType],[Account],[Comment],[PayDay])
		VALUES
		(@ID,@name,@tel,@cel,@price,@type,@acctno,@cmt,GETDATE())
		
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試新增付款資料時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

		 -- 更新報名主表資料 --  
		 UPDATE [mcp_SwOd] SET [IsPaid] = 1  WHERE [OrderID]= @ID;
		 IF @@ERROR <> 0 
		  BEGIN
			  ROLLBACK TRAN	  
			  SELECT @result = '嘗試更新已付款時發生錯誤！程序終止！' + ERROR_MESSAGE();
			  Return
		  END
	  END

	 IF @Action = 'Update' 
	  BEGIN
	    UPDATE [mcp_SwPay] SET 
		[Name]=@name,
		[Tel]=@tel,
		[Cell]=@cel,
		[TotalPrice]=@price,
		[PayType]=@type,
		[Account]=@acctno,
	    [Comment]=@cmt,
		[PayDay]=@payday	   
		WHERE [OrderID] = @ID; 
		IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試更新資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END
	  END
	 
	 IF @Action = 'Delete' 
	  BEGIN	   
	   DELETE FROM [mcp_SwPay] WHERE [OrderID] = @ID;
	   IF @@ERROR <> 0 
		 BEGIN
		  ROLLBACK TRAN	  
		  SELECT @result = '嘗試刪除明細資料列時發生錯誤！程序終止！' + ERROR_MESSAGE();
		  Return
		 END

	    -- 更新報名主表資料 --  
		 UPDATE [mcp_SwOd] SET [IsPaid] = 0  WHERE [OrderID]= @ID;
		 IF @@ERROR <> 0 
		  BEGIN
			  ROLLBACK TRAN	  
			  SELECT @result = '嘗試更新已付款時發生錯誤！程序終止！' + ERROR_MESSAGE();
			  Return
		  END
	  END	

	  

    -- 完成交易
	COMMIT TRAN 
	SELECT @result = 'OK';
	Return   


END
GO
/****** Object:  StoredProcedure [dbo].[mcp_swim_Pay_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[mcp_swim_Pay_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL
AS
BEGIN
  DECLARE @totalRow AS INT;

 IF @FilterBy='All'
 BEGIN
  ;WITH NTE AS
    (
      SELECT ROW_NUMBER() OVER ( ORDER BY [PayDay] DESC) AS RowNum ,
	   [OrderID],[Name],[Tel],[Cell],[TotalPrice],[PayType],[Account],[Comment],[PayDay]        
	  FROM [mcp_SwPay] 
    )
    SELECT [OrderID],[Name],[Tel],[Cell],[TotalPrice],[PayType],[Account],[Comment],[PayDay]
    FROM NTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum;

	-- 以下是另一組 DataSet 用來取得資料總數 --
	;WITH CTE AS
    (
      SELECT [OrderID] FROM [mcp_SwPay] 
    )
    SELECT @totalRow = COUNT(*) OVER() FROM CTE 

	RETURN @totalRow;
 END
 ELSE
 BEGIN
  ;WITH NTE AS
    (
      SELECT ROW_NUMBER() OVER ( ORDER BY [PayDay] DESC) AS RowNum ,
	   [OrderID],[Name],[Tel],[Cell],[TotalPrice],[PayType],[Account],[Comment],[PayDay]        
	  FROM [mcp_SwPay] 	WHERE	
	  (@Filter IS NULL OR 
					CASE WHEN @FilterBy='Oid' THEN [OrderID]
						 WHEN @FilterBy='Name' THEN [Name]
						 WHEN @FilterBy='Acct' THEN [Account]
					END 
					Like @Filter + '%'
	  ) 
    )
    SELECT [OrderID],[Name],[Tel],[Cell],[TotalPrice],[PayType],[Account],[Comment],[PayDay]
    FROM NTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum;

	-- 以下是另一組 DataSet 用來取得資料總數 --
	;WITH CTE AS
    (
      SELECT [OrderID] FROM [mcp_SwPay] 	WHERE	
	  (@Filter IS NULL OR 
					CASE WHEN @FilterBy='Oid' THEN [OrderID]
						 WHEN @FilterBy='Name' THEN [Name]
						 WHEN @FilterBy='Acct' THEN [Account]
					END 
					Like @Filter + '%'
	  ) 					
    )
    SELECT @totalRow = COUNT(*) OVER() FROM CTE 

	RETURN @totalRow;
 END

END
GO
/****** Object:  StoredProcedure [dbo].[ztest_Od_Paging]    Script Date: 3/5/2019 2:09:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ztest_Od_Paging] 
@PageNumber             INT = 1,
@PageSize               INT = 5,
@Company nvarchar(50),
@FilterBy NVARCHAR(25) = NULL,
@Filter NVARCHAR(50) = NULL,
@TotalCount INT OUTPUT
AS
BEGIN
  DECLARE @totalRow AS INT;
  SET @totalRow = 0 ;

IF @FilterBy='Oid' OR @FilterBy='Cmt'
 BEGIN
 ;WITH NTE AS
    (
      SELECT  ROW_NUMBER() OVER ( ORDER BY [OrderID] DESC) AS RowNum, 
	  [OrderID], [Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address],
      [Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay]       
	  FROM [enterprise_Od] 
		WHERE [Company] = @Company AND 		
		(@Filter IS NULL OR 
		  CASE WHEN @FilterBy='Oid' THEN [OrderID]
			  WHEN @FilterBy='Cmt' THEN [Comment]
		  END 
		  Like @Filter + '%'
		) 					
    )
    SELECT [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address], [Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay]
    FROM NTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum;

	-- 以下是另一組 DataSet 用來取得資料總數 --
	;WITH CTE AS
    (
      SELECT a.[OrderID] FROM [enterprise_Od] a 
	  LEFT JOIN [enterprise_Odt]  b
	  ON a.OrderID = b.OrderID 
	  WHERE 
		a.[Company] = @Company AND 
		(@Filter IS NULL OR 
					CASE
						WHEN @FilterBy='Oid' THEN a.[OrderID]
						WHEN @FilterBy='Cmt' THEN a.[Comment]
					END 
					Like @Filter + '%'
					)
					
    )
    SELECT @totalRow = COUNT(*) OVER() FROM CTE 
	SET @TotalCount = @totalRow;
	RETURN @totalRow;
 END

 IF @FilterBy='Aid'
 BEGIN
  ;WITH STE AS
	(
	   SELECT a.[OrderID], ROW_NUMBER() OVER ( ORDER BY a.[OrderID] DESC) AS RowNum ,
	   a.[Name],a.[Tel1],a.[Tel2],a.[Cell1],a.[cell2],a.[Fax],a.[Address],
       a.[Email],a.[TotalPrice],a.[Comment],a.[Source],a.[Company],[CreateDay]       
		FROM [enterprise_Od] a LEFT JOIN [enterprise_Odt]  b
		ON a.OrderID = b.OrderID
		WHERE 	[Company] = @Company AND b.[ActID] = @Filter
					
	)
	SELECT DISTINCT [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address], [Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay]
	FROM STE ;

	-- 以下是另一組 DataSet 用來取得資料總數 --
	;WITH CTE AS
    (
      SELECT a.[OrderID] FROM [enterprise_Od] a 
	  LEFT JOIN [enterprise_Odt]  b
	  ON a.OrderID = b.OrderID 
	  WHERE 
		a.[Company] = @Company AND b.[ActID] = @Filter					
    )
    SELECT @totalRow = COUNT(DISTINCT [OrderID])  FROM CTE;
	RETURN @totalRow;
 END
 ELSE
 BEGIN
    ;WITH NTE AS
    (
      SELECT DISTINCT a.[OrderID], ROW_NUMBER() OVER ( ORDER BY a.[OrderID] DESC) AS RowNum ,
	   a.[Name],a.[Tel1],a.[Tel2],a.[Cell1],a.[cell2],a.[Fax],a.[Address],
       a.[Email],a.[TotalPrice],a.[Comment],a.[Source],a.[Company],[CreateDay]       
		FROM [enterprise_Od] a LEFT JOIN [enterprise_Odt]  b
		ON a.OrderID = b.OrderID 
		WHERE  a.[Company] = @Company AND 		
		(@Filter IS NULL OR 
					CASE 	WHEN @FilterBy='Name' THEN b.[Name]
							WHEN @FilterBy='Eid' THEN b.[EmpID]
							WHEN @FilterBy='Sid' THEN b.[SID]
					END 
					Like @Filter + '%'
					) 
					
    )
    SELECT [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address], [Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay]
    FROM NTE 
    WHERE 
      (RowNum > @PageSize * (@PageNumber - 1) )
      AND 
      (RowNum <= @PageSize * @PageNumber )
    ORDER BY RowNum;

	--    -- 以下是另一組 DataSet 用來取得資料總數 --
	;WITH CTE AS
    (
      SELECT DISTINCT a.[OrderID]    
		FROM [enterprise_Od] a LEFT JOIN [enterprise_Odt]  b
		ON a.OrderID = b.OrderID 
		WHERE 
		a.[Company] = @Company AND 
		(@Filter IS NULL OR 
					CASE 
							WHEN @FilterBy='Name' THEN b.[Name]
							WHEN @FilterBy='Eid' THEN b.[EmpID]
							WHEN @FilterBy='Sid' THEN b.[SID]							
					END 
					Like @Filter + '%'
					)
					
    )
    SELECT @totalRow = COUNT(*) OVER() FROM CTE 
	SET @TotalCount = @totalRow;
	RETURN @totalRow;
 END

--ELSE
-- BEGIN
--  ;WITH NTE AS
--    (
--      SELECT DISTINCT a.[OrderID], ROW_NUMBER() OVER ( ORDER BY a.[OrderID] DESC) AS RowNum ,
--	   a.[Name],a.[Tel1],a.[Tel2],a.[Cell1],a.[cell2],a.[Fax],a.[Address],
--       a.[Email],a.[TotalPrice],a.[Comment],a.[Source],a.[Company],[CreateDay]       
--		FROM [enterprise_Od] a LEFT JOIN [enterprise_Odt]  b
--		ON a.OrderID = b.OrderID 
--		WHERE  a.[Company] = @Company AND 		
--		(@Filter IS NULL OR 
--					CASE WHEN @FilterBy='Aid' THEN b.[ActID]
--							WHEN @FilterBy='Name' THEN b.[Name]
--							WHEN @FilterBy='Eid' THEN b.[EmpID]
--							WHEN @FilterBy='Sid' THEN b.[SID]
--					END 
--					Like @Filter + '%'
--					) 
					
--    )
--    SELECT [OrderID],[Name],[Tel1],[Tel2],[Cell1],[cell2],[Fax],[Address], [Email],[TotalPrice],[Comment],[Source],[Company],[CreateDay]
--    FROM NTE 
--    WHERE 
--      (RowNum > @PageSize * (@PageNumber - 1) )
--      AND 
--      (RowNum <= @PageSize * @PageNumber )
--    ORDER BY RowNum;
-- END

	
    
--    -- 以下是另一組 DataSet 用來取得資料總數 --
--	;WITH CTE AS
--    (
--      SELECT DISTINCT a.[OrderID]    
--		FROM [enterprise_Od] a LEFT JOIN [enterprise_Odt]  b
--		ON a.OrderID = b.OrderID 
--		WHERE 
--		a.[Company] = @Company AND 
--		(@Filter IS NULL OR 
--					CASE WHEN @FilterBy='Aid' THEN b.[ActID]
--							WHEN @FilterBy='Name' THEN b.[Name]
--							WHEN @FilterBy='Eid' THEN b.[EmpID]
--							WHEN @FilterBy='Sid' THEN b.[SID]
--							WHEN @FilterBy='Oid' THEN a.[OrderID]
--							WHEN @FilterBy='Cmt' THEN a.[Comment]
--					END 
--					Like @Filter + '%'
--					)
					
--    )
--    SELECT @totalRow = COUNT(*) OVER() FROM CTE 

--	RETURN @totalRow;
    
END
GO
